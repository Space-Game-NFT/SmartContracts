{
  "address": "0x60844Fbe15160979284fcC943520Ae3CAFC40028",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "qty",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "burnFrom",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "getInfoForType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "mints",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "burns",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxSupply",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "oresExchangeAmt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SacrificialAlter.TypeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "qty",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oresToken",
      "outputs": [
        {
          "internalType": "contract IORES",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ores",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeAmt",
          "type": "uint256"
        }
      ],
      "name": "setExchangeAmt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply",
          "type": "uint16"
        }
      ],
      "name": "setType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOriginAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2c90e891342fa80fa72dd6d2ca2530d2726ce861a97002aa70b6c03c080e5e1",
  "receipt": {
    "to": null,
    "from": "0x1aeBc84042d8Fd415bBa14d25597B4C2748D52Eb",
    "contractAddress": "0x60844Fbe15160979284fcC943520Ae3CAFC40028",
    "transactionIndex": 3,
    "gasUsed": "2453588",
    "logsBloom": "0x
    "blockHash": "0x88451acf004d401e63396b4fd33059795fdd863feb0f9ac07f316fdd02f9d8ae",
    "transactionHash": "0xb2c90e891342fa80fa72dd6d2ca2530d2726ce861a97002aa70b6c03c080e5e1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10053588,
        "transactionHash": "0xb2c90e891342fa80fa72dd6d2ca2530d2726ce861a97002aa70b6c03c080e5e1",
        "address": "0x60844Fbe15160979284fcC943520Ae3CAFC40028",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001aebc84042d8fd415bba14d25597b4c2748d52eb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x88451acf004d401e63396b4fd33059795fdd863feb0f9ac07f316fdd02f9d8ae"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 10053588,
        "transactionHash": "0xb2c90e891342fa80fa72dd6d2ca2530d2726ce861a97002aa70b6c03c080e5e1",
        "address": "0x60844Fbe15160979284fcC943520Ae3CAFC40028",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x0000000000000000000000001aebc84042d8fd415bba14d25597b4c2748d52eb",
        "logIndex": 2,
        "blockHash": "0x88451acf004d401e63396b4fd33059795fdd863feb0f9ac07f316fdd02f9d8ae"
      }
    ],
    "blockNumber": 10053588,
    "cumulativeGasUsed": "2715422",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Opensea_BaseURI"
  ],
  "numDeployments": 1,
  "solcInputHash": "0bce7b30075be53e1d12557fef65afb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"burnFrom\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"getInfoForType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"mints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burns\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"oresExchangeAmt\",\"type\":\"uint256\"}],\"internalType\":\"struct SacrificialAlter.TypeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oresToken\",\"outputs\":[{\"internalType\":\"contract IORES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ores\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeAmt\",\"type\":\"uint256\"}],\"name\":\"setExchangeAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"}],\"name\":\"setType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOriginAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"params\":{\"addr\":\"the address to enable\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAdmin(address)\":{\"params\":{\"addr\":\"the address to disbale\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"enables an address to mint / burn\"},\"balanceOf(address,uint256)\":{\"notice\":\"SECURITEEEEEEE \"},\"burn(uint256,uint16,address)\":{\"notice\":\"Burn a token - any payment / game logic should be handled in the game contract. \"},\"mint(uint256,uint16,address)\":{\"notice\":\"Mint a token - any payment / game logic should be handled in the game contract. \"},\"removeAdmin(address)\":{\"notice\":\"disables an address from minting / burning\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SacrificialAlter.sol\":\"SacrificialAlter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/SacrificialAlter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ISacrificialAlter.sol\\\";\\nimport \\\"./interfaces/IORES.sol\\\";\\n\\n\\ncontract SacrificialAlter is ISacrificialAlter, ERC1155, Ownable, Pausable {\\n    using EnumerableSet for EnumerableSet.UintSet; \\n    using Strings for uint256;\\n    string private baseURI;\\n\\n    struct TypeInfo {\\n        uint16 mints;\\n        uint16 burns;\\n        uint16 maxSupply;\\n        uint256 oresExchangeAmt;\\n    }\\n    struct LastWrite {\\n        uint64 time;\\n        uint64 blockNum;\\n    }\\n\\n    // Tracks the last block and timestamp that a caller has written to state.\\n    // Disallow some access to functions if they occur while a change is being written.\\n    mapping(address => LastWrite) private lastWrite;\\n\\n    mapping(uint256 => TypeInfo) private typeInfo;\\n\\n    // address => allowedToCallFunctions\\n    mapping(address => bool) private admins;\\n\\n    // reference to the $ORES contract for minting $ORES earnings\\n    IORES public oresToken;\\n\\n    constructor(string memory _baseURI) ERC1155(_baseURI) {\\n        baseURI =_baseURI;\\n        _pause();\\n    }\\n\\n    modifier disallowIfStateIsChanging() {\\n        // frens can always call whenever they want :)\\n        require(admins[_msgSender()] || lastWrite[tx.origin].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        _;\\n    }\\n\\n    /** CRITICAL TO SETUP */\\n\\n    modifier requireContractsSet() {\\n        require(address(oresToken) != address(0), \\\"Contracts not set\\\");\\n        _;\\n    }\\n\\n    function setContracts(address _ores) external onlyOwner {\\n        oresToken = IORES(_ores);\\n    }\\n\\n    /** \\n    * Mint a token - any payment / game logic should be handled in the game contract. \\n    */\\n    function mint(uint256 typeId, uint16 qty, address recipient) external override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        require(typeInfo[typeId].mints - typeInfo[typeId].burns + qty <= typeInfo[typeId].maxSupply, \\\"All tokens minted\\\");\\n        if(typeInfo[typeId].oresExchangeAmt > 0) {\\n            // If the ERC1155 is swapped for $ORES, transfer the GP to this contract in case the swap back is desired.\\n            // NOTE: This will fail if the origin doesn't have the required amount of $ORES\\n            oresToken.transferFrom(tx.origin, address(this), typeInfo[typeId].oresExchangeAmt * qty);\\n        }\\n        typeInfo[typeId].mints += qty;\\n        _mint(recipient, typeId, qty, \\\"\\\");\\n    }\\n\\n    /** \\n    * Burn a token - any payment / game logic should be handled in the game contract. \\n    */\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        if(typeInfo[typeId].oresExchangeAmt > 0) {\\n            // If the ERC1155 was swapped from $ORES, transfer the GP from this contract back to whoever owns this token now.\\n            oresToken.transferFrom(address(this), tx.origin, typeInfo[typeId].oresExchangeAmt * qty);\\n        }\\n        typeInfo[typeId].burns += qty;\\n        _burn(burnFrom, typeId, qty);\\n    }\\n    \\n    function setType(uint256 typeId, uint16 maxSupply) external onlyOwner {\\n        require(typeInfo[typeId].mints <= maxSupply, \\\"max supply too low\\\");\\n        typeInfo[typeId].maxSupply = maxSupply;\\n    }\\n    \\n    function setExchangeAmt(uint256 typeId, uint256 exchangeAmt) external onlyOwner {\\n        require(typeInfo[typeId].maxSupply > 0, \\\"this type has not been set up\\\");\\n        typeInfo[typeId].oresExchangeAmt = exchangeAmt;\\n    }\\n\\n    function updateOriginAccess() external override {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        lastWrite[tx.origin].blockNum = uint64(block.number);\\n        lastWrite[tx.origin].time = uint64(block.timestamp);\\n    }\\n\\n    /**\\n    * enables an address to mint / burn\\n    * @param addr the address to enable\\n    */\\n    function addAdmin(address addr) external onlyOwner {\\n        admins[addr] = true;\\n    }\\n\\n    /**\\n    * disables an address from minting / burning\\n    * @param addr the address to disbale\\n    */\\n    function removeAdmin(address addr) external onlyOwner {\\n        admins[addr] = false;\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner requireContractsSet {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    function setBaseUri(string memory _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    function getInfoForType(uint256 typeId) external view disallowIfStateIsChanging returns(TypeInfo memory) {\\n        require(typeInfo[typeId].maxSupply > 0, \\\"invalid type\\\");\\n        return typeInfo[typeId];\\n    }\\n\\n    function uri(uint256 typeId)\\n        public\\n        view                \\n        override\\n        returns (string memory)\\n    {\\n        require(typeInfo[typeId].maxSupply > 0, \\\"invalid type\\\");\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, typeId.toString())) : baseURI;\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override(ERC1155, ISacrificialAlter) {\\n        // allow admin contracts to be send without approval\\n        if(!admins[_msgSender()]) {\\n            require(\\n                from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n                \\\"ERC1155: caller is not owner nor approved\\\"\\n            );\\n        }\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /** SECURITEEEEEEE */\\n    \\n    function balanceOf(address account, uint256 id) public view virtual override(ERC1155, ISacrificialAlter) disallowIfStateIsChanging returns (uint256) {\\n        // Y U checking on this address in the same block it's being modified... hmmmm\\n        require(admins[_msgSender()] || lastWrite[account].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        return super.balanceOf(account, id);\\n    }\\n}\",\"keccak256\":\"0xbe99e8e7ce3ee576f43f6bd2f41e367500d480c838f8e9525f6de2aa5db49cd7\",\"license\":\"MIT\"},\"contracts/interfaces/IORES.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IORES {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1f022aafad54e89fb10e93482e54afffaac90276e3670c904b9dff2fb9c58357\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ISacrificialAlter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISacrificialAlter {\\n    function mint(uint256 typeId, uint16 qty, address recipient) external;\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external;\\n    function updateOriginAccess() external;\\n    function balanceOf(address account, uint256 id) external returns (uint256);\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n}\",\"keccak256\":\"0xe43936d2480512e36a2cc8f6daecb934f8805802cc2252d350f852f31f2f80bd\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d5e38038062002d5e833981016040819052620000349162000243565b80620000408162000080565b506200004c3362000099565b6003805460ff60a01b1916905580516200006e9060049060208401906200019d565b5062000079620000eb565b506200036c565b8051620000959060029060208401906200019d565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000ff600354600160a01b900460ff1690565b15620001445760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640160405180910390fd5b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620001803390565b6040516001600160a01b03909116815260200160405180910390a1565b828054620001ab9062000319565b90600052602060002090601f016020900481019282620001cf57600085556200021a565b82601f10620001ea57805160ff19168380011785556200021a565b828001600101855582156200021a579182015b828111156200021a578251825591602001919060010190620001fd565b50620002289291506200022c565b5090565b5b808211156200022857600081556001016200022d565b6000602080838503121562000256578182fd5b82516001600160401b03808211156200026d578384fd5b818501915085601f83011262000281578384fd5b81518181111562000296576200029662000356565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c162000356565b816040528281528886848701011115620002d9578687fd5b8693505b82841015620002fc5784840186015181850187015292850192620002dd565b828411156200030d57868684830101525b98975050505050505050565b6002810460018216806200032e57607f821691505b602082108114156200035057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6129e2806200037c6000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c8063715018a6116100c3578063bd3fae821161007c578063bd3fae821461031d578063c499418014610330578063c812272914610343578063e985e9c514610356578063f242432a14610392578063f2fde38b146103a557610157565b8063715018a6146102745780638da5cb5b1461027c5780639c47ee3b146102a15780639ca0f29b146102a9578063a0bcfc7f146102f7578063a22cb4651461030a57610157565b80632eb2c2d6116101155780632eb2c2d6146102005780634e1273f41461021357806351416019146102335780635a2e2f47146102465780635c975abb14610259578063704802751461026157610157565b8062fdd58e1461015c57806301ffc9a71461018257806306e7b953146101a55780630e89341c146101ba57806316c38b3c146101da5780631785f53c146101ed575b600080fd5b61016f61016a366004612120565b6103b8565b6040519081526020015b60405180910390f35b610195610190366004612249565b61048d565b6040519015158152602001610179565b6101b86101b3366004612300565b6104e1565b005b6101cd6101c83660046122c6565b610668565b604051610179919061255f565b6101b86101e8366004612211565b610799565b6101b86101fb366004611f97565b61082d565b6101b861020e366004611fe3565b610878565b610226610221366004612149565b61090f565b6040516101799190612527565b6101b8610241366004612300565b610a70565b6101b8610254366004611f97565b610c7b565b610195610cc7565b6101b861026f366004611f97565b610cd8565b6101b8610d26565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610179565b6101b8610d5c565b6102bc6102b73660046122c6565b610ddc565b60408051825161ffff908116825260208085015182169083015283830151169181019190915260609182015191810191909152608001610179565b6101b8610305366004612281565b610eff565b6101b86103183660046120ea565b610f40565b600854610289906001600160a01b031681565b6101b861033e36600461233b565b610f4b565b6101b86103513660046122de565b610ff1565b610195610364366004611fb1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101b86103a0366004612088565b6110a6565b6101b86103b3366004611f97565b611144565b3360009081526007602052604081205460ff16806103f557503260009081526005602052604090205443600160401b9091046001600160401b0316105b61041a5760405162461bcd60e51b8152600401610411906125f1565b60405180910390fd5b3360009081526007602052604090205460ff168061046057506001600160a01b03831660009081526005602052604090205443600160401b9091046001600160401b0316105b61047c5760405162461bcd60e51b8152600401610411906125f1565b61048683836111dc565b9392505050565b60006001600160e01b03198216636cdb3d1360e11b14806104be57506001600160e01b031982166303a24d0760e21b145b806104d957506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b6104e9610cc7565b156105065760405162461bcd60e51b81526004016104119061261c565b3360009081526007602052604090205460ff166105355760405162461bcd60e51b8152600401610411906125ba565b6000838152600660205260409020600101541561060f576008546000848152600660205260409020600101546001600160a01b03909116906323b872dd90309032906105869061ffff88169061277f565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156105d557600080fd5b505af11580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d919061222d565b505b6000838152600660205260409020805483919060029061063a90849062010000900461ffff1661272d565b92506101000a81548161ffff021916908361ffff16021790555061066381848461ffff1661126e565b505050565b600081815260066020526040902054606090640100000000900461ffff166106c15760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b6044820152606401610411565b6000600480546106d090612808565b90501161076757600480546106e490612808565b80601f016020809104026020016040519081016040528092919081815260200182805461071090612808565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b50505050506104d9565b6004610772836113e8565b6040516020016107839291906123de565b6040516020818303038152906040529050919050565b6003546001600160a01b031633146107c35760405162461bcd60e51b8152600401610411906126d5565b6008546001600160a01b031661080f5760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b6044820152606401610411565b80156108225761081d61150a565b61082a565b61082a611587565b50565b6003546001600160a01b031633146108575760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b03166000908152600760205260409020805460ff19169055565b6001600160a01b03851633148061089457506108948533610364565b6108fb5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610411565b6109088585858585611606565b5050505050565b606081518351146109745760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610411565b600083516001600160401b0381111561099d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50905060005b8451811015610a6857610a2d8582815181106109f857634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a2057634e487b7160e01b600052603260045260246000fd5b60200260200101516103b8565b828281518110610a4d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a618161286f565b90506109cc565b509392505050565b610a78610cc7565b15610a955760405162461bcd60e51b81526004016104119061261c565b3360009081526007602052604090205460ff16610ac45760405162461bcd60e51b8152600401610411906125ba565b60008381526006602052604090205461ffff64010000000082048116918491610af6916201000081048216911661279e565b610b00919061272d565b61ffff161115610b465760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b6044820152606401610411565b60008381526006602052604090206001015415610c20576008546000848152600660205260409020600101546001600160a01b03909116906323b872dd9032903090610b979061ffff88169061277f565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e919061222d565b505b60008381526006602052604081208054849290610c4290849061ffff1661272d565b92506101000a81548161ffff021916908361ffff16021790555061066381848461ffff16604051806020016040528060008152506117ff565b6003546001600160a01b03163314610ca55760405162461bcd60e51b8152600401610411906126d5565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600354600160a01b900460ff165b90565b6003546001600160a01b03163314610d025760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b6003546001600160a01b03163314610d505760405162461bcd60e51b8152600401610411906126d5565b610d5a6000611909565b565b3360009081526007602052604090205460ff16610d8b5760405162461bcd60e51b8152600401610411906125ba565b3260009081526005602052604090208054426001600160401b0390811667ffffffffffffffff194392909216600160401b026fffffffffffffffff0000000000000000199093169290921716179055565b60408051608081018252600080825260208083018290528284018290526060830182905233825260079052919091205460ff1680610e3957503260009081526005602052604090205443600160401b9091046001600160401b0316105b610e555760405162461bcd60e51b8152600401610411906125f1565b600082815260066020526040902054640100000000900461ffff16610eab5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b6044820152606401610411565b506000908152600660209081526040918290208251608081018452815461ffff8082168352620100008204811694830194909452640100000000900490921692820192909252600190910154606082015290565b6003546001600160a01b03163314610f295760405162461bcd60e51b8152600401610411906126d5565b8051610f3c906004906020840190611de7565b5050565b610f3c33838361195b565b6003546001600160a01b03163314610f755760405162461bcd60e51b8152600401610411906126d5565b600082815260066020526040902054640100000000900461ffff16610fdc5760405162461bcd60e51b815260206004820152601d60248201527f74686973207479706520686173206e6f74206265656e207365742075700000006044820152606401610411565b60009182526006602052604090912060010155565b6003546001600160a01b0316331461101b5760405162461bcd60e51b8152600401610411906126d5565b60008281526006602052604090205461ffff808316911611156110755760405162461bcd60e51b81526020600482015260126024820152716d617820737570706c7920746f6f206c6f7760701b6044820152606401610411565b600091825260066020526040909120805461ffff9092166401000000000265ffff0000000019909216919091179055565b3360009081526007602052604090205460ff16611137576001600160a01b0385163314806110d957506110d98533610364565b6111375760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610411565b6109088585858585611a3c565b6003546001600160a01b0316331461116e5760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b0381166111d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610411565b61082a81611909565b60006001600160a01b0383166112485760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610411565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b6001600160a01b0383166112d05760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610411565b33611300818560006112e187611b59565b6112ea87611b59565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561137d5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610411565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60608161140d57506040805180820190915260018152600360fc1b60208201526104dc565b8160005b811561143757806114218161286f565b91506114309050600a8361276b565b9150611411565b6000816001600160401b0381111561145f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611489576020820181803683370190505b5090505b84156115025761149e6001836127c1565b91506114ab600a8661288a565b6114b6906030612753565b60f81b8183815181106114d957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506114fb600a8661276b565b945061148d565b949350505050565b611512610cc7565b1561152f5760405162461bcd60e51b81526004016104119061261c565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861156a3390565b6040516001600160a01b03909116815260200160405180910390a1565b61158f610cc7565b6115d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610411565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361156a565b81518351146116685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610411565b6001600160a01b03841661168e5760405162461bcd60e51b815260040161041190612646565b3360005b84518110156117915760008582815181106116bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106116e957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117395760405162461bcd60e51b81526004016104119061268b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611776908490612753565b925050819055505050508061178a9061286f565b9050611692565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e192919061253a565b60405180910390a46117f7818787878787611bb2565b505050505050565b6001600160a01b03841661185f5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610411565b336118798160008761187088611b59565b61090888611b59565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906118a9908490612753565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461090881600087878787611d1d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119cf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610411565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611a625760405162461bcd60e51b815260040161041190612646565b33611a7281878761187088611b59565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611ab35760405162461bcd60e51b81526004016104119061268b565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611af0908490612753565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b50828888888888611d1d565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ba157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156117f75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bf69089908990889088908890600401612484565b602060405180830381600087803b158015611c1057600080fd5b505af1925050508015611c40575060408051601f3d908101601f19168201909252611c3d91810190612265565b60015b611ced57611c4c6128e0565b806308c379a01415611c865750611c616128f7565b80611c6c5750611c88565b8060405162461bcd60e51b8152600401610411919061255f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610411565b6001600160e01b0319811663bc197c8160e01b14611b505760405162461bcd60e51b815260040161041190612572565b6001600160a01b0384163b156117f75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6190899089908890889088906004016124e2565b602060405180830381600087803b158015611d7b57600080fd5b505af1925050508015611dab575060408051601f3d908101601f19168201909252611da891810190612265565b60015b611db757611c4c6128e0565b6001600160e01b0319811663f23a6e6160e01b14611b505760405162461bcd60e51b815260040161041190612572565b828054611df390612808565b90600052602060002090601f016020900481019282611e155760008555611e5b565b82601f10611e2e57805160ff1916838001178555611e5b565b82800160010185558215611e5b579182015b82811115611e5b578251825591602001919060010190611e40565b50611e67929150611e6b565b5090565b5b80821115611e675760008155600101611e6c565b60006001600160401b03831115611e9957611e996128ca565b604051611eb0601f8501601f191660200182612843565b809150838152848484011115611ec557600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146104dc57600080fd5b600082601f830112611f04578081fd5b81356020611f118261270a565b604051611f1e8282612843565b838152828101915085830183850287018401881015611f3b578586fd5b855b85811015611f5957813584529284019290840190600101611f3d565b5090979650505050505050565b600082601f830112611f76578081fd5b61048683833560208501611e80565b803561ffff811681146104dc57600080fd5b600060208284031215611fa8578081fd5b61048682611edd565b60008060408385031215611fc3578081fd5b611fcc83611edd565b9150611fda60208401611edd565b90509250929050565b600080600080600060a08688031215611ffa578081fd5b61200386611edd565b945061201160208701611edd565b935060408601356001600160401b038082111561202c578283fd5b61203889838a01611ef4565b9450606088013591508082111561204d578283fd5b61205989838a01611ef4565b9350608088013591508082111561206e578283fd5b5061207b88828901611f66565b9150509295509295909350565b600080600080600060a0868803121561209f578081fd5b6120a886611edd565b94506120b660208701611edd565b9350604086013592506060860135915060808601356001600160401b038111156120de578182fd5b61207b88828901611f66565b600080604083850312156120fc578182fd5b61210583611edd565b9150602083013561211581612988565b809150509250929050565b60008060408385031215612132578182fd5b61213b83611edd565b946020939093013593505050565b6000806040838503121561215b578182fd5b82356001600160401b0380821115612171578384fd5b818501915085601f830112612184578384fd5b813560206121918261270a565b60405161219e8282612843565b8381528281019150858301838502870184018b10156121bb578889fd5b8896505b848710156121e4576121d081611edd565b8352600196909601959183019183016121bf565b50965050860135925050808211156121fa578283fd5b5061220785828601611ef4565b9150509250929050565b600060208284031215612222578081fd5b813561048681612988565b60006020828403121561223e578081fd5b815161048681612988565b60006020828403121561225a578081fd5b813561048681612996565b600060208284031215612276578081fd5b815161048681612996565b600060208284031215612292578081fd5b81356001600160401b038111156122a7578182fd5b8201601f810184136122b7578182fd5b61150284823560208401611e80565b6000602082840312156122d7578081fd5b5035919050565b600080604083850312156122f0578182fd5b82359150611fda60208401611f85565b600080600060608486031215612314578081fd5b8335925061232460208501611f85565b915061233260408501611edd565b90509250925092565b6000806040838503121561234d578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561238b5781518752958201959082019060010161236f565b509495945050505050565b600081518084526123ae8160208601602086016127d8565b601f01601f19169290920160200192915050565b600081516123d48185602086016127d8565b9290920192915050565b82546000908190600281046001808316806123fa57607f831692505b602080841082141561241a57634e487b7160e01b87526022600452602487fd5b81801561242e576001811461243f5761246b565b60ff1986168952848901965061246b565b60008b815260209020885b868110156124635781548b82015290850190830161244a565b505084890196505b50505050505061247b81856123c2565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124b09083018661235c565b82810360608401526124c2818661235c565b905082810360808401526124d68185612396565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061251c90830184612396565b979650505050505050565b600060208252610486602083018461235c565b60006040825261254d604083018561235c565b828103602084015261247b818561235c565b6000602082526104866020830184612396565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526019908201527f4f6e6c792061646d696e732063616e2063616c6c207468697300000000000000604082015260600190565b602080825260119082015270686d6d6d6d207768617420646f696e673f60781b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006001600160401b03821115612723576127236128ca565b5060209081020190565b600061ffff80831681851680830382111561274a5761274a61289e565b01949350505050565b600082198211156127665761276661289e565b500190565b60008261277a5761277a6128b4565b500490565b60008160001904831182151516156127995761279961289e565b500290565b600061ffff838116908316818110156127b9576127b961289e565b039392505050565b6000828210156127d3576127d361289e565b500390565b60005b838110156127f35781810151838201526020016127db565b83811115612802576000848401525b50505050565b60028104600182168061281c57607f821691505b6020821081141561283d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715612868576128686128ca565b6040525050565b60006000198214156128835761288361289e565b5060010190565b600082612899576128996128b4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610cd557600481823e5160e01c90565b600060443d101561290757610cd5565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612938575050505050610cd5565b828501915081518181111561295257505050505050610cd5565b843d870101602082850101111561296e57505050505050610cd5565b61297d60208286010187612843565b509094505050505090565b801515811461082a57600080fd5b6001600160e01b03198116811461082a57600080fdfea264697066735822122083f09e020ddd9b3d6478c81710ab3b81ab376a83fccf1d55e16ee4873c0ac09764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101575760003560e01c8063715018a6116100c3578063bd3fae821161007c578063bd3fae821461031d578063c499418014610330578063c812272914610343578063e985e9c514610356578063f242432a14610392578063f2fde38b146103a557610157565b8063715018a6146102745780638da5cb5b1461027c5780639c47ee3b146102a15780639ca0f29b146102a9578063a0bcfc7f146102f7578063a22cb4651461030a57610157565b80632eb2c2d6116101155780632eb2c2d6146102005780634e1273f41461021357806351416019146102335780635a2e2f47146102465780635c975abb14610259578063704802751461026157610157565b8062fdd58e1461015c57806301ffc9a71461018257806306e7b953146101a55780630e89341c146101ba57806316c38b3c146101da5780631785f53c146101ed575b600080fd5b61016f61016a366004612120565b6103b8565b6040519081526020015b60405180910390f35b610195610190366004612249565b61048d565b6040519015158152602001610179565b6101b86101b3366004612300565b6104e1565b005b6101cd6101c83660046122c6565b610668565b604051610179919061255f565b6101b86101e8366004612211565b610799565b6101b86101fb366004611f97565b61082d565b6101b861020e366004611fe3565b610878565b610226610221366004612149565b61090f565b6040516101799190612527565b6101b8610241366004612300565b610a70565b6101b8610254366004611f97565b610c7b565b610195610cc7565b6101b861026f366004611f97565b610cd8565b6101b8610d26565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610179565b6101b8610d5c565b6102bc6102b73660046122c6565b610ddc565b60408051825161ffff908116825260208085015182169083015283830151169181019190915260609182015191810191909152608001610179565b6101b8610305366004612281565b610eff565b6101b86103183660046120ea565b610f40565b600854610289906001600160a01b031681565b6101b861033e36600461233b565b610f4b565b6101b86103513660046122de565b610ff1565b610195610364366004611fb1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101b86103a0366004612088565b6110a6565b6101b86103b3366004611f97565b611144565b3360009081526007602052604081205460ff16806103f557503260009081526005602052604090205443600160401b9091046001600160401b0316105b61041a5760405162461bcd60e51b8152600401610411906125f1565b60405180910390fd5b3360009081526007602052604090205460ff168061046057506001600160a01b03831660009081526005602052604090205443600160401b9091046001600160401b0316105b61047c5760405162461bcd60e51b8152600401610411906125f1565b61048683836111dc565b9392505050565b60006001600160e01b03198216636cdb3d1360e11b14806104be57506001600160e01b031982166303a24d0760e21b145b806104d957506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b6104e9610cc7565b156105065760405162461bcd60e51b81526004016104119061261c565b3360009081526007602052604090205460ff166105355760405162461bcd60e51b8152600401610411906125ba565b6000838152600660205260409020600101541561060f576008546000848152600660205260409020600101546001600160a01b03909116906323b872dd90309032906105869061ffff88169061277f565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156105d557600080fd5b505af11580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d919061222d565b505b6000838152600660205260409020805483919060029061063a90849062010000900461ffff1661272d565b92506101000a81548161ffff021916908361ffff16021790555061066381848461ffff1661126e565b505050565b600081815260066020526040902054606090640100000000900461ffff166106c15760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b6044820152606401610411565b6000600480546106d090612808565b90501161076757600480546106e490612808565b80601f016020809104026020016040519081016040528092919081815260200182805461071090612808565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b50505050506104d9565b6004610772836113e8565b6040516020016107839291906123de565b6040516020818303038152906040529050919050565b6003546001600160a01b031633146107c35760405162461bcd60e51b8152600401610411906126d5565b6008546001600160a01b031661080f5760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b6044820152606401610411565b80156108225761081d61150a565b61082a565b61082a611587565b50565b6003546001600160a01b031633146108575760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b03166000908152600760205260409020805460ff19169055565b6001600160a01b03851633148061089457506108948533610364565b6108fb5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610411565b6109088585858585611606565b5050505050565b606081518351146109745760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610411565b600083516001600160401b0381111561099d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50905060005b8451811015610a6857610a2d8582815181106109f857634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a2057634e487b7160e01b600052603260045260246000fd5b60200260200101516103b8565b828281518110610a4d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a618161286f565b90506109cc565b509392505050565b610a78610cc7565b15610a955760405162461bcd60e51b81526004016104119061261c565b3360009081526007602052604090205460ff16610ac45760405162461bcd60e51b8152600401610411906125ba565b60008381526006602052604090205461ffff64010000000082048116918491610af6916201000081048216911661279e565b610b00919061272d565b61ffff161115610b465760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b6044820152606401610411565b60008381526006602052604090206001015415610c20576008546000848152600660205260409020600101546001600160a01b03909116906323b872dd9032903090610b979061ffff88169061277f565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e919061222d565b505b60008381526006602052604081208054849290610c4290849061ffff1661272d565b92506101000a81548161ffff021916908361ffff16021790555061066381848461ffff16604051806020016040528060008152506117ff565b6003546001600160a01b03163314610ca55760405162461bcd60e51b8152600401610411906126d5565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600354600160a01b900460ff165b90565b6003546001600160a01b03163314610d025760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b6003546001600160a01b03163314610d505760405162461bcd60e51b8152600401610411906126d5565b610d5a6000611909565b565b3360009081526007602052604090205460ff16610d8b5760405162461bcd60e51b8152600401610411906125ba565b3260009081526005602052604090208054426001600160401b0390811667ffffffffffffffff194392909216600160401b026fffffffffffffffff0000000000000000199093169290921716179055565b60408051608081018252600080825260208083018290528284018290526060830182905233825260079052919091205460ff1680610e3957503260009081526005602052604090205443600160401b9091046001600160401b0316105b610e555760405162461bcd60e51b8152600401610411906125f1565b600082815260066020526040902054640100000000900461ffff16610eab5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b6044820152606401610411565b506000908152600660209081526040918290208251608081018452815461ffff8082168352620100008204811694830194909452640100000000900490921692820192909252600190910154606082015290565b6003546001600160a01b03163314610f295760405162461bcd60e51b8152600401610411906126d5565b8051610f3c906004906020840190611de7565b5050565b610f3c33838361195b565b6003546001600160a01b03163314610f755760405162461bcd60e51b8152600401610411906126d5565b600082815260066020526040902054640100000000900461ffff16610fdc5760405162461bcd60e51b815260206004820152601d60248201527f74686973207479706520686173206e6f74206265656e207365742075700000006044820152606401610411565b60009182526006602052604090912060010155565b6003546001600160a01b0316331461101b5760405162461bcd60e51b8152600401610411906126d5565b60008281526006602052604090205461ffff808316911611156110755760405162461bcd60e51b81526020600482015260126024820152716d617820737570706c7920746f6f206c6f7760701b6044820152606401610411565b600091825260066020526040909120805461ffff9092166401000000000265ffff0000000019909216919091179055565b3360009081526007602052604090205460ff16611137576001600160a01b0385163314806110d957506110d98533610364565b6111375760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610411565b6109088585858585611a3c565b6003546001600160a01b0316331461116e5760405162461bcd60e51b8152600401610411906126d5565b6001600160a01b0381166111d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610411565b61082a81611909565b60006001600160a01b0383166112485760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610411565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b6001600160a01b0383166112d05760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610411565b33611300818560006112e187611b59565b6112ea87611b59565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561137d5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610411565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60608161140d57506040805180820190915260018152600360fc1b60208201526104dc565b8160005b811561143757806114218161286f565b91506114309050600a8361276b565b9150611411565b6000816001600160401b0381111561145f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611489576020820181803683370190505b5090505b84156115025761149e6001836127c1565b91506114ab600a8661288a565b6114b6906030612753565b60f81b8183815181106114d957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506114fb600a8661276b565b945061148d565b949350505050565b611512610cc7565b1561152f5760405162461bcd60e51b81526004016104119061261c565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861156a3390565b6040516001600160a01b03909116815260200160405180910390a1565b61158f610cc7565b6115d25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610411565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361156a565b81518351146116685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610411565b6001600160a01b03841661168e5760405162461bcd60e51b815260040161041190612646565b3360005b84518110156117915760008582815181106116bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106116e957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117395760405162461bcd60e51b81526004016104119061268b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611776908490612753565b925050819055505050508061178a9061286f565b9050611692565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e192919061253a565b60405180910390a46117f7818787878787611bb2565b505050505050565b6001600160a01b03841661185f5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610411565b336118798160008761187088611b59565b61090888611b59565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906118a9908490612753565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461090881600087878787611d1d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119cf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610411565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611a625760405162461bcd60e51b815260040161041190612646565b33611a7281878761187088611b59565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611ab35760405162461bcd60e51b81526004016104119061268b565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611af0908490612753565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b50828888888888611d1d565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ba157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156117f75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bf69089908990889088908890600401612484565b602060405180830381600087803b158015611c1057600080fd5b505af1925050508015611c40575060408051601f3d908101601f19168201909252611c3d91810190612265565b60015b611ced57611c4c6128e0565b806308c379a01415611c865750611c616128f7565b80611c6c5750611c88565b8060405162461bcd60e51b8152600401610411919061255f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610411565b6001600160e01b0319811663bc197c8160e01b14611b505760405162461bcd60e51b815260040161041190612572565b6001600160a01b0384163b156117f75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6190899089908890889088906004016124e2565b602060405180830381600087803b158015611d7b57600080fd5b505af1925050508015611dab575060408051601f3d908101601f19168201909252611da891810190612265565b60015b611db757611c4c6128e0565b6001600160e01b0319811663f23a6e6160e01b14611b505760405162461bcd60e51b815260040161041190612572565b828054611df390612808565b90600052602060002090601f016020900481019282611e155760008555611e5b565b82601f10611e2e57805160ff1916838001178555611e5b565b82800160010185558215611e5b579182015b82811115611e5b578251825591602001919060010190611e40565b50611e67929150611e6b565b5090565b5b80821115611e675760008155600101611e6c565b60006001600160401b03831115611e9957611e996128ca565b604051611eb0601f8501601f191660200182612843565b809150838152848484011115611ec557600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146104dc57600080fd5b600082601f830112611f04578081fd5b81356020611f118261270a565b604051611f1e8282612843565b838152828101915085830183850287018401881015611f3b578586fd5b855b85811015611f5957813584529284019290840190600101611f3d565b5090979650505050505050565b600082601f830112611f76578081fd5b61048683833560208501611e80565b803561ffff811681146104dc57600080fd5b600060208284031215611fa8578081fd5b61048682611edd565b60008060408385031215611fc3578081fd5b611fcc83611edd565b9150611fda60208401611edd565b90509250929050565b600080600080600060a08688031215611ffa578081fd5b61200386611edd565b945061201160208701611edd565b935060408601356001600160401b038082111561202c578283fd5b61203889838a01611ef4565b9450606088013591508082111561204d578283fd5b61205989838a01611ef4565b9350608088013591508082111561206e578283fd5b5061207b88828901611f66565b9150509295509295909350565b600080600080600060a0868803121561209f578081fd5b6120a886611edd565b94506120b660208701611edd565b9350604086013592506060860135915060808601356001600160401b038111156120de578182fd5b61207b88828901611f66565b600080604083850312156120fc578182fd5b61210583611edd565b9150602083013561211581612988565b809150509250929050565b60008060408385031215612132578182fd5b61213b83611edd565b946020939093013593505050565b6000806040838503121561215b578182fd5b82356001600160401b0380821115612171578384fd5b818501915085601f830112612184578384fd5b813560206121918261270a565b60405161219e8282612843565b8381528281019150858301838502870184018b10156121bb578889fd5b8896505b848710156121e4576121d081611edd565b8352600196909601959183019183016121bf565b50965050860135925050808211156121fa578283fd5b5061220785828601611ef4565b9150509250929050565b600060208284031215612222578081fd5b813561048681612988565b60006020828403121561223e578081fd5b815161048681612988565b60006020828403121561225a578081fd5b813561048681612996565b600060208284031215612276578081fd5b815161048681612996565b600060208284031215612292578081fd5b81356001600160401b038111156122a7578182fd5b8201601f810184136122b7578182fd5b61150284823560208401611e80565b6000602082840312156122d7578081fd5b5035919050565b600080604083850312156122f0578182fd5b82359150611fda60208401611f85565b600080600060608486031215612314578081fd5b8335925061232460208501611f85565b915061233260408501611edd565b90509250925092565b6000806040838503121561234d578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561238b5781518752958201959082019060010161236f565b509495945050505050565b600081518084526123ae8160208601602086016127d8565b601f01601f19169290920160200192915050565b600081516123d48185602086016127d8565b9290920192915050565b82546000908190600281046001808316806123fa57607f831692505b602080841082141561241a57634e487b7160e01b87526022600452602487fd5b81801561242e576001811461243f5761246b565b60ff1986168952848901965061246b565b60008b815260209020885b868110156124635781548b82015290850190830161244a565b505084890196505b50505050505061247b81856123c2565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124b09083018661235c565b82810360608401526124c2818661235c565b905082810360808401526124d68185612396565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061251c90830184612396565b979650505050505050565b600060208252610486602083018461235c565b60006040825261254d604083018561235c565b828103602084015261247b818561235c565b6000602082526104866020830184612396565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526019908201527f4f6e6c792061646d696e732063616e2063616c6c207468697300000000000000604082015260600190565b602080825260119082015270686d6d6d6d207768617420646f696e673f60781b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006001600160401b03821115612723576127236128ca565b5060209081020190565b600061ffff80831681851680830382111561274a5761274a61289e565b01949350505050565b600082198211156127665761276661289e565b500190565b60008261277a5761277a6128b4565b500490565b60008160001904831182151516156127995761279961289e565b500290565b600061ffff838116908316818110156127b9576127b961289e565b039392505050565b6000828210156127d3576127d361289e565b500390565b60005b838110156127f35781810151838201526020016127db565b83811115612802576000848401525b50505050565b60028104600182168061281c57607f821691505b6020821081141561283d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715612868576128686128ca565b6040525050565b60006000198214156128835761288361289e565b5060010190565b600082612899576128996128b4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610cd557600481823e5160e01c90565b600060443d101561290757610cd5565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612938575050505050610cd5565b828501915081518181111561295257505050505050610cd5565b843d870101602082850101111561296e57505050505050610cd5565b61297d60208286010187612843565b509094505050505090565b801515811461082a57600080fd5b6001600160e01b03198116811461082a57600080fdfea264697066735822122083f09e020ddd9b3d6478c81710ab3b81ab376a83fccf1d55e16ee4873c0ac09764736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "params": {
          "addr": "the address to enable"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeAdmin(address)": {
        "params": {
          "addr": "the address to disbale"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmin(address)": {
        "notice": "enables an address to mint / burn"
      },
      "balanceOf(address,uint256)": {
        "notice": "SECURITEEEEEEE "
      },
      "burn(uint256,uint16,address)": {
        "notice": "Burn a token - any payment / game logic should be handled in the game contract. "
      },
      "mint(uint256,uint16,address)": {
        "notice": "Mint a token - any payment / game logic should be handled in the game contract. "
      },
      "removeAdmin(address)": {
        "notice": "disables an address from minting / burning"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1767,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1773,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1775,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1512,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1627,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 11300,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "baseURI",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 11319,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "lastWrite",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(LastWrite)11314_storage)"
      },
      {
        "astId": 11324,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "typeInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TypeInfo)11309_storage)"
      },
      {
        "astId": 11328,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "admins",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11331,
        "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
        "label": "oresToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IORES)14165"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IORES)14165": {
        "encoding": "inplace",
        "label": "contract IORES",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(LastWrite)11314_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SacrificialAlter.LastWrite)",
        "numberOfBytes": "32",
        "value": "t_struct(LastWrite)11314_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TypeInfo)11309_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SacrificialAlter.TypeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TypeInfo)11309_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LastWrite)11314_storage": {
        "encoding": "inplace",
        "label": "struct SacrificialAlter.LastWrite",
        "members": [
          {
            "astId": 11311,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11313,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "blockNum",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TypeInfo)11309_storage": {
        "encoding": "inplace",
        "label": "struct SacrificialAlter.TypeInfo",
        "members": [
          {
            "astId": 11302,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "mints",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11304,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "burns",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11306,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "maxSupply",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11308,
            "contract": "contracts/SacrificialAlter.sol:SacrificialAlter",
            "label": "oresExchangeAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}