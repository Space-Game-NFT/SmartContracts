{
  "address": "0x35DD75a2EDff3cf952190CD4f8e5e6bb67742a62",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "unstaked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        }
      ],
      "name": "AlienClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "unstaked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        }
      ],
      "name": "MarineClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isMarine",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TokenStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAILY_ORES_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_GLOBAL_ORES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RANK",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_TO_EXIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORES_CLAIM_TAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "tokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "addManyToMarinePoolAndAlienPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "owed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "tokenIds",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "unstake",
          "type": "bool"
        }
      ],
      "name": "claimManyFromMarinePoolAndAlienPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mnaGame",
      "outputs": [
        {
          "internalType": "contract IMnAGame",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mnaNFT",
      "outputs": [
        {
          "internalType": "contract IMnA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oresToken",
      "outputs": [
        {
          "internalType": "contract IORES",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "randomAlienOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomSeedGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomSeedGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "rescueForAliens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mnaNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ores",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mnaGame",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rand",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setRescueEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "setTreasureChestId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalORESEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasureChestTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 15,
  "solcInputHash": "089b670dc62c9ed681c51de5863ca1aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"AlienClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"MarineClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isMarine\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_ORES_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_ORES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RANK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORES_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToMarinePoolAndAlienPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromMarinePoolAndAlienPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnaGame\",\"outputs\":[{\"internalType\":\"contract IMnAGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnaNFT\",\"outputs\":[{\"internalType\":\"contract IMnA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oresToken\",\"outputs\":[{\"internalType\":\"contract IORES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomAlienOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomSeedGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomSeedGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescueForAliens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mnaNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ores\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mnaGame\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rand\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"setTreasureChestId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalORESEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureChestTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addManyToMarinePoolAndAlienPool(address,uint16[])\":{\"params\":{\"account\":\"the address of the staker\",\"tokenIds\":\"the IDs of the Marines and Aliens to stake\"}},\"claimManyFromMarinePoolAndAlienPool(uint16[],bool)\":{\"params\":{\"tokenIds\":\"the IDs of the tokens to claim earnings from\",\"unstake\":\"whether or not to unstake ALL of the tokens listed in tokenIds\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"randomAlienOwner(uint256)\":{\"params\":{\"seed\":\"a random value to choose a Alien from\"},\"returns\":{\"_0\":\"the owner of the randomly selected Alien thief\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(uint256[])\":{\"params\":{\"tokenIds\":\"the IDs of the tokens to claim earnings from\"}},\"rescueForAliens(uint256[])\":{\"params\":{\"tokenIds\":\"the IDs of the tokens to claim earnings from\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addManyToMarinePoolAndAlienPool(address,uint16[])\":{\"notice\":\"adds Marines and Aliens to the MarinePool and AlienPool\"},\"claimManyFromMarinePoolAndAlienPool(uint16[],bool)\":{\"notice\":\"realize $ORES earnings and optionally unstake tokens from the MarinePool / AlienPool to unstake a Marine it will require it has 2 days worth of $ORES unclaimed\"},\"randomAlienOwner(uint256)\":{\"notice\":\"chooses a random Alien thief when a newly minted token is stolen\"},\"rescue(uint256[])\":{\"notice\":\"emergency unstake tokens\"},\"rescueForAliens(uint256[])\":{\"notice\":\"emergency unstake tokens for aliens.\"},\"setPaused(bool)\":{\"notice\":\"enables owner to pause / unpause contract\"},\"setRescueEnabled(bool)\":{\"notice\":\"allows owner to enable \\\"rescue mode\\\" simplifies accounting, prioritizes tokens out in emergency\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./interfaces/IMnAGame.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\nimport \\\"./interfaces/IORES.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IRandomSeedGenerator.sol\\\";\\n\\ncontract StakingPool is\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC721Receiver,\\n    PausableUpgradeable,\\n    IStakingPool\\n{\\n    // maximum rank for a Marine/Alien\\n    uint8 public constant MAX_RANK = 4;\\n\\n    // struct to store a stake's token, owner, and earning values\\n    struct Stake {\\n        uint16 tokenId;\\n        uint80 value;\\n        address owner;\\n        uint80 lastClaimTime;\\n    }\\n\\n    uint256 private totalRankStaked;\\n    uint256 private numMarinesStaked;\\n\\n    event TokenStaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        bool indexed isMarine,\\n        uint256 value\\n    );\\n    event MarineClaimed(\\n        uint256 indexed tokenId,\\n        bool indexed unstaked,\\n        uint256 earned\\n    );\\n    event AlienClaimed(\\n        uint256 indexed tokenId,\\n        bool indexed unstaked,\\n        uint256 earned\\n    );\\n\\n    // reference to the MnA NFT contract\\n    IMnA public mnaNFT;\\n    // reference to the MnA NFT contract\\n    IMnAGame public mnaGame;\\n    // reference to the $ORES contract for minting $ORES earnings\\n    IORES public oresToken;\\n    // reference to Randomer\\n    IRandomSeedGenerator public randomSeedGenerator;\\n\\n    // maps tokenId to stake\\n    mapping(uint256 => Stake) private marinePool;\\n    // maps rank to all Alien staked with that rank\\n    mapping(uint256 => Stake[]) private alienPool;\\n    // tracks location of each Alien in AlienPool\\n    mapping(uint256 => uint256) private alienPoolIndices;\\n    // any rewards distributed when no aliens are staked\\n    uint256 private unaccountedRewards;\\n    // amount of $ORES due for each rank point staked\\n    uint256 private oresPerRank;\\n\\n    // marines earn 10000 $ORES per day\\n    uint256 public constant DAILY_ORES_RATE = 10000 ether;\\n    // marines must have 2 days worth of $ORES to unstake or else they're still guarding the marine pool\\n    uint256 public constant MINIMUM_TO_EXIT = 2 days;\\n    // aliens take a 20% tax on all $ORES claimed\\n    uint256 public constant ORES_CLAIM_TAX_PERCENTAGE = 20;\\n    // there will only ever be (roughly) 2 billion $ORES earned through staking\\n    uint256 public constant MAXIMUM_GLOBAL_ORES = 2000000000 ether;\\n    uint256 public treasureChestTypeId;\\n\\n    // amount of $ORES earned so far\\n    uint256 public totalORESEarned;\\n    // the last time $ORES was claimed\\n    uint256 private lastClaimTimestamp;\\n\\n    // emergency rescue to allow unstaking without any checks but without $ORES\\n    bool public rescueEnabled;\\n\\n    function initialize() public initializer {\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Ownable_init_unchained();\\n        _pause();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /** CRITICAL TO SETUP */\\n\\n    modifier requireContractsSet() {\\n        require(\\n            address(mnaNFT) != address(0) &&\\n                address(oresToken) != address(0) &&\\n                address(mnaGame) != address(0) &&\\n                address(randomSeedGenerator) != address(0),\\n            \\\"Contracts not set\\\"\\n        );\\n        _;\\n    }\\n\\n    function setContracts(\\n        address _mnaNFT,\\n        address _ores,\\n        address _mnaGame,\\n        address _rand\\n    ) external onlyOwner {\\n        mnaNFT = IMnA(_mnaNFT);\\n        oresToken = IORES(_ores);\\n        mnaGame = IMnAGame(_mnaGame);\\n        randomSeedGenerator = IRandomSeedGenerator(_rand);\\n    }\\n\\n    function setTreasureChestId(uint256 typeId) external onlyOwner {\\n        treasureChestTypeId = typeId;\\n    }\\n\\n    /** STAKING */\\n\\n    /**\\n     * adds Marines and Aliens to the MarinePool and AlienPool\\n     * @param account the address of the staker\\n     * @param tokenIds the IDs of the Marines and Aliens to stake\\n     */\\n    function addManyToMarinePoolAndAlienPool(\\n        address account,\\n        uint16[] calldata tokenIds\\n    ) external override nonReentrant {\\n        require(\\n            tx.origin == _msgSender() || _msgSender() == address(mnaGame),\\n            \\\"Only EOA\\\"\\n        );\\n        require(account == tx.origin, \\\"account to sender mismatch\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (_msgSender() != address(mnaGame)) {\\n                // dont do this step if its a mint + stake\\n                require(\\n                    mnaNFT.ownerOf(tokenIds[i]) == _msgSender(),\\n                    \\\"You don't own this token\\\"\\n                );\\n                mnaNFT.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n            } else if (tokenIds[i] == 0) {\\n                continue; // there may be gaps in the array for stolen tokens\\n            }\\n\\n            if (mnaNFT.isMarine(tokenIds[i]))\\n                _addMarineToMarinePool(account, tokenIds[i]);\\n            else _addAlienToAlienPool(account, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * adds a single Marine to the MarinePool\\n     * @param account the address of the staker\\n     * @param tokenId the ID of the Marine to add to the MarinePool\\n     */\\n    function _addMarineToMarinePool(address account, uint256 tokenId)\\n        internal\\n        whenNotPaused\\n        _updateEarnings\\n    {\\n        marinePool[tokenId] = Stake({\\n            owner: account,\\n            tokenId: uint16(tokenId),\\n            value: uint80(block.timestamp),\\n            lastClaimTime: uint80(block.timestamp)\\n        });\\n        numMarinesStaked += 1;\\n        emit TokenStaked(account, tokenId, true, block.timestamp);\\n    }\\n\\n    /**\\n     * adds a single Alien to the AlienPool\\n     * @param account the address of the staker\\n     * @param tokenId the ID of the Alien to add to the AlienPool\\n     */\\n    function _addAlienToAlienPool(address account, uint256 tokenId) internal {\\n        uint8 rank = _rankForAlien(tokenId);\\n        totalRankStaked += rank; // Portion of earnings ranges from 4 to 1\\n        alienPoolIndices[tokenId] = alienPool[rank].length; // Store the location of the alien in the AlienPool\\n        alienPool[rank].push(\\n            Stake({\\n                owner: account,\\n                tokenId: uint16(tokenId),\\n                value: uint80(oresPerRank),\\n                lastClaimTime: uint80(block.timestamp)\\n            })\\n        ); // Add the alien to the AlienPool\\n        emit TokenStaked(account, tokenId, false, oresPerRank);\\n    }\\n\\n    /** CLAIMING / UNSTAKING */\\n\\n    /**\\n     * realize $ORES earnings and optionally unstake tokens from the MarinePool / AlienPool\\n     * to unstake a Marine it will require it has 2 days worth of $ORES unclaimed\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n     */\\n    function claimManyFromMarinePoolAndAlienPool(\\n        uint16[] calldata tokenIds,\\n        bool unstake\\n    ) external whenNotPaused _updateEarnings nonReentrant {\\n        require(\\n            tx.origin == _msgSender() || _msgSender() == address(mnaGame),\\n            \\\"Only EOA\\\"\\n        );\\n        uint256 owed = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (mnaNFT.isMarine(tokenIds[i])) {\\n                owed += _claimMarineFromMarinePool(tokenIds[i], unstake);\\n            } else {\\n                owed += _claimAlienFromAlienPool(tokenIds[i], unstake);\\n            }\\n        }\\n        oresToken.updateOriginAccess();\\n        if (owed == 0) {\\n            return;\\n        }\\n        oresToken.mint(_msgSender(), owed);\\n    }\\n\\n    function calculateRewards(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 owed)\\n    {\\n        uint64 lastTokenWrite = mnaNFT.getTokenWriteBlock(tokenId);\\n        // Must check this, as getTokenTraits will be allowed since this contract is an admin\\n        require(lastTokenWrite < block.number, \\\"hmmmm what doing?\\\");\\n\\n        if (mnaNFT.isMarine(tokenId)) {\\n            Stake memory stake = marinePool[tokenId];\\n            if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\\n                owed =\\n                    ((block.timestamp - stake.value) * DAILY_ORES_RATE) /\\n                    1 days;\\n            } else if (stake.value > lastClaimTimestamp) {\\n                owed = 0; // $ORES production stopped already\\n            } else {\\n                owed =\\n                    ((lastClaimTimestamp - stake.value) * DAILY_ORES_RATE) /\\n                    1 days; // stop earning additional $ORES if it's all been earned\\n            }\\n        } else {\\n            uint8 rank = _rankForAlien(tokenId);\\n            Stake memory stake = alienPool[rank][alienPoolIndices[tokenId]];\\n            owed = (MAX_RANK + 1 - rank) * (oresPerRank - stake.value); // Calculate portion of tokens based on Rank\\n        }\\n    }\\n\\n    /**\\n     * realize $ORES earnings for a single Marine and optionally unstake it\\n     * if not unstaking, pay a 20% tax to the staked Aliens\\n     * if unstaking, there is a 50% chance all $ORES is stolen\\n     * @param tokenId the ID of the Marines to claim earnings from\\n     * @param unstake whether or not to unstake the Marines\\n     * @return owed - the amount of $ORES earned\\n     */\\n    function _claimMarineFromMarinePool(uint256 tokenId, bool unstake)\\n        internal\\n        returns (uint256 owed)\\n    {\\n        Stake memory stake = marinePool[tokenId];\\n        require(stake.owner == _msgSender(), \\\"Don't own the given token\\\");\\n        require(\\n            !(unstake &&\\n                block.timestamp - stake.lastClaimTime < MINIMUM_TO_EXIT),\\n            \\\"Still guarding the marinePool\\\"\\n        );\\n        if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\\n            owed = ((block.timestamp - stake.value) * DAILY_ORES_RATE) / 1 days;\\n        } else if (stake.value > lastClaimTimestamp) {\\n            owed = 0; // $ORES production stopped already\\n        } else {\\n            owed =\\n                ((lastClaimTimestamp - stake.value) * DAILY_ORES_RATE) /\\n                1 days; // stop earning additional $ORES if it's all been earned\\n        }\\n        if (unstake) {\\n            if (randomSeedGenerator.random() & 1 == 1) {\\n                // 50% chance of all $ORES stolen\\n                _payAlienTax(owed);\\n                owed = 0;\\n            }\\n            delete marinePool[tokenId];\\n            numMarinesStaked -= 1;\\n            // Always transfer last to guard against reentrance\\n            mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // send back Marine\\n        } else {\\n            _payAlienTax((owed * ORES_CLAIM_TAX_PERCENTAGE) / 100); // percentage tax to staked aliens\\n            owed = (owed * (100 - ORES_CLAIM_TAX_PERCENTAGE)) / 100; // remainder goes to Marine owner\\n            marinePool[tokenId] = Stake({\\n                owner: _msgSender(),\\n                tokenId: uint16(tokenId),\\n                value: uint80(block.timestamp),\\n                lastClaimTime: uint80(block.timestamp)\\n            }); // reset stake\\n        }\\n        emit MarineClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /**\\n     * realize $ORES earnings for a single Alien and optionally unstake it\\n     * Aliens earn $ORES proportional to their rank\\n     * @param tokenId the ID of the Alien to claim earnings from\\n     * @param unstake whether or not to unstake the Alien\\n     * @return owed - the amount of $ORES earned\\n     */\\n    function _claimAlienFromAlienPool(uint256 tokenId, bool unstake)\\n        internal\\n        returns (uint256 owed)\\n    {\\n        require(mnaNFT.ownerOf(tokenId) == address(this), \\\"Doesn't own token\\\");\\n        uint8 rank = _rankForAlien(tokenId);\\n        Stake memory stake = alienPool[rank][alienPoolIndices[tokenId]];\\n        require(stake.owner == _msgSender(), \\\"Doesn't own token\\\");\\n        owed = (MAX_RANK + 1 - rank) * (oresPerRank - stake.value); // Calculate portion of tokens based on Rank\\n        if (unstake) {\\n            totalRankStaked -= rank; // Remove rank from total staked\\n            Stake memory lastStake = alienPool[rank][\\n                alienPool[rank].length - 1\\n            ];\\n            alienPool[rank][alienPoolIndices[tokenId]] = lastStake; // Shuffle last Alien to current position\\n            alienPoolIndices[lastStake.tokenId] = alienPoolIndices[tokenId];\\n            alienPool[rank].pop(); // Remove duplicate\\n            delete alienPoolIndices[tokenId]; // Delete old mapping\\n            // Always remove last to guard against reentrance\\n            mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\"); // Send back Alien\\n        } else {\\n            alienPool[rank][alienPoolIndices[tokenId]] = Stake({\\n                owner: _msgSender(),\\n                tokenId: uint16(tokenId),\\n                value: uint80(oresPerRank),\\n                lastClaimTime: uint80(block.timestamp)\\n            }); // reset stake\\n        }\\n        emit AlienClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /**\\n     * emergency unstake tokens\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     */\\n    function rescue(uint256[] calldata tokenIds) external nonReentrant {\\n        require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n        uint256 tokenId;\\n        Stake memory stake;\\n        Stake memory lastStake;\\n        uint8 rank;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenId = tokenIds[i];\\n            if (mnaNFT.isMarine(tokenId)) {\\n                stake = marinePool[tokenId];\\n                require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                delete marinePool[tokenId];\\n                numMarinesStaked -= 1;\\n                mnaNFT.safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    tokenId,\\n                    \\\"\\\"\\n                ); // send back Marines\\n                emit MarineClaimed(tokenId, true, 0);\\n            } else {\\n                rank = _rankForAlien(tokenId);\\n                stake = alienPool[rank][alienPoolIndices[tokenId]];\\n                require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                totalRankStaked -= rank; // Remove Rank from total staked\\n                lastStake = alienPool[rank][alienPool[rank].length - 1];\\n                alienPool[rank][alienPoolIndices[tokenId]] = lastStake; // Shuffle last Alien to current position\\n                alienPoolIndices[lastStake.tokenId] = alienPoolIndices[tokenId];\\n                alienPool[rank].pop(); // Remove duplicate\\n                delete alienPoolIndices[tokenId]; // Delete old mapping\\n                mnaNFT.safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    tokenId,\\n                    \\\"\\\"\\n                ); // Send back Alien\\n                emit AlienClaimed(tokenId, true, 0);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * emergency unstake tokens for aliens.\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     */\\n    function rescueForAliens(uint256[] calldata tokenIds)\\n        external\\n        nonReentrant\\n    {\\n        require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n        uint256 tokenId;\\n        Stake memory stake;\\n        Stake memory lastStake;\\n        uint8 rank;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenId = tokenIds[i];\\n            if (mnaNFT.isMarine(tokenId)) {\\n                stake = marinePool[tokenId];\\n                require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                delete marinePool[tokenId];\\n                numMarinesStaked -= 1;\\n                mnaNFT.safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    tokenId,\\n                    \\\"\\\"\\n                ); // send back Marines\\n                emit MarineClaimed(tokenId, true, 0);\\n            } else {\\n                rank = _rankForAlien(tokenId);\\n                uint8 reverseRank = MAX_RANK + 1 - rank;\\n                stake = alienPool[reverseRank][alienPoolIndices[tokenId]];\\n                require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                totalRankStaked -= reverseRank; // Remove Rank from total staked\\n                lastStake = alienPool[reverseRank][\\n                    alienPool[reverseRank].length - 1\\n                ];\\n                alienPool[reverseRank][alienPoolIndices[tokenId]] = lastStake; // Shuffle last Alien to current position\\n                alienPoolIndices[lastStake.tokenId] = alienPoolIndices[tokenId];\\n                alienPool[reverseRank].pop(); // Remove duplicate\\n                delete alienPoolIndices[tokenId]; // Delete old mapping\\n                mnaNFT.safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    tokenId,\\n                    \\\"\\\"\\n                ); // Send back Alien\\n                emit AlienClaimed(tokenId, true, 0);\\n            }\\n        }\\n    }\\n\\n    /** ACCOUNTING */\\n\\n    /**\\n     * add $ORES to claimable pot for the AlienPool\\n     * @param amount $ORES to add to the pot\\n     */\\n    function _payAlienTax(uint256 amount) internal {\\n        if (totalRankStaked == 0) {\\n            // if there's no staked aliens\\n            unaccountedRewards += amount; // keep track of $ORES due to aliens\\n            return;\\n        }\\n        // makes sure to include any unaccounted $ORES\\n        oresPerRank += (amount + unaccountedRewards) / totalRankStaked;\\n        unaccountedRewards = 0;\\n    }\\n\\n    /**\\n     * tracks $ORES earnings to ensure it stops once 2.4 billion is eclipsed\\n     */\\n    modifier _updateEarnings() {\\n        if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\\n            totalORESEarned +=\\n                ((block.timestamp - lastClaimTimestamp) *\\n                    numMarinesStaked *\\n                    DAILY_ORES_RATE) /\\n                1 days;\\n            lastClaimTimestamp = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    /** ADMIN */\\n\\n    /**\\n     * allows owner to enable \\\"rescue mode\\\"\\n     * simplifies accounting, prioritizes tokens out in emergency\\n     */\\n    function setRescueEnabled(bool _enabled) external onlyOwner {\\n        rescueEnabled = _enabled;\\n    }\\n\\n    /**\\n     * enables owner to pause / unpause contract\\n     */\\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    /** READ ONLY */\\n\\n    /**\\n     * gets the rank score for a Alien\\n     * @param tokenId the ID of the Alien to get the rank score for\\n     * @return the rank score of the Alien (1-4)\\n     */\\n    function _rankForAlien(uint256 tokenId) internal view returns (uint8) {\\n        IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n        return MAX_RANK - s.rankIndex; // rank index is 0-3\\n    }\\n\\n    /**\\n     * chooses a random Alien thief when a newly minted token is stolen\\n     * @param seed a random value to choose a Alien from\\n     * @return the owner of the randomly selected Alien thief\\n     */\\n    function randomAlienOwner(uint256 seed)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (totalRankStaked == 0) {\\n            return address(0x0);\\n        }\\n        uint256 bucket = (seed & 0xFFFFFFFF) % totalRankStaked; // choose a value from 0 to total rank staked\\n        uint256 cumulative;\\n        seed >>= 32;\\n        // loop through each bucket of Aliens with the same rank score\\n        for (uint256 i = MAX_RANK - 3; i <= MAX_RANK; i++) {\\n            cumulative += alienPool[i].length * (MAX_RANK + 1 - i);\\n            // if the value is not inside of that bucket, keep going\\n            if (bucket >= cumulative) continue;\\n            // get the address of a random Alien with that rank score\\n            return alienPool[i][seed % alienPool[i].length].owner;\\n        }\\n        return address(0x0);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"Cannot send to MarinePool directly\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xedb30037095094e9c7484c920fb2585023d9cc40d288fd750019ca838f8aa10e\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n\\n    function mint(address recipient, uint256 seed) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getMaxTokens() external view returns (uint256);\\n\\n    function getPaidTokens() external view returns (uint256);\\n\\n    function getTokenTraits(uint256 tokenId)\\n        external\\n        view\\n        returns (MarineAlien memory);\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view returns (uint64);\\n\\n    function isMarine(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf26c94f83a4922f62da0b1a73b8ae94d0d7c36a24ab5c95265518271c1d48a5a\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnAGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMnAGame {}\\n\",\"keccak256\":\"0x7dd41bb95af37b016ec268e5a5eaf678da8ea6249bc77186fba885ac564b0afe\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IORES.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IORES {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address from, uint256 amount) external;\\n\\n  function updateOriginAccess() external;\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1cf4e42815b3bfea39dc76cb58b7224377fb7a7b0ace75c7a3fb432e6de10b44\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IRandomSeedGenerator.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IRandomSeedGenerator {\\n    function random() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x82328de31dd7eee381626deffc556f6a6a2c164d1fa17bb185dd1932d63c4fa0\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingPool {\\n    function addManyToMarinePoolAndAlienPool(\\n        address account,\\n        uint16[] calldata tokenIds\\n    ) external;\\n\\n    function randomAlienOwner(uint256 seed) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd1b7428988461fadb24610aaef0f1417cbae31991725ad58e374629940e7c915\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c61418a61004b60003960008181610abd01528181610afd015281816112240152611264015261418a6000f3fe6080604052600436106101cd5760003560e01c80636a3ef057116100f7578063bf989b6e11610095578063e74c6bb511610064578063e74c6bb51461052b578063ed57ad2414610542578063f2fde38b14610562578063fd04f5e214610582576101cd565b8063bf989b6e146104aa578063c379360a146104ca578063c8367feb146104eb578063d3ea43501461050b576101cd565b80638129fc1c116100d15780638129fc1c1461042f5780638da5cb5b146104445780639e3bcb8d14610462578063bd3fae8214610489576101cd565b80636a3ef057146103da578063715018a6146103fa578063765310081461040f576101cd565b806337a386b91161016f5780634f1ef2861161013e5780634f1ef286146103705780634f986b3314610383578063533d3cd1146103a45780635c975abb146103c2576101cd565b806337a386b9146102f957806338cb7e241461031057806339db714f146103255780634739e70114610350576101cd565b806316c38b3c116101ab57806316c38b3c146102605780631f4fb37a14610280578063357bad8c146102a05780633659cfe6146102d9576101cd565b806307d31261146101d25780630a4493bd146101f4578063150b7a0214610227575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613b1f565b610599565b005b34801561020057600080fd5b506102146b06765c793fa10079d000000081565b6040519081526020015b60405180910390f35b34801561023357600080fd5b50610247610242366004613990565b610930565b6040516001600160e01b0319909116815260200161021e565b34801561026c57600080fd5b506101f261027b366004613bb4565b6109a6565b34801561028c57600080fd5b506101f261029b366004613d0f565b610a82565b3480156102ac57600080fd5b5061012f546102c1906001600160a01b031681565b6040516001600160a01b03909116815260200161021e565b3480156102e557600080fd5b506101f26102f43660046138fd565b610ab2565b34801561030557600080fd5b506102146202a30081565b34801561031c57600080fd5b50610214601481565b34801561033157600080fd5b5061013b546103409060ff1681565b604051901515815260200161021e565b34801561035c57600080fd5b506101f261036b366004613b74565b610b78565b6101f261037e366004613a7d565b611219565b34801561038f57600080fd5b50610132546102c1906001600160a01b031681565b3480156103b057600080fd5b5061021469021e19e0c9bab240000081565b3480156103ce57600080fd5b5060fb5460ff16610340565b3480156103e657600080fd5b506101f26103f5366004613b74565b6112d3565b34801561040657600080fd5b506101f261194a565b34801561041b57600080fd5b506101f261042a366004613bb4565b611980565b34801561043b57600080fd5b506101f26119be565b34801561045057600080fd5b506097546001600160a01b03166102c1565b34801561046e57600080fd5b50610477600481565b60405160ff909116815260200161021e565b34801561049557600080fd5b50610131546102c1906001600160a01b031681565b3480156104b657600080fd5b506101f26104c5366004613935565b611a9f565b3480156104d657600080fd5b50610130546102c1906001600160a01b031681565b3480156104f757600080fd5b506101f2610506366004613a2a565b611b1d565b34801561051757600080fd5b50610214610526366004613d0f565b611f8d565b34801561053757600080fd5b506102146101385481565b34801561054e57600080fd5b506102c161055d366004613d0f565b6122f9565b34801561056e57600080fd5b506101f261057d3660046138fd565b61241c565b34801561058e57600080fd5b506102146101395481565b60fb5460ff16156105c55760405162461bcd60e51b81526004016105bc90613ead565b60405180910390fd5b6b06765c793fa10079d0000000610139541015610639576201518069021e19e0c9bab240000061012e5461013a54426105fe919061402f565b6106089190614010565b6106129190614010565b61061c9190613ffc565b610139600082825461062e9190613fbf565b90915550504261013a555b600260c954141561065c5760405162461bcd60e51b81526004016105bc90613f57565b600260c955323314806106835750610130546001600160a01b0316336001600160a01b0316145b6106ba5760405162461bcd60e51b81526020600482015260086024820152674f6e6c7920454f4160c01b60448201526064016105bc565b6000805b838110156108385761012f546001600160a01b0316634019bfc78686848181106106f857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061070d9190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bd0565b156107d7576107c68585838181106107a757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107bc9190613ced565b61ffff16846124b4565b6107d09083613fbf565b9150610826565b6108198585838181106107fa57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061080f9190613ced565b61ffff1684612932565b6108239083613fbf565b91505b8061083081614099565b9150506106be565b5061013160009054906101000a90046001600160a01b03166001600160a01b0316639c47ee3b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b5050505080600014156108b15750610926565b610131546001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b50505050505b5050600160c95550565b60006001600160a01b038516156109945760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f742073656e6420746f204d6172696e65506f6f6c206469726563746044820152616c7960f01b60648201526084016105bc565b50630a85bd0160e11b95945050505050565b61012f546001600160a01b0316158015906109cc5750610131546001600160a01b031615155b80156109e35750610130546001600160a01b031615155b80156109fa5750610132546001600160a01b031615155b610a3a5760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b60448201526064016105bc565b6097546001600160a01b03163314610a645760405162461bcd60e51b81526004016105bc90613ed7565b8015610a7757610a72612f2e565b610a7f565b610a7f612fa3565b50565b6097546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105bc90613ed7565b61013855565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610afb5760405162461bcd60e51b81526004016105bc90613de9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b2d61301d565b6001600160a01b031614610b535760405162461bcd60e51b81526004016105bc90613e35565b610b5c8161304b565b60408051600080825260208201909252610a7f91839190613075565b600260c9541415610b9b5760405162461bcd60e51b81526004016105bc90613f57565b600260c95561013b5460ff16610be55760405162461bcd60e51b815260206004820152600f60248201526e149154d0d55148111254d050931151608a1b60448201526064016105bc565b60408051608081018252600080825260208201819052918101829052606081018290526040805160808101825260008082526020820181905291810182905260608101919091526000805b8581101561120b57868682818110610c5857634e487b7160e01b600052603260045260246000fd5b61012f54604051634019bfc760e01b815260209290920293909301356004820181905297506001600160a01b0390921691634019bfc7915060240160206040518083038186803b158015610cab57600080fd5b505afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190613bd0565b15610e4957600085815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b90910416938101849052600190910154909116606082015294503314610d685760405162461bcd60e51b81526004016105bc90613e81565b600085815261013360205260408120818155600190810180546001600160501b031916905561012e805491929091610da190849061402f565b909155505061012f546001600160a01b031663b88d4fde3033886040518463ffffffff1660e01b8152600401610dd993929190613d83565b600060405180830381600087803b158015610df357600080fd5b505af1158015610e07573d6000803e3d6000fd5b505060405160008152600192508791507f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb09060200160405180910390a36111f9565b610e52856131c0565b9150600082610e6360046001613fd7565b610e6d9190614046565b60ff81166000908152610134602090815260408083208a845261013590925290912054815492935090918110610eb357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b90910416918301919091526001015490911660608201529450610f1d3390565b6001600160a01b031685604001516001600160a01b031614610f515760405162461bcd60e51b81526004016105bc90613e81565b8060ff1661012d6000828254610f67919061402f565b909155505060ff81166000908152610134602052604090208054610f8d9060019061402f565b81548110610fab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff8516845261013482528084208a8552610135909252909220548254919650869291811061104657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455898352610135815283832054885190921683528383209190915560ff8416825261013490522080548061111857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558782526101359052604081205561012f546001600160a01b031663b88d4fde3061116d3390565b896040518463ffffffff1660e01b815260040161118c93929190613d83565b600060405180830381600087803b1580156111a657600080fd5b505af11580156111ba573d6000803e3d6000fd5b505060405160008152600192508891507f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c729060200160405180910390a3505b8061120381614099565b915050610c30565b5050600160c9555050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112625760405162461bcd60e51b81526004016105bc90613de9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661129461301d565b6001600160a01b0316146112ba5760405162461bcd60e51b81526004016105bc90613e35565b6112c38261304b565b6112cf82826001613075565b5050565b600260c95414156112f65760405162461bcd60e51b81526004016105bc90613f57565b600260c95561013b5460ff166113405760405162461bcd60e51b815260206004820152600f60248201526e149154d0d55148111254d050931151608a1b60448201526064016105bc565b60408051608081018252600080825260208201819052918101829052606081018290526040805160808101825260008082526020820181905291810182905260608101919091526000805b8581101561120b578686828181106113b357634e487b7160e01b600052603260045260246000fd5b61012f54604051634019bfc760e01b815260209290920293909301356004820181905297506001600160a01b0390921691634019bfc7915060240160206040518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190613bd0565b156115a457600085815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b909104169381018490526001909101549091166060820152945033146114c35760405162461bcd60e51b81526004016105bc90613e81565b600085815261013360205260408120818155600190810180546001600160501b031916905561012e8054919290916114fc90849061402f565b909155505061012f546001600160a01b031663b88d4fde3033886040518463ffffffff1660e01b815260040161153493929190613d83565b600060405180830381600087803b15801561154e57600080fd5b505af1158015611562573d6000803e3d6000fd5b505060405160008152600192508791507f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb09060200160405180910390a3611938565b6115ad856131c0565b60ff8116600090815261013460209081526040808320898452610135909252909120548154929450909181106115f357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b9091041691830191909152600101549091166060820152935061165d3390565b6001600160a01b031684604001516001600160a01b0316146116915760405162461bcd60e51b81526004016105bc90613e81565b8160ff1661012d60008282546116a7919061402f565b909155505060ff821660009081526101346020526040902080546116cd9060019061402f565b815481106116eb57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff861684526101348252808420898552610135909252909220548254919550859291811061178657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455888352610135815283832054875190921683528383209190915560ff8516825261013490522080548061185857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558682526101359052604081205561012f546001600160a01b031663b88d4fde306118ad3390565b886040518463ffffffff1660e01b81526004016118cc93929190613d83565b600060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505060405160008152600192508791507f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c729060200160405180910390a35b8061194281614099565b91505061138b565b6097546001600160a01b031633146119745760405162461bcd60e51b81526004016105bc90613ed7565b61197e600061325e565b565b6097546001600160a01b031633146119aa5760405162461bcd60e51b81526004016105bc90613ed7565b61013b805460ff1916911515919091179055565b600054610100900460ff166119d95760005460ff16156119dd565b303b155b611a405760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bc565b600054610100900460ff16158015611a6b576000805460ff1961ff0019909116610100171660011790555b611a736132b0565b611a7b6132e3565b611a83613311565b611a8b612f2e565b8015610a7f576000805461ff001916905550565b6097546001600160a01b03163314611ac95760405162461bcd60e51b81526004016105bc90613ed7565b61012f80546001600160a01b039586166001600160a01b0319918216179091556101318054948616948216949094179093556101308054928516928416929092179091556101328054919093169116179055565b600260c9541415611b405760405162461bcd60e51b81526004016105bc90613f57565b600260c95532331480611b675750610130546001600160a01b0316336001600160a01b0316145b611b9e5760405162461bcd60e51b81526020600482015260086024820152674f6e6c7920454f4160c01b60448201526064016105bc565b6001600160a01b0383163214611bf65760405162461bcd60e51b815260206004820152601a60248201527f6163636f756e7420746f2073656e646572206d69736d6174636800000000000060448201526064016105bc565b60005b81811015611f8257610130546001600160a01b0316336001600160a01b031614611de75761012f5433906001600160a01b0316636352211e858585818110611c5157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611c669190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015611ca057600080fd5b505afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd89190613919565b6001600160a01b031614611d2e5760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e2774206f776e207468697320746f6b656e000000000000000060448201526064016105bc565b61012f546001600160a01b03166323b872dd3330868686818110611d6257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611d779190613ced565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015261ffff166044820152606401600060405180830381600087803b158015611dca57600080fd5b505af1158015611dde573d6000803e3d6000fd5b50505050611e29565b828282818110611e0757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e1c9190613ced565b61ffff16611e2957611f70565b61012f546001600160a01b0316634019bfc7848484818110611e5b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e709190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613bd0565b15611f2e57611f2984848484818110611f0b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f209190613ced565b61ffff16613341565b611f70565b611f7084848484818110611f5257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f679190613ced565b61ffff166134e9565b80611f7a81614099565b915050611bf9565b5050600160c9555050565b61012f54604051631d7a2e6d60e31b81526004810183905260009182916001600160a01b039091169063ebd173689060240160206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613d3f565b9050438167ffffffffffffffff161061205e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b60448201526064016105bc565b61012f54604051634019bfc760e01b8152600481018590526001600160a01b0390911690634019bfc79060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190613bd0565b1561220057600083815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b909104169381019390935260010154166060820152610139546b06765c793fa10079d00000001115612197576201518069021e19e0c9bab240000082602001516001600160501b03164261217c919061402f565b6121869190614010565b6121909190613ffc565b92506121fa565b61013a5481602001516001600160501b031611156121b857600092506121fa565b6201518069021e19e0c9bab240000082602001516001600160501b031661013a546121e3919061402f565b6121ed9190614010565b6121f79190613ffc565b92505b506122f3565b600061220b846131c0565b9050600061013460008360ff1681526020019081526020016000206101356000878152602001908152602001600020548154811061225957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600293909302909101805461ffff811684526201000081046001600160501b03908116958501869052600160601b9091046001600160a01b03169284019290925260010154166060820152610137549092506122ca919061402f565b826122d760046001613fd7565b6122e19190614046565b60ff166122ee9190614010565b935050505b50919050565b600061012d546000141561230f57506000612417565b600061012d548363ffffffff1661232691906140b4565b60209390931c92905060008061233e60036004614046565b60ff1690505b6004811161240f578061235960046001613fd7565b60ff16612366919061402f565b600082815261013460205260409020546123809190614010565b61238a9083613fbf565b9150818310612398576123fd565b60008181526101346020526040902080546123b390876140b4565b815481106123d157634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020154600160601b90046001600160a01b0316935061241792505050565b8061240781614099565b915050612344565b506000925050505b919050565b6097546001600160a01b031633146124465760405162461bcd60e51b81526004016105bc90613ed7565b6001600160a01b0381166124ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105bc565b610a7f8161325e565b6000828152610133602090815260408083208151608081018352815461ffff811682526001600160501b036201000082048116958301959095526001600160a01b03600160601b90910416928101839052600190910154909216606083015233146125615760405162461bcd60e51b815260206004820152601960248201527f446f6e2774206f776e2074686520676976656e20746f6b656e0000000000000060448201526064016105bc565b82801561258857506202a30081606001516001600160501b031642612586919061402f565b105b156125d55760405162461bcd60e51b815260206004820152601d60248201527f5374696c6c206775617264696e6720746865206d6172696e65506f6f6c00000060448201526064016105bc565b6b06765c793fa10079d000000061013954101561262f576201518069021e19e0c9bab240000082602001516001600160501b031642612614919061402f565b61261e9190614010565b6126289190613ffc565b9150612692565b61013a5481602001516001600160501b031611156126505760009150612692565b6201518069021e19e0c9bab240000082602001516001600160501b031661013a5461267b919061402f565b6126859190614010565b61268f9190613ffc565b91505b82156127e25761013260009054906101000a90046001600160a01b03166001600160a01b0316635ec01e4d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127219190613d27565b6001166001141561273a576127358261362d565b600091505b600084815261013360205260408120818155600190810180546001600160501b031916905561012e80549192909161277390849061402f565b909155505061012f546001600160a01b031663b88d4fde3033876040518463ffffffff1660e01b81526004016127ab93929190613d83565b600060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b505050506128ee565b61280160646127f2601485614010565b6127fc9190613ffc565b61362d565b606461280e60148261402f565b6128189084614010565b6128229190613ffc565b915060405180608001604052808561ffff168152602001426001600160501b0316815260200161284f3390565b6001600160a01b0390811682526001600160501b0342811660209384015260008881526101338452604090819020855181549587015192870151909416600160601b026001600160601b03928416620100000262010000600160601b031961ffff90961661ffff199097169690961794909416949094171691909117825560609092015160019091018054919092166001600160501b03199091161790555b821515847f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb08460405161292391815260200190565b60405180910390a35092915050565b61012f546040516331a9108f60e11b81526004810184905260009130916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613919565b6001600160a01b0316146129fe5760405162461bcd60e51b81526020600482015260116024820152702237b2b9b713ba1037bbb7103a37b5b2b760791b60448201526064016105bc565b6000612a09846131c0565b9050600061013460008360ff16815260200190815260200160002061013560008781526020019081526020016000205481548110612a5757634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b90910416918301919091526001015490911660608201529050612ac13390565b6001600160a01b031681604001516001600160a01b031614612b195760405162461bcd60e51b81526020600482015260116024820152702237b2b9b713ba1037bbb7103a37b5b2b760791b60448201526064016105bc565b80602001516001600160501b031661013754612b35919061402f565b82612b4260046001613fd7565b612b4c9190614046565b60ff16612b599190614010565b92508315612dd4578160ff1661012d6000828254612b77919061402f565b909155505060ff82166000908152610134602052604081208054612b9d9060019061402f565b81548110612bbb57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff8716845261013482528084208a85526101359092529092205482549193508392918110612c5657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455898352610135815283832054855190921683528383209190915560ff86168252610134905220805480612d2857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558782526101359052604081205561012f546001600160a01b031663b88d4fde30612d7d3390565b896040518463ffffffff1660e01b8152600401612d9c93929190613d83565b600060405180830381600087803b158015612db657600080fd5b505af1158015612dca573d6000803e3d6000fd5b5050505050612ee9565b60405180608001604052808661ffff168152602001610137546001600160501b03168152602001612e023390565b6001600160a01b031681526001600160501b03421660209182015260ff841660009081526101348252604080822089835261013590935290205481548110612e5a57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020835160029290920201805492840151604085015161ffff1990941661ffff9093169290921762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178255606090920151600190910180546001600160501b031916919092161790555b831515857f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c7285604051612f1e91815260200190565b60405180910390a3505092915050565b60fb5460ff1615612f515760405162461bcd60e51b81526004016105bc90613ead565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f863390565b6040516001600160a01b03909116815260200160405180910390a1565b60fb5460ff16612fec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105bc565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612f86565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b03163314610a7f5760405162461bcd60e51b81526004016105bc90613ed7565b600061307f61301d565b905061308a8461368f565b6000835111806130975750815b156130a8576130a68484613734565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166131b957805460ff191660011781556040516001600160a01b038316602482015261312790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613734565b50805460ff1916815561313861301d565b6001600160a01b0316826001600160a01b0316146131b05760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016105bc565b6131b98561381f565b5050505050565b61012f546040516394e5684760e01b81526004810183905260009182916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561320b57600080fd5b505afa15801561321f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132439190613bec565b905080610180015160046132579190614046565b9392505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166132d75760405162461bcd60e51b81526004016105bc90613f0c565b60fb805460ff19169055565b600054610100900460ff1661330a5760405162461bcd60e51b81526004016105bc90613f0c565b600160c955565b600054610100900460ff166133385760405162461bcd60e51b81526004016105bc90613f0c565b61197e3361325e565b60fb5460ff16156133645760405162461bcd60e51b81526004016105bc90613ead565b6b06765c793fa10079d00000006101395410156133d8576201518069021e19e0c9bab240000061012e5461013a544261339d919061402f565b6133a79190614010565b6133b19190614010565b6133bb9190613ffc565b61013960008282546133cd9190613fbf565b90915550504261013a555b6040805160808101825261ffff80841682526001600160501b0342811660208085018281526001600160a01b03808a168789019081526060880194855260008a81526101339094529783209651875492519851909116600160601b026001600160601b03988616620100000262010000600160601b03199290971661ffff1990931692909217169490941795909516929092178355905160019283018054919092166001600160501b031990911617905561012e80549192909161349d908490613fbf565b909155505060405142815260019082906001600160a01b038516907f8612e8567c2b59ea0cd07546cc5fd09fdcb85f542e6d73367c39b009ce24a0bf9060200160405180910390a45050565b60006134f4826131c0565b90508060ff1661012d600082825461350c9190613fbf565b909155505060ff811660009081526101346020818152604080842080548786526101358452828620819055938352815160808101835261ffff808916825261013780546001600160501b039081168488019081526001600160a01b038d8116868901818152428516606089019081526001808e018b55998e528b8e2098516002909d0290980180549451915161ffff199095169c9097169b909b1762010000600160601b031916620100009b85169b909b029a909a176001600160601b0316600160601b929091169190910217835592519190930180546001600160501b031916919092161790555490519081528592917f8612e8567c2b59ea0cd07546cc5fd09fdcb85f542e6d73367c39b009ce24a0bf910160405180910390a4505050565b61012d54613653578061013660008282546136489190613fbf565b90915550610a7f9050565b61012d54610136546136659083613fbf565b61366f9190613ffc565b61013760008282546136819190613fbf565b909155505060006101365550565b803b6136f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6137935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105bc565b600080846001600160a01b0316846040516137ae9190613d67565b600060405180830381855af49150503d80600081146137e9576040519150601f19603f3d011682016040523d82523d6000602084013e6137ee565b606091505b5091509150613816828260405180606001604052806027815260200161412e6027913961385f565b95945050505050565b6138288161368f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060831561386e575081613257565b82511561387e5782518084602001fd5b8160405162461bcd60e51b81526004016105bc9190613db6565b60008083601f8401126138a9578081fd5b50813567ffffffffffffffff8111156138c0578182fd5b60208301915083602080830285010111156138da57600080fd5b9250929050565b80516124178161411f565b805160ff8116811461241757600080fd5b60006020828403121561390e578081fd5b81356132578161410a565b60006020828403121561392a578081fd5b81516132578161410a565b6000806000806080858703121561394a578283fd5b84356139558161410a565b935060208501356139658161410a565b925060408501356139758161410a565b915060608501356139858161410a565b939692955090935050565b6000806000806000608086880312156139a7578081fd5b85356139b28161410a565b945060208601356139c28161410a565b935060408601359250606086013567ffffffffffffffff808211156139e5578283fd5b818801915088601f8301126139f8578283fd5b813581811115613a06578384fd5b896020828501011115613a17578384fd5b9699959850939650602001949392505050565b600080600060408486031215613a3e578283fd5b8335613a498161410a565b9250602084013567ffffffffffffffff811115613a64578283fd5b613a7086828701613898565b9497909650939450505050565b60008060408385031215613a8f578182fd5b8235613a9a8161410a565b915060208381013567ffffffffffffffff80821115613ab7578384fd5b818601915086601f830112613aca578384fd5b813581811115613adc57613adc6140f4565b613aee601f8201601f19168501613f8e565b91508082528784828501011115613b03578485fd5b8084840185840137810190920192909252919491935090915050565b600080600060408486031215613b33578283fd5b833567ffffffffffffffff811115613b49578384fd5b613b5586828701613898565b9094509250506020840135613b698161411f565b809150509250925092565b60008060208385031215613b86578182fd5b823567ffffffffffffffff811115613b9c578283fd5b613ba885828601613898565b90969095509350505050565b600060208284031215613bc5578081fd5b81356132578161411f565b600060208284031215613be1578081fd5b81516132578161411f565b60006101a0808385031215613bff578182fd5b613c0881613f8e565b9050613c13836138e1565b8152613c21602084016138ec565b6020820152613c32604084016138ec565b6040820152613c43606084016138ec565b6060820152613c54608084016138ec565b6080820152613c6560a084016138ec565b60a0820152613c7660c084016138ec565b60c0820152613c8760e084016138ec565b60e0820152610100613c9a8185016138ec565b90820152610120613cac8482016138ec565b90820152610140613cbe8482016138ec565b90820152610160613cd08482016138ec565b90820152610180613ce28482016138ec565b908201529392505050565b600060208284031215613cfe578081fd5b813561ffff81168114613257578182fd5b600060208284031215613d20578081fd5b5035919050565b600060208284031215613d38578081fd5b5051919050565b600060208284031215613d50578081fd5b815167ffffffffffffffff81168114613257578182fd5b60008251613d79818460208701614069565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b6000602082528251806020840152613dd5816040850160208701614069565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601290820152715357495045522c204e4f2053574950494e4760701b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fb757613fb76140f4565b604052919050565b60008219821115613fd257613fd26140c8565b500190565b600060ff821660ff84168060ff03821115613ff457613ff46140c8565b019392505050565b60008261400b5761400b6140de565b500490565b600081600019048311821515161561402a5761402a6140c8565b500290565b600082821015614041576140416140c8565b500390565b600060ff821660ff841680821015614060576140606140c8565b90039392505050565b60005b8381101561408457818101518382015260200161406c565b83811115614093576000848401525b50505050565b60006000198214156140ad576140ad6140c8565b5060010190565b6000826140c3576140c36140de565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7f57600080fd5b8015158114610a7f57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220058be56e9ffa5489f0446084d470f06f586e8577a7ae1f24b18cddda58551b1d64736f6c63430008020033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80636a3ef057116100f7578063bf989b6e11610095578063e74c6bb511610064578063e74c6bb51461052b578063ed57ad2414610542578063f2fde38b14610562578063fd04f5e214610582576101cd565b8063bf989b6e146104aa578063c379360a146104ca578063c8367feb146104eb578063d3ea43501461050b576101cd565b80638129fc1c116100d15780638129fc1c1461042f5780638da5cb5b146104445780639e3bcb8d14610462578063bd3fae8214610489576101cd565b80636a3ef057146103da578063715018a6146103fa578063765310081461040f576101cd565b806337a386b91161016f5780634f1ef2861161013e5780634f1ef286146103705780634f986b3314610383578063533d3cd1146103a45780635c975abb146103c2576101cd565b806337a386b9146102f957806338cb7e241461031057806339db714f146103255780634739e70114610350576101cd565b806316c38b3c116101ab57806316c38b3c146102605780631f4fb37a14610280578063357bad8c146102a05780633659cfe6146102d9576101cd565b806307d31261146101d25780630a4493bd146101f4578063150b7a0214610227575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613b1f565b610599565b005b34801561020057600080fd5b506102146b06765c793fa10079d000000081565b6040519081526020015b60405180910390f35b34801561023357600080fd5b50610247610242366004613990565b610930565b6040516001600160e01b0319909116815260200161021e565b34801561026c57600080fd5b506101f261027b366004613bb4565b6109a6565b34801561028c57600080fd5b506101f261029b366004613d0f565b610a82565b3480156102ac57600080fd5b5061012f546102c1906001600160a01b031681565b6040516001600160a01b03909116815260200161021e565b3480156102e557600080fd5b506101f26102f43660046138fd565b610ab2565b34801561030557600080fd5b506102146202a30081565b34801561031c57600080fd5b50610214601481565b34801561033157600080fd5b5061013b546103409060ff1681565b604051901515815260200161021e565b34801561035c57600080fd5b506101f261036b366004613b74565b610b78565b6101f261037e366004613a7d565b611219565b34801561038f57600080fd5b50610132546102c1906001600160a01b031681565b3480156103b057600080fd5b5061021469021e19e0c9bab240000081565b3480156103ce57600080fd5b5060fb5460ff16610340565b3480156103e657600080fd5b506101f26103f5366004613b74565b6112d3565b34801561040657600080fd5b506101f261194a565b34801561041b57600080fd5b506101f261042a366004613bb4565b611980565b34801561043b57600080fd5b506101f26119be565b34801561045057600080fd5b506097546001600160a01b03166102c1565b34801561046e57600080fd5b50610477600481565b60405160ff909116815260200161021e565b34801561049557600080fd5b50610131546102c1906001600160a01b031681565b3480156104b657600080fd5b506101f26104c5366004613935565b611a9f565b3480156104d657600080fd5b50610130546102c1906001600160a01b031681565b3480156104f757600080fd5b506101f2610506366004613a2a565b611b1d565b34801561051757600080fd5b50610214610526366004613d0f565b611f8d565b34801561053757600080fd5b506102146101385481565b34801561054e57600080fd5b506102c161055d366004613d0f565b6122f9565b34801561056e57600080fd5b506101f261057d3660046138fd565b61241c565b34801561058e57600080fd5b506102146101395481565b60fb5460ff16156105c55760405162461bcd60e51b81526004016105bc90613ead565b60405180910390fd5b6b06765c793fa10079d0000000610139541015610639576201518069021e19e0c9bab240000061012e5461013a54426105fe919061402f565b6106089190614010565b6106129190614010565b61061c9190613ffc565b610139600082825461062e9190613fbf565b90915550504261013a555b600260c954141561065c5760405162461bcd60e51b81526004016105bc90613f57565b600260c955323314806106835750610130546001600160a01b0316336001600160a01b0316145b6106ba5760405162461bcd60e51b81526020600482015260086024820152674f6e6c7920454f4160c01b60448201526064016105bc565b6000805b838110156108385761012f546001600160a01b0316634019bfc78686848181106106f857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061070d9190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bd0565b156107d7576107c68585838181106107a757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107bc9190613ced565b61ffff16846124b4565b6107d09083613fbf565b9150610826565b6108198585838181106107fa57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061080f9190613ced565b61ffff1684612932565b6108239083613fbf565b91505b8061083081614099565b9150506106be565b5061013160009054906101000a90046001600160a01b03166001600160a01b0316639c47ee3b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b5050505080600014156108b15750610926565b610131546001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b50505050505b5050600160c95550565b60006001600160a01b038516156109945760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f742073656e6420746f204d6172696e65506f6f6c206469726563746044820152616c7960f01b60648201526084016105bc565b50630a85bd0160e11b95945050505050565b61012f546001600160a01b0316158015906109cc5750610131546001600160a01b031615155b80156109e35750610130546001600160a01b031615155b80156109fa5750610132546001600160a01b031615155b610a3a5760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b60448201526064016105bc565b6097546001600160a01b03163314610a645760405162461bcd60e51b81526004016105bc90613ed7565b8015610a7757610a72612f2e565b610a7f565b610a7f612fa3565b50565b6097546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105bc90613ed7565b61013855565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610afb5760405162461bcd60e51b81526004016105bc90613de9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b2d61301d565b6001600160a01b031614610b535760405162461bcd60e51b81526004016105bc90613e35565b610b5c8161304b565b60408051600080825260208201909252610a7f91839190613075565b600260c9541415610b9b5760405162461bcd60e51b81526004016105bc90613f57565b600260c95561013b5460ff16610be55760405162461bcd60e51b815260206004820152600f60248201526e149154d0d55148111254d050931151608a1b60448201526064016105bc565b60408051608081018252600080825260208201819052918101829052606081018290526040805160808101825260008082526020820181905291810182905260608101919091526000805b8581101561120b57868682818110610c5857634e487b7160e01b600052603260045260246000fd5b61012f54604051634019bfc760e01b815260209290920293909301356004820181905297506001600160a01b0390921691634019bfc7915060240160206040518083038186803b158015610cab57600080fd5b505afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190613bd0565b15610e4957600085815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b90910416938101849052600190910154909116606082015294503314610d685760405162461bcd60e51b81526004016105bc90613e81565b600085815261013360205260408120818155600190810180546001600160501b031916905561012e805491929091610da190849061402f565b909155505061012f546001600160a01b031663b88d4fde3033886040518463ffffffff1660e01b8152600401610dd993929190613d83565b600060405180830381600087803b158015610df357600080fd5b505af1158015610e07573d6000803e3d6000fd5b505060405160008152600192508791507f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb09060200160405180910390a36111f9565b610e52856131c0565b9150600082610e6360046001613fd7565b610e6d9190614046565b60ff81166000908152610134602090815260408083208a845261013590925290912054815492935090918110610eb357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b90910416918301919091526001015490911660608201529450610f1d3390565b6001600160a01b031685604001516001600160a01b031614610f515760405162461bcd60e51b81526004016105bc90613e81565b8060ff1661012d6000828254610f67919061402f565b909155505060ff81166000908152610134602052604090208054610f8d9060019061402f565b81548110610fab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff8516845261013482528084208a8552610135909252909220548254919650869291811061104657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455898352610135815283832054885190921683528383209190915560ff8416825261013490522080548061111857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558782526101359052604081205561012f546001600160a01b031663b88d4fde3061116d3390565b896040518463ffffffff1660e01b815260040161118c93929190613d83565b600060405180830381600087803b1580156111a657600080fd5b505af11580156111ba573d6000803e3d6000fd5b505060405160008152600192508891507f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c729060200160405180910390a3505b8061120381614099565b915050610c30565b5050600160c9555050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112625760405162461bcd60e51b81526004016105bc90613de9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661129461301d565b6001600160a01b0316146112ba5760405162461bcd60e51b81526004016105bc90613e35565b6112c38261304b565b6112cf82826001613075565b5050565b600260c95414156112f65760405162461bcd60e51b81526004016105bc90613f57565b600260c95561013b5460ff166113405760405162461bcd60e51b815260206004820152600f60248201526e149154d0d55148111254d050931151608a1b60448201526064016105bc565b60408051608081018252600080825260208201819052918101829052606081018290526040805160808101825260008082526020820181905291810182905260608101919091526000805b8581101561120b578686828181106113b357634e487b7160e01b600052603260045260246000fd5b61012f54604051634019bfc760e01b815260209290920293909301356004820181905297506001600160a01b0390921691634019bfc7915060240160206040518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190613bd0565b156115a457600085815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b909104169381018490526001909101549091166060820152945033146114c35760405162461bcd60e51b81526004016105bc90613e81565b600085815261013360205260408120818155600190810180546001600160501b031916905561012e8054919290916114fc90849061402f565b909155505061012f546001600160a01b031663b88d4fde3033886040518463ffffffff1660e01b815260040161153493929190613d83565b600060405180830381600087803b15801561154e57600080fd5b505af1158015611562573d6000803e3d6000fd5b505060405160008152600192508791507f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb09060200160405180910390a3611938565b6115ad856131c0565b60ff8116600090815261013460209081526040808320898452610135909252909120548154929450909181106115f357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b9091041691830191909152600101549091166060820152935061165d3390565b6001600160a01b031684604001516001600160a01b0316146116915760405162461bcd60e51b81526004016105bc90613e81565b8160ff1661012d60008282546116a7919061402f565b909155505060ff821660009081526101346020526040902080546116cd9060019061402f565b815481106116eb57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff861684526101348252808420898552610135909252909220548254919550859291811061178657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455888352610135815283832054875190921683528383209190915560ff8516825261013490522080548061185857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558682526101359052604081205561012f546001600160a01b031663b88d4fde306118ad3390565b886040518463ffffffff1660e01b81526004016118cc93929190613d83565b600060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505060405160008152600192508791507f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c729060200160405180910390a35b8061194281614099565b91505061138b565b6097546001600160a01b031633146119745760405162461bcd60e51b81526004016105bc90613ed7565b61197e600061325e565b565b6097546001600160a01b031633146119aa5760405162461bcd60e51b81526004016105bc90613ed7565b61013b805460ff1916911515919091179055565b600054610100900460ff166119d95760005460ff16156119dd565b303b155b611a405760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105bc565b600054610100900460ff16158015611a6b576000805460ff1961ff0019909116610100171660011790555b611a736132b0565b611a7b6132e3565b611a83613311565b611a8b612f2e565b8015610a7f576000805461ff001916905550565b6097546001600160a01b03163314611ac95760405162461bcd60e51b81526004016105bc90613ed7565b61012f80546001600160a01b039586166001600160a01b0319918216179091556101318054948616948216949094179093556101308054928516928416929092179091556101328054919093169116179055565b600260c9541415611b405760405162461bcd60e51b81526004016105bc90613f57565b600260c95532331480611b675750610130546001600160a01b0316336001600160a01b0316145b611b9e5760405162461bcd60e51b81526020600482015260086024820152674f6e6c7920454f4160c01b60448201526064016105bc565b6001600160a01b0383163214611bf65760405162461bcd60e51b815260206004820152601a60248201527f6163636f756e7420746f2073656e646572206d69736d6174636800000000000060448201526064016105bc565b60005b81811015611f8257610130546001600160a01b0316336001600160a01b031614611de75761012f5433906001600160a01b0316636352211e858585818110611c5157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611c669190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015611ca057600080fd5b505afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd89190613919565b6001600160a01b031614611d2e5760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e2774206f776e207468697320746f6b656e000000000000000060448201526064016105bc565b61012f546001600160a01b03166323b872dd3330868686818110611d6257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611d779190613ced565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015261ffff166044820152606401600060405180830381600087803b158015611dca57600080fd5b505af1158015611dde573d6000803e3d6000fd5b50505050611e29565b828282818110611e0757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e1c9190613ced565b61ffff16611e2957611f70565b61012f546001600160a01b0316634019bfc7848484818110611e5b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e709190613ced565b6040516001600160e01b031960e084901b16815261ffff909116600482015260240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613bd0565b15611f2e57611f2984848484818110611f0b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f209190613ced565b61ffff16613341565b611f70565b611f7084848484818110611f5257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f679190613ced565b61ffff166134e9565b80611f7a81614099565b915050611bf9565b5050600160c9555050565b61012f54604051631d7a2e6d60e31b81526004810183905260009182916001600160a01b039091169063ebd173689060240160206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613d3f565b9050438167ffffffffffffffff161061205e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b60448201526064016105bc565b61012f54604051634019bfc760e01b8152600481018590526001600160a01b0390911690634019bfc79060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190613bd0565b1561220057600083815261013360209081526040918290208251608081018452815461ffff811682526001600160501b036201000082048116948301949094526001600160a01b03600160601b909104169381019390935260010154166060820152610139546b06765c793fa10079d00000001115612197576201518069021e19e0c9bab240000082602001516001600160501b03164261217c919061402f565b6121869190614010565b6121909190613ffc565b92506121fa565b61013a5481602001516001600160501b031611156121b857600092506121fa565b6201518069021e19e0c9bab240000082602001516001600160501b031661013a546121e3919061402f565b6121ed9190614010565b6121f79190613ffc565b92505b506122f3565b600061220b846131c0565b9050600061013460008360ff1681526020019081526020016000206101356000878152602001908152602001600020548154811061225957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600293909302909101805461ffff811684526201000081046001600160501b03908116958501869052600160601b9091046001600160a01b03169284019290925260010154166060820152610137549092506122ca919061402f565b826122d760046001613fd7565b6122e19190614046565b60ff166122ee9190614010565b935050505b50919050565b600061012d546000141561230f57506000612417565b600061012d548363ffffffff1661232691906140b4565b60209390931c92905060008061233e60036004614046565b60ff1690505b6004811161240f578061235960046001613fd7565b60ff16612366919061402f565b600082815261013460205260409020546123809190614010565b61238a9083613fbf565b9150818310612398576123fd565b60008181526101346020526040902080546123b390876140b4565b815481106123d157634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020154600160601b90046001600160a01b0316935061241792505050565b8061240781614099565b915050612344565b506000925050505b919050565b6097546001600160a01b031633146124465760405162461bcd60e51b81526004016105bc90613ed7565b6001600160a01b0381166124ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105bc565b610a7f8161325e565b6000828152610133602090815260408083208151608081018352815461ffff811682526001600160501b036201000082048116958301959095526001600160a01b03600160601b90910416928101839052600190910154909216606083015233146125615760405162461bcd60e51b815260206004820152601960248201527f446f6e2774206f776e2074686520676976656e20746f6b656e0000000000000060448201526064016105bc565b82801561258857506202a30081606001516001600160501b031642612586919061402f565b105b156125d55760405162461bcd60e51b815260206004820152601d60248201527f5374696c6c206775617264696e6720746865206d6172696e65506f6f6c00000060448201526064016105bc565b6b06765c793fa10079d000000061013954101561262f576201518069021e19e0c9bab240000082602001516001600160501b031642612614919061402f565b61261e9190614010565b6126289190613ffc565b9150612692565b61013a5481602001516001600160501b031611156126505760009150612692565b6201518069021e19e0c9bab240000082602001516001600160501b031661013a5461267b919061402f565b6126859190614010565b61268f9190613ffc565b91505b82156127e25761013260009054906101000a90046001600160a01b03166001600160a01b0316635ec01e4d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127219190613d27565b6001166001141561273a576127358261362d565b600091505b600084815261013360205260408120818155600190810180546001600160501b031916905561012e80549192909161277390849061402f565b909155505061012f546001600160a01b031663b88d4fde3033876040518463ffffffff1660e01b81526004016127ab93929190613d83565b600060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b505050506128ee565b61280160646127f2601485614010565b6127fc9190613ffc565b61362d565b606461280e60148261402f565b6128189084614010565b6128229190613ffc565b915060405180608001604052808561ffff168152602001426001600160501b0316815260200161284f3390565b6001600160a01b0390811682526001600160501b0342811660209384015260008881526101338452604090819020855181549587015192870151909416600160601b026001600160601b03928416620100000262010000600160601b031961ffff90961661ffff199097169690961794909416949094171691909117825560609092015160019091018054919092166001600160501b03199091161790555b821515847f9cb40271f339db1081126b3a1e1bd03e3a8258e076fd708dec87a021290adbb08460405161292391815260200190565b60405180910390a35092915050565b61012f546040516331a9108f60e11b81526004810184905260009130916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561297c57600080fd5b505afa158015612990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b49190613919565b6001600160a01b0316146129fe5760405162461bcd60e51b81526020600482015260116024820152702237b2b9b713ba1037bbb7103a37b5b2b760791b60448201526064016105bc565b6000612a09846131c0565b9050600061013460008360ff16815260200190815260200160002061013560008781526020019081526020016000205481548110612a5757634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516080810182526002909302909101805461ffff811684526001600160501b036201000082048116958501959095526001600160a01b03600160601b90910416918301919091526001015490911660608201529050612ac13390565b6001600160a01b031681604001516001600160a01b031614612b195760405162461bcd60e51b81526020600482015260116024820152702237b2b9b713ba1037bbb7103a37b5b2b760791b60448201526064016105bc565b80602001516001600160501b031661013754612b35919061402f565b82612b4260046001613fd7565b612b4c9190614046565b60ff16612b599190614010565b92508315612dd4578160ff1661012d6000828254612b77919061402f565b909155505060ff82166000908152610134602052604081208054612b9d9060019061402f565b81548110612bbb57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051608081018252600294909402909101805461ffff811685526201000081046001600160501b0390811686860152600160601b9091046001600160a01b03168584015260019091015416606084015260ff8716845261013482528084208a85526101359092529092205482549193508392918110612c5657634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516002939093020180548583015160408088015161ffff1990931661ffff9687161762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178355606090960151600190920180546001600160501b0319169290961691909117909455898352610135815283832054855190921683528383209190915560ff86168252610134905220805480612d2857634e487b7160e01b600052603160045260246000fd5b6000828152602080822060026000199094019384020182815560010180546001600160501b0319169055919092558782526101359052604081205561012f546001600160a01b031663b88d4fde30612d7d3390565b896040518463ffffffff1660e01b8152600401612d9c93929190613d83565b600060405180830381600087803b158015612db657600080fd5b505af1158015612dca573d6000803e3d6000fd5b5050505050612ee9565b60405180608001604052808661ffff168152602001610137546001600160501b03168152602001612e023390565b6001600160a01b031681526001600160501b03421660209182015260ff841660009081526101348252604080822089835261013590935290205481548110612e5a57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020835160029290920201805492840151604085015161ffff1990941661ffff9093169290921762010000600160601b031916620100006001600160501b0393841602176001600160601b0316600160601b6001600160a01b0390941693909302929092178255606090920151600190910180546001600160501b031916919092161790555b831515857f261f0854432bace3f0023f1dd8d91177b3bc455fb50acd7491782cd858b24c7285604051612f1e91815260200190565b60405180910390a3505092915050565b60fb5460ff1615612f515760405162461bcd60e51b81526004016105bc90613ead565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f863390565b6040516001600160a01b03909116815260200160405180910390a1565b60fb5460ff16612fec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105bc565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612f86565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b03163314610a7f5760405162461bcd60e51b81526004016105bc90613ed7565b600061307f61301d565b905061308a8461368f565b6000835111806130975750815b156130a8576130a68484613734565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166131b957805460ff191660011781556040516001600160a01b038316602482015261312790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613734565b50805460ff1916815561313861301d565b6001600160a01b0316826001600160a01b0316146131b05760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016105bc565b6131b98561381f565b5050505050565b61012f546040516394e5684760e01b81526004810183905260009182916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561320b57600080fd5b505afa15801561321f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132439190613bec565b905080610180015160046132579190614046565b9392505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166132d75760405162461bcd60e51b81526004016105bc90613f0c565b60fb805460ff19169055565b600054610100900460ff1661330a5760405162461bcd60e51b81526004016105bc90613f0c565b600160c955565b600054610100900460ff166133385760405162461bcd60e51b81526004016105bc90613f0c565b61197e3361325e565b60fb5460ff16156133645760405162461bcd60e51b81526004016105bc90613ead565b6b06765c793fa10079d00000006101395410156133d8576201518069021e19e0c9bab240000061012e5461013a544261339d919061402f565b6133a79190614010565b6133b19190614010565b6133bb9190613ffc565b61013960008282546133cd9190613fbf565b90915550504261013a555b6040805160808101825261ffff80841682526001600160501b0342811660208085018281526001600160a01b03808a168789019081526060880194855260008a81526101339094529783209651875492519851909116600160601b026001600160601b03988616620100000262010000600160601b03199290971661ffff1990931692909217169490941795909516929092178355905160019283018054919092166001600160501b031990911617905561012e80549192909161349d908490613fbf565b909155505060405142815260019082906001600160a01b038516907f8612e8567c2b59ea0cd07546cc5fd09fdcb85f542e6d73367c39b009ce24a0bf9060200160405180910390a45050565b60006134f4826131c0565b90508060ff1661012d600082825461350c9190613fbf565b909155505060ff811660009081526101346020818152604080842080548786526101358452828620819055938352815160808101835261ffff808916825261013780546001600160501b039081168488019081526001600160a01b038d8116868901818152428516606089019081526001808e018b55998e528b8e2098516002909d0290980180549451915161ffff199095169c9097169b909b1762010000600160601b031916620100009b85169b909b029a909a176001600160601b0316600160601b929091169190910217835592519190930180546001600160501b031916919092161790555490519081528592917f8612e8567c2b59ea0cd07546cc5fd09fdcb85f542e6d73367c39b009ce24a0bf910160405180910390a4505050565b61012d54613653578061013660008282546136489190613fbf565b90915550610a7f9050565b61012d54610136546136659083613fbf565b61366f9190613ffc565b61013760008282546136819190613fbf565b909155505060006101365550565b803b6136f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6137935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105bc565b600080846001600160a01b0316846040516137ae9190613d67565b600060405180830381855af49150503d80600081146137e9576040519150601f19603f3d011682016040523d82523d6000602084013e6137ee565b606091505b5091509150613816828260405180606001604052806027815260200161412e6027913961385f565b95945050505050565b6138288161368f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060831561386e575081613257565b82511561387e5782518084602001fd5b8160405162461bcd60e51b81526004016105bc9190613db6565b60008083601f8401126138a9578081fd5b50813567ffffffffffffffff8111156138c0578182fd5b60208301915083602080830285010111156138da57600080fd5b9250929050565b80516124178161411f565b805160ff8116811461241757600080fd5b60006020828403121561390e578081fd5b81356132578161410a565b60006020828403121561392a578081fd5b81516132578161410a565b6000806000806080858703121561394a578283fd5b84356139558161410a565b935060208501356139658161410a565b925060408501356139758161410a565b915060608501356139858161410a565b939692955090935050565b6000806000806000608086880312156139a7578081fd5b85356139b28161410a565b945060208601356139c28161410a565b935060408601359250606086013567ffffffffffffffff808211156139e5578283fd5b818801915088601f8301126139f8578283fd5b813581811115613a06578384fd5b896020828501011115613a17578384fd5b9699959850939650602001949392505050565b600080600060408486031215613a3e578283fd5b8335613a498161410a565b9250602084013567ffffffffffffffff811115613a64578283fd5b613a7086828701613898565b9497909650939450505050565b60008060408385031215613a8f578182fd5b8235613a9a8161410a565b915060208381013567ffffffffffffffff80821115613ab7578384fd5b818601915086601f830112613aca578384fd5b813581811115613adc57613adc6140f4565b613aee601f8201601f19168501613f8e565b91508082528784828501011115613b03578485fd5b8084840185840137810190920192909252919491935090915050565b600080600060408486031215613b33578283fd5b833567ffffffffffffffff811115613b49578384fd5b613b5586828701613898565b9094509250506020840135613b698161411f565b809150509250925092565b60008060208385031215613b86578182fd5b823567ffffffffffffffff811115613b9c578283fd5b613ba885828601613898565b90969095509350505050565b600060208284031215613bc5578081fd5b81356132578161411f565b600060208284031215613be1578081fd5b81516132578161411f565b60006101a0808385031215613bff578182fd5b613c0881613f8e565b9050613c13836138e1565b8152613c21602084016138ec565b6020820152613c32604084016138ec565b6040820152613c43606084016138ec565b6060820152613c54608084016138ec565b6080820152613c6560a084016138ec565b60a0820152613c7660c084016138ec565b60c0820152613c8760e084016138ec565b60e0820152610100613c9a8185016138ec565b90820152610120613cac8482016138ec565b90820152610140613cbe8482016138ec565b90820152610160613cd08482016138ec565b90820152610180613ce28482016138ec565b908201529392505050565b600060208284031215613cfe578081fd5b813561ffff81168114613257578182fd5b600060208284031215613d20578081fd5b5035919050565b600060208284031215613d38578081fd5b5051919050565b600060208284031215613d50578081fd5b815167ffffffffffffffff81168114613257578182fd5b60008251613d79818460208701614069565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b6000602082528251806020840152613dd5816040850160208701614069565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601290820152715357495045522c204e4f2053574950494e4760701b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fb757613fb76140f4565b604052919050565b60008219821115613fd257613fd26140c8565b500190565b600060ff821660ff84168060ff03821115613ff457613ff46140c8565b019392505050565b60008261400b5761400b6140de565b500490565b600081600019048311821515161561402a5761402a6140c8565b500290565b600082821015614041576140416140c8565b500390565b600060ff821660ff841680821015614060576140606140c8565b90039392505050565b60005b8381101561408457818101518382015260200161406c565b83811115614093576000848401525b50505050565b60006000198214156140ad576140ad6140c8565b5060010190565b6000826140c3576140c36140de565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7f57600080fd5b8015158114610a7f57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220058be56e9ffa5489f0446084d470f06f586e8577a7ae1f24b18cddda58551b1d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addManyToMarinePoolAndAlienPool(address,uint16[])": {
        "params": {
          "account": "the address of the staker",
          "tokenIds": "the IDs of the Marines and Aliens to stake"
        }
      },
      "claimManyFromMarinePoolAndAlienPool(uint16[],bool)": {
        "params": {
          "tokenIds": "the IDs of the tokens to claim earnings from",
          "unstake": "whether or not to unstake ALL of the tokens listed in tokenIds"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "randomAlienOwner(uint256)": {
        "params": {
          "seed": "a random value to choose a Alien from"
        },
        "returns": {
          "_0": "the owner of the randomly selected Alien thief"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(uint256[])": {
        "params": {
          "tokenIds": "the IDs of the tokens to claim earnings from"
        }
      },
      "rescueForAliens(uint256[])": {
        "params": {
          "tokenIds": "the IDs of the tokens to claim earnings from"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addManyToMarinePoolAndAlienPool(address,uint16[])": {
        "notice": "adds Marines and Aliens to the MarinePool and AlienPool"
      },
      "claimManyFromMarinePoolAndAlienPool(uint16[],bool)": {
        "notice": "realize $ORES earnings and optionally unstake tokens from the MarinePool / AlienPool to unstake a Marine it will require it has 2 days worth of $ORES unclaimed"
      },
      "randomAlienOwner(uint256)": {
        "notice": "chooses a random Alien thief when a newly minted token is stolen"
      },
      "rescue(uint256[])": {
        "notice": "emergency unstake tokens"
      },
      "rescueForAliens(uint256[])": {
        "notice": "emergency unstake tokens for aliens."
      },
      "setPaused(bool)": {
        "notice": "enables owner to pause / unpause contract"
      },
      "setRescueEnabled(bool)": {
        "notice": "allows owner to enable \"rescue mode\" simplifies accounting, prioritizes tokens out in emergency"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 806,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 788,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 983,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1443,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 276,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 390,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1111,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1154,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1005,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1096,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11987,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "totalRankStaked",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 11989,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "numMarinesStaked",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 12018,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "mnaNFT",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IMnA)15638"
      },
      {
        "astId": 12021,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "mnaGame",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IMnAGame)15641"
      },
      {
        "astId": 12024,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "oresToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IORES)15719"
      },
      {
        "astId": 12027,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "randomSeedGenerator",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IRandomSeedGenerator)15727"
      },
      {
        "astId": 12032,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "marinePool",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_uint256,t_struct(Stake)11985_storage)"
      },
      {
        "astId": 12038,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "alienPool",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_array(t_struct(Stake)11985_storage)dyn_storage)"
      },
      {
        "astId": 12042,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "alienPoolIndices",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12044,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "unaccountedRewards",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 12046,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "oresPerRank",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 12060,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "treasureChestTypeId",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 12062,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "totalORESEarned",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 12064,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "lastClaimTimestamp",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 12066,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "rescueEnabled",
        "offset": 0,
        "slot": "315",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)11985_storage)dyn_storage": {
        "base": "t_struct(Stake)11985_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPool.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMnA)15638": {
        "encoding": "inplace",
        "label": "contract IMnA",
        "numberOfBytes": "20"
      },
      "t_contract(IMnAGame)15641": {
        "encoding": "inplace",
        "label": "contract IMnAGame",
        "numberOfBytes": "20"
      },
      "t_contract(IORES)15719": {
        "encoding": "inplace",
        "label": "contract IORES",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomSeedGenerator)15727": {
        "encoding": "inplace",
        "label": "contract IRandomSeedGenerator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(Stake)11985_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingPool.Stake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Stake)11985_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)11985_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingPool.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)11985_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Stake)11985_storage": {
        "encoding": "inplace",
        "label": "struct StakingPool.Stake",
        "members": [
          {
            "astId": 11978,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11980,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "value",
            "offset": 2,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 11982,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "owner",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11984,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}