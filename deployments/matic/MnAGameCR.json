{
  "address": "0xa7cF1E2ab93c03f322638E94c0d36f32ECc65372",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "addCommitRandom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowCommits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "canMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "deleteCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "forceRevealCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getPendingMint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "stake",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "amount",
              "type": "uint16"
            }
          ],
          "internalType": "struct MnAGameCR.MintCommit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "hasMintPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "stake",
          "type": "bool"
        }
      ],
      "name": "mintCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mnaNFT",
      "outputs": [
        {
          "internalType": "contract IMnA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oresToken",
      "outputs": [
        {
          "internalType": "contract IORES",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowCommits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ores",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wnd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spidox",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxOresCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmt",
          "type": "uint256"
        }
      ],
      "name": "setPendingMintAmt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "setTreasureChestId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spidox",
      "outputs": [
        {
          "internalType": "contract ISpidox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "contract IStakingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasureChestTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 9,
  "solcInputHash": "2071a5e2b3f22f82aa54d485564d0902",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"addCommitRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowCommits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"forceRevealCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingMint\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"internalType\":\"struct MnAGameCR.MintCommit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasMintPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"mintCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnaNFT\",\"outputs\":[{\"internalType\":\"contract IMnA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oresToken\",\"outputs\":[{\"internalType\":\"contract IORES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ores\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spidox\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxOresCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmt\",\"type\":\"uint256\"}],\"name\":\"setPendingMintAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"setTreasureChestId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spidox\",\"outputs\":[{\"internalType\":\"contract ISpidox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureChestTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"params\":{\"addr\":\"the address to enable\"}},\"mintCost(uint256)\":{\"params\":{\"tokenId\":\"the ID to check the cost of to mint\"},\"returns\":{\"_0\":\"the cost of the given token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAdmin(address)\":{\"params\":{\"addr\":\"the address to disbale\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"enables an address to mint / burn\"},\"getPendingMint(address)\":{\"notice\":\"EXTERNAL \"},\"mintCommit(uint256,bool)\":{\"notice\":\"Initiate the start of a mint. This action burns $ORES, as the intent of committing is that you cannot back out once you've started. This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this commit was added to. \"},\"mintReveal()\":{\"notice\":\"Reveal the commits for this user. This will be when the user gets their NFT, and can only be done when the commit id that the user is pending for has been assigned a random seed. \"},\"removeAdmin(address)\":{\"notice\":\"disables an address from minting / burning\"},\"setPaused(bool)\":{\"notice\":\"enables owner to pause / unpause contract\"},\"setPendingMintAmt(uint256)\":{\"notice\":\"Allow the contract owner to set the pending mint amount. This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been   reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community. This function should not be called lightly, this will have negative consequences on the game. \"},\"withdraw()\":{\"notice\":\"allows owner to withdraw funds from minting\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MnAGameCR.sol\":\"MnAGameCR\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MnAGameCR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport \\\"./interfaces/IMnAGame.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IORES.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\nimport \\\"./interfaces/ISpidox.sol\\\";\\n\\n\\ncontract MnAGameCR is UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, IMnAGame {\\n\\n  event MintCommitted(address indexed owner, uint256 indexed amount);\\n  event MintRevealed(address indexed owner, uint256 indexed amount);\\n\\n  struct MintCommit {\\n    bool stake;\\n    uint16 amount;\\n  }\\n\\n  uint256 public treasureChestTypeId;\\n  // max $ORES cost \\n  uint256 private maxOresCost;\\n\\n  // address -> commit # -> commits\\n  mapping(address => mapping(uint16 => MintCommit)) private _mintCommits;\\n  // address -> commit num of commit need revealed for account\\n  mapping(address => uint16) private _pendingCommitId;\\n  // commit # -> offchain random\\n  mapping(uint16 => uint256) private _commitRandoms;\\n  uint16 private _commitId;\\n  uint16 private pendingMintAmt;\\n  bool public allowCommits;\\n\\n  // address => can call addCommitRandom\\n  mapping(address => bool) private admins;\\n\\n  // reference to the Tower for choosing random Alien thieves\\n  IStakingPool public stakingPool;\\n  // reference to $ORES for burning on mint\\n  IORES public oresToken;\\n  // reference to Traits\\n  ITraits public traits;\\n  // reference to NFT collection\\n  IMnA public mnaNFT;\\n  // reference to spidox collection\\n  ISpidox public spidox;\\n\\n  function initialize() initializer public {\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n    __Ownable_init_unchained();\\n    _pause();\\n    maxOresCost = 90000 ether;\\n    _commitId = 1;\\n    allowCommits = true;\\n  }  \\n\\nfunction _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /** CRITICAL TO SETUP */\\n\\n  modifier requireContractsSet() {\\n      require(address(oresToken) != address(0) && address(traits) != address(0) \\n        && address(mnaNFT) != address(0) && address(stakingPool) != address(0)\\n        , \\\"Contracts not set\\\");\\n      _;\\n  }\\n\\n  function setContracts(address _ores, address _traits, address _wnd, address _stakingPool, address _spidox) external onlyOwner {\\n    oresToken = IORES(_ores);\\n    traits = ITraits(_traits);\\n    mnaNFT = IMnA(_wnd);\\n    stakingPool = IStakingPool(_stakingPool);\\n    spidox = ISpidox(_spidox);\\n  }\\n\\n  /** EXTERNAL */\\n\\n  function getPendingMint(address addr) external view returns (MintCommit memory) {\\n    require(_pendingCommitId[addr] != 0, \\\"no pending commits\\\");\\n    return _mintCommits[addr][_pendingCommitId[addr]];\\n  }\\n\\n  function hasMintPending(address addr) external view returns (bool) {\\n    return _pendingCommitId[addr] != 0;\\n  }\\n\\n  function canMint(address addr) external view returns (bool) {\\n    return _pendingCommitId[addr] != 0 && _commitRandoms[_pendingCommitId[addr]] > 0;\\n  }\\n\\n  // Seed the current commit id so that pending commits can be revealed\\n  function addCommitRandom(uint256 seed) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    _commitRandoms[_commitId] = seed;\\n    _commitId += 1;\\n  }\\n\\n  function deleteCommit(address addr) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    uint16 commitIdCur = _pendingCommitId[_msgSender()];\\n    require(commitIdCur > 0, \\\"No pending commit\\\");\\n    delete _mintCommits[addr][commitIdCur];\\n    delete _pendingCommitId[addr];\\n  }\\n\\n  function forceRevealCommit(address addr) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    reveal(addr);\\n  }\\n\\n  /** Initiate the start of a mint. This action burns $ORES, as the intent of committing is that you cannot back out once you've started.\\n    * This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this\\n    * commit was added to. */\\n  function mintCommit(uint256 amount, bool stake) external whenNotPaused nonReentrant {\\n    require(allowCommits, \\\"adding commits disallowed\\\");\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    require(_pendingCommitId[_msgSender()] == 0, \\\"Already have pending mints\\\");\\n    uint16 minted = mnaNFT.minted();\\n    uint256 maxTokens = mnaNFT.getMaxTokens();\\n    require(minted + pendingMintAmt + amount <= maxTokens, \\\"All tokens minted\\\");\\n    require(amount > 0 && amount <= 10, \\\"Invalid mint amount\\\");\\n\\n    uint256 totalORESCost = 0;\\n    // Loop through the amount of \\n    for (uint i = 1; i <= amount; i++) {\\n      totalORESCost += mintCost(minted + pendingMintAmt + i);\\n    }\\n    if (totalORESCost > 0) {\\n      oresToken.burn(_msgSender(), totalORESCost);\\n      oresToken.updateOriginAccess();\\n    }\\n    uint16 amt = uint16(amount);\\n    _mintCommits[_msgSender()][_commitId] = MintCommit(stake, amt);\\n    _pendingCommitId[_msgSender()] = _commitId;\\n    pendingMintAmt += amt;\\n    emit MintCommitted(_msgSender(), amount);\\n  }\\n\\n  /** Reveal the commits for this user. This will be when the user gets their NFT, and can only be done when the commit id that\\n    * the user is pending for has been assigned a random seed. */\\n  function mintReveal() external whenNotPaused nonReentrant {\\n    require(tx.origin == _msgSender(), \\\"Only EOA1\\\");\\n    reveal(_msgSender());\\n  }\\n\\n  function reveal(address addr) internal {\\n    uint16 commitIdCur = _pendingCommitId[addr];\\n    require(commitIdCur > 0, \\\"No pending commit\\\");\\n    require(_commitRandoms[commitIdCur] > 0, \\\"random seed not set\\\");\\n    uint16 minted = mnaNFT.minted();\\n    MintCommit memory commit = _mintCommits[addr][commitIdCur];\\n    pendingMintAmt -= commit.amount;\\n    uint16[] memory tokenIds = new uint16[](commit.amount);\\n    uint16[] memory tokenIdsToStake = new uint16[](commit.amount);\\n    uint256 seed = _commitRandoms[commitIdCur];\\n    for (uint k = 0; k < commit.amount; k++) {\\n      minted++;\\n      // scramble the random so the steal / treasure mechanic are different per mint\\n      seed = uint256(keccak256(abi.encode(seed, addr)));\\n      address recipient = selectRecipient(seed);\\n      if(recipient != addr && address(spidox) != address(0) && spidox.balanceOf(addr) > 0) {\\n        // If the mint is going to be stolen, there's a 50% chance \\n        //  a alien will prefer a treasure chest over it\\n        if(seed & 1 == 1) {\\n          spidox.safeTransferFrom(addr, recipient, spidox.tokenOfOwnerByIndex(addr, 0), \\\"\\\");\\n          recipient = addr;\\n        }\\n      }\\n      tokenIds[k] = minted;\\n      if (!commit.stake || recipient != addr) {\\n        mnaNFT.mint(recipient, seed);\\n      } else {\\n        mnaNFT.mint(address(stakingPool), seed);\\n        tokenIdsToStake[k] = minted;\\n      }\\n    }\\n    mnaNFT.updateOriginAccess(tokenIds);\\n    if(commit.stake) {\\n      stakingPool.addManyToMarinePoolAndAlienPool(addr, tokenIdsToStake);\\n    }\\n    delete _mintCommits[addr][commitIdCur];\\n    delete _pendingCommitId[addr];\\n    emit MintRevealed(addr, tokenIds.length);\\n  }\\n\\n  /** \\n   * @param tokenId the ID to check the cost of to mint\\n   * @return the cost of the given token ID\\n   */\\n  function mintCost(uint256 tokenId) public view returns (uint256) {\\n    if (tokenId <= 6969) return 0 ether;\\n    if (tokenId < 14000) return 30000 ether;\\n    if (tokenId < 20999) return 60000 ether;\\n    if (tokenId < 27998) return 90000 ether;\\n    return maxOresCost;\\n  }\\n\\n  /**\\n   * the first 25% (ETH purchases) go to the minter\\n   * the remaining 80% have a 10% chance to be given to a random staked alien\\n   * @param seed a random value to select a recipient from\\n   * @return the address of the recipient (either the minter or the Alien thief's owner)\\n   */\\n  function selectRecipient(uint256 seed) internal view returns (address) {\\n    if (((seed >> 245) % 5) != 0) return _msgSender(); // top 10 bits haven't been used\\n    address thief = stakingPool.randomAlienOwner(seed >> 144); // 144 bits reserved for trait selection\\n    if (thief == address(0x0)) return _msgSender();\\n    return thief;\\n  }\\n\\n  /** ADMIN */\\n\\n  /**\\n   * enables owner to pause / unpause contract\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  function setMaxOresCost(uint256 _amount) external requireContractsSet onlyOwner {\\n    maxOresCost = _amount;\\n  } \\n\\n  function setTreasureChestId(uint256 typeId) external onlyOwner {\\n    treasureChestTypeId = typeId;\\n  }\\n\\n  function setAllowCommits(bool allowed) external onlyOwner {\\n    allowCommits = allowed;\\n  }\\n\\n  /** Allow the contract owner to set the pending mint amount.\\n    * This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been \\n    *  reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community.\\n    * This function should not be called lightly, this will have negative consequences on the game. */\\n  function setPendingMintAmt(uint256 pendingAmt) external onlyOwner {\\n    pendingMintAmt = uint16(pendingAmt);\\n  }\\n\\n  /**\\n  * enables an address to mint / burn\\n  * @param addr the address to enable\\n  */\\n  function addAdmin(address addr) external onlyOwner {\\n      admins[addr] = true;\\n  }\\n\\n  /**\\n  * disables an address from minting / burning\\n  * @param addr the address to disbale\\n  */\\n  function removeAdmin(address addr) external onlyOwner {\\n      admins[addr] = false;\\n  }\\n\\n  /**\\n   * allows owner to withdraw funds from minting\\n   */\\n  function withdraw() external onlyOwner {\\n    payable(owner()).transfer(address(this).balance);\\n  }\\n}\",\"keccak256\":\"0x8adb95952f7a3fec01df04206272e4433456ec11c918fb062e9413fc297c1053\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint256);\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (MarineAlien memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function isMarine(uint256 tokenId) external view returns(bool);\\n  \\n}\",\"keccak256\":\"0x61b399d83c8c8464f1b5d391fe92cef9d5979c8b0ed9cfc7960119026b1dc52d\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnAGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMnAGame {\\n  \\n}\",\"keccak256\":\"0x153a2a2e66d1ea8f3d36504b7c5fe1dc95804e115718a047578813dd27da7cb6\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IORES.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IORES {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1f022aafad54e89fb10e93482e54afffaac90276e3670c904b9dff2fb9c58357\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ISpidox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ISpidox is IERC721{\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n}\",\"keccak256\":\"0x74b8910bd631fbef2e9eea49f7191225b0542b4f128ed25b838f356c6070a5dc\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingPool {\\n  function addManyToMarinePoolAndAlienPool(address account, uint16[] calldata tokenIds) external;\\n  function randomAlienOwner(uint256 seed) external view returns (address);\\n}\",\"keccak256\":\"0x220fe044bf4be7de6bc5f2000a30cec2f3b92d5c84a4f8a461eec2809e1d0351\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x5cc816abe59a704ec2a887d644aa058a5f95aa2738c9ca8b3f775cba8201f24a\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063715018a611610102578063e5d391a211610095578063f4c1fc5f11610064578063f4c1fc5f14610589578063f62b1c0d1461059e578063f63bf8bd146105be578063ff9e23d0146105de576101e3565b8063e5d391a214610512578063e74c6bb514610532578063f2fde38b14610549578063f49bb49214610569576101e3565b8063bd3fae82116100d1578063bd3fae8214610473578063c2ba474414610494578063ce4f276c146104b4578063e1fc334f146104f1576101e3565b8063715018a61461040a5780637785a1641461041f5780638129fc1c146104405780638da5cb5b14610455576101e3565b8063392ff0921161017a578063498c626a11610149578063498c626a1461038c5780634f1ef286146103bf5780635c975abb146103d257806370480275146103ea576101e3565b8063392ff092146103175780633ccfd60b146103375780633df6cc4f1461034c578063497f71721461036c576101e3565b806327de8f27116101b657806327de8f271461028857806331305082146102b6578063357bad8c146102d65780633659cfe6146102f7576101e3565b80630c56ae3b146101e857806316c38b3c146102265780631785f53c146102485780631f4fb37a14610268575b600080fd5b3480156101f457600080fd5b5061013454610209906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023257600080fd5b50610246610241366004612644565b61061f565b005b34801561025457600080fd5b506102466102633660046124dd565b610700565b34801561027457600080fd5b50610246610283366004612680565b61074c565b34801561029457600080fd5b506102a86102a3366004612680565b61077c565b60405190815260200161021d565b3480156102c257600080fd5b506102466102d1366004612680565b6107eb565b3480156102e257600080fd5b5061013754610209906001600160a01b031681565b34801561030357600080fd5b506102466103123660046124dd565b61087c565b34801561032357600080fd5b50610246610332366004612680565b610942565b34801561034357600080fd5b50610246610a06565b34801561035857600080fd5b50610246610367366004612644565b610a69565b34801561037857600080fd5b506102466103873660046124dd565b610ab4565b34801561039857600080fd5b50610132546103af90640100000000900460ff1681565b604051901515815260200161021d565b6102466103cd366004612585565b610b99565b3480156103de57600080fd5b5060fb5460ff166103af565b3480156103f657600080fd5b506102466104053660046124dd565b610c53565b34801561041657600080fd5b50610246610ca2565b34801561042b57600080fd5b5061013854610209906001600160a01b031681565b34801561044c57600080fd5b50610246610cd8565b34801561046157600080fd5b506097546001600160a01b0316610209565b34801561047f57600080fd5b5061013554610209906001600160a01b031681565b3480156104a057600080fd5b506103af6104af3660046124dd565b610de8565b3480156104c057600080fd5b506103af6104cf3660046124dd565b6001600160a01b03166000908152610130602052604090205461ffff16151590565b3480156104fd57600080fd5b5061013654610209906001600160a01b031681565b34801561051e57600080fd5b5061024661052d3660046126b0565b610e44565b34801561053e57600080fd5b506102a861012d5481565b34801561055557600080fd5b506102466105643660046124dd565b6113bd565b34801561057557600080fd5b506102466105843660046124dd565b611455565b34801561059557600080fd5b506102466114a3565b3480156105aa57600080fd5b506102466105b9366004612680565b611569565b3480156105ca57600080fd5b506102466105d9366004612515565b6115b4565b3480156105ea57600080fd5b506105fe6105f93660046124dd565b611642565b6040805182511515815260209283015161ffff16928101929092520161021d565b610135546001600160a01b0316158015906106455750610136546001600160a01b031615155b801561065c5750610137546001600160a01b031615155b80156106735750610134546001600160a01b031615155b6106b85760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b60448201526064015b60405180910390fd5b6097546001600160a01b031633146106e25760405162461bcd60e51b81526004016106af906128a0565b80156106f5576106f0611709565b6106fd565b6106fd61177e565b50565b6097546001600160a01b0316331461072a5760405162461bcd60e51b81526004016106af906128a0565b6001600160a01b0316600090815261013360205260409020805460ff19169055565b6097546001600160a01b031633146107765760405162461bcd60e51b81526004016106af906128a0565b61012d55565b6000611b39821161078f575060006107e6565b6136b08210156107aa575069065a4da25d3016c000006107e6565b6152078210156107c55750690cb49b44ba602d8000006107e6565b616d5e8210156107e0575069130ee8e71790444000006107e6565b5061012e545b919050565b6097546001600160a01b03163314806108145750336000908152610133602052604090205460ff165b6108305760405162461bcd60e51b81526004016106af906127a7565b610132805461ffff90811660009081526101316020526040812084905582546001939261085f91859116612920565b92506101000a81548161ffff021916908361ffff16021790555050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108c55760405162461bcd60e51b81526004016106af906127de565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108f76117f8565b6001600160a01b03161461091d5760405162461bcd60e51b81526004016106af9061282a565b61092681611826565b604080516000808252602082019092526106fd91839190611850565b610135546001600160a01b0316158015906109685750610136546001600160a01b031615155b801561097f5750610137546001600160a01b031615155b80156109965750610134546001600160a01b031615155b6109d65760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b60448201526064016106af565b6097546001600160a01b03163314610a005760405162461bcd60e51b81526004016106af906128a0565b61012e55565b6097546001600160a01b03163314610a305760405162461bcd60e51b81526004016106af906128a0565b6097546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156106fd573d6000803e3d6000fd5b6097546001600160a01b03163314610a935760405162461bcd60e51b81526004016106af906128a0565b61013280549115156401000000000264ff0000000019909216919091179055565b6097546001600160a01b0316331480610add5750336000908152610133602052604090205460ff165b610af95760405162461bcd60e51b81526004016106af906127a7565b336000908152610130602052604090205461ffff1680610b4f5760405162461bcd60e51b8152602060048201526011602482015270139bc81c195b991a5b99c818dbdb5b5a5d607a1b60448201526064016106af565b6001600160a01b03909116600081815261012f6020908152604080832061ffff9095168352938152838220805462ffffff1916905591815261013090915220805461ffff19169055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610be25760405162461bcd60e51b81526004016106af906127de565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c146117f8565b6001600160a01b031614610c3a5760405162461bcd60e51b81526004016106af9061282a565b610c4382611826565b610c4f82826001611850565b5050565b6097546001600160a01b03163314610c7d5760405162461bcd60e51b81526004016106af906128a0565b6001600160a01b0316600090815261013360205260409020805460ff19166001179055565b6097546001600160a01b03163314610ccc5760405162461bcd60e51b81526004016106af906128a0565b610cd6600061199b565b565b600054610100900460ff16610cf35760005460ff1615610cf7565b303b155b610d5a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106af565b600054610100900460ff16158015610d85576000805460ff1961ff0019909116610100171660011790555b610d8d6119ed565b610d95611a20565b610d9d611a47565b610da5611709565b69130ee8e717904440000061012e55610132805464ff000000001961ffff199091166001171664010000000017905580156106fd576000805461ff001916905550565b6001600160a01b0381166000908152610130602052604081205461ffff1615801590610e3e57506001600160a01b0382166000908152610130602090815260408083205461ffff16835261013190915290205415155b92915050565b60fb5460ff1615610e675760405162461bcd60e51b81526004016106af90612876565b600260c9541415610eba5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106af565b600260c95561013254640100000000900460ff16610f1a5760405162461bcd60e51b815260206004820152601960248201527f616464696e6720636f6d6d69747320646973616c6c6f7765640000000000000060448201526064016106af565b323314610f545760405162461bcd60e51b81526020600482015260086024820152674f6e6c7920454f4160c01b60448201526064016106af565b336000908152610130602052604090205461ffff1615610fb65760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920686176652070656e64696e67206d696e747300000000000060448201526064016106af565b6101375460408051630278162160e51b815290516000926001600160a01b031691634f02c42091600480830192602092919082900301818787803b158015610ffd57600080fd5b505af1158015611011573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611035919061265e565b9050600061013760009054906101000a90046001600160a01b03166001600160a01b0316636abcded16040518163ffffffff1660e01b815260040160206040518083038186803b15801561108857600080fd5b505afa15801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190612698565b61013254909150819085906110df9062010000900461ffff1685612920565b61ffff166110ed9190612946565b111561112f5760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b60448201526064016106af565b6000841180156111405750600a8411155b6111825760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b5a5b9d08185b5bdd5b9d606a1b60448201526064016106af565b600060015b8581116111d857610132546111ba9082906111ac9062010000900461ffff1687612920565b61ffff166102a39190612946565b6111c49083612946565b9150806111d0816129d3565b915050611187565b5080156112bc57610135546001600160a01b0316639dc29fac336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561123a57600080fd5b505af115801561124e573d6000803e3d6000fd5b5050505061013560009054906101000a90046001600160a01b03166001600160a01b0316639c47ee3b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050505b604080518082018252851515815261ffff878116602080840191825233600081815261012f835286812061013280548716835290845287822096518754955160ff199096169015151762ffff0019166101009587169590950294909417909555825490855261013090915293909220805461ffff191693821693909317909255805487928392916002916113599185916201000090910416612920565b92506101000a81548161ffff021916908361ffff1602179055508561137b3390565b6001600160a01b03167faf67cde32876f45d0ccb318d8ddb3e26990a5bfce179cec382204ceddf93143560405160405180910390a35050600160c95550505050565b6097546001600160a01b031633146113e75760405162461bcd60e51b81526004016106af906128a0565b6001600160a01b03811661144c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106af565b6106fd8161199b565b6097546001600160a01b031633148061147e5750336000908152610133602052604090205460ff165b61149a5760405162461bcd60e51b81526004016106af906127a7565b6106fd81611a77565b60fb5460ff16156114c65760405162461bcd60e51b81526004016106af90612876565b600260c95414156115195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106af565b600260c9553233146115595760405162461bcd60e51b81526020600482015260096024820152684f6e6c7920454f413160b81b60448201526064016106af565b61156233611a77565b600160c955565b6097546001600160a01b031633146115935760405162461bcd60e51b81526004016106af906128a0565b610132805461ffff909216620100000263ffff000019909216919091179055565b6097546001600160a01b031633146115de5760405162461bcd60e51b81526004016106af906128a0565b61013580546001600160a01b03199081166001600160a01b0397881617909155610136805482169587169590951790945561013780548516938616939093179092556101348054841691851691909117905561013880549092169216919091179055565b60408051808201909152600080825260208201526001600160a01b0382166000908152610130602052604090205461ffff166116b55760405162461bcd60e51b81526020600482015260126024820152716e6f2070656e64696e6720636f6d6d69747360701b60448201526064016106af565b506001600160a01b0316600090815261012f6020908152604080832061013083528184205461ffff90811685529083529281902081518083019092525460ff81161515825261010090049092169082015290565b60fb5460ff161561172c5760405162461bcd60e51b81526004016106af90612876565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117613390565b6040516001600160a01b03909116815260200160405180910390a1565b60fb5460ff166117c75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106af565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611761565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b031633146106fd5760405162461bcd60e51b81526004016106af906128a0565b600061185a6117f8565b905061186584612206565b6000835111806118725750815b156118835761188184846122ab565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661199457805460ff191660011781556040516001600160a01b038316602482015261190290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526122ab565b50805460ff191681556119136117f8565b6001600160a01b0316826001600160a01b03161461198b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106af565b61199485612396565b5050505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611a145760405162461bcd60e51b81526004016106af906128d5565b60fb805460ff19169055565b600054610100900460ff166115625760405162461bcd60e51b81526004016106af906128d5565b600054610100900460ff16611a6e5760405162461bcd60e51b81526004016106af906128d5565b610cd63361199b565b6001600160a01b0381166000908152610130602052604090205461ffff1680611ad65760405162461bcd60e51b8152602060048201526011602482015270139bc81c195b991a5b99c818dbdb5b5a5d607a1b60448201526064016106af565b61ffff811660009081526101316020526040902054611b2d5760405162461bcd60e51b81526020600482015260136024820152721c985b991bdb481cd95959081b9bdd081cd95d606a1b60448201526064016106af565b6101375460408051630278162160e51b815290516000926001600160a01b031691634f02c42091600480830192602092919082900301818787803b158015611b7457600080fd5b505af1158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac919061265e565b6001600160a01b038416600090815261012f6020908152604080832061ffff80881685529083529281902081518083019092525460ff811615158252610100900483169181018290526101328054949550909391929091600291611c19918591620100009091041661295e565b92506101000a81548161ffff021916908361ffff1602179055506000816020015161ffff1667ffffffffffffffff811115611c6457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c8d578160200160208202803683370190505b5090506000826020015161ffff1667ffffffffffffffff811115611cc157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611cea578160200160208202803683370190505b5061ffff8616600090815261013160205260408120549192505b846020015161ffff168110156120b85785611d1e816129b1565b9650508188604051602001611d469291909182526001600160a01b0316602082015260400190565b6040516020818303038152906040528051906020012060001c91506000611d6c836123d6565b9050886001600160a01b0316816001600160a01b031614158015611d9b5750610138546001600160a01b031615155b8015611e235750610138546040516370a0823160e01b81526001600160a01b038b8116600483015260009216906370a082319060240160206040518083038186803b158015611de957600080fd5b505afa158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e219190612698565b115b15611f3e578260011660011415611f3e5761013854604051632f745c5960e01b81526001600160a01b038b81166004830152600060248301529091169063b88d4fde908b9084908490632f745c599060440160206040518083038186803b158015611e8d57600080fd5b505afa158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec59190612698565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152608060648201526000608482015260a401600060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505050508890505b86858381518110611f5f57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015285511580611f925750886001600160a01b0316816001600160a01b031614155b1561200357610137546040516340c10f1960e01b81526001600160a01b03838116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b158015611fe657600080fd5b505af1158015611ffa573d6000803e3d6000fd5b505050506120a5565b61013754610134546040516340c10f1960e01b81526001600160a01b039182166004820152602481018690529116906340c10f1990604401600060405180830381600087803b15801561205557600080fd5b505af1158015612069573d6000803e3d6000fd5b505050508684838151811061208e57634e487b7160e01b600052603260045260246000fd5b602002602001019061ffff16908161ffff16815250505b50806120b0816129d3565b915050611d04565b50610137546040516335ca838b60e01b81526001600160a01b03909116906335ca838b906120ea908690600401612761565b600060405180830381600087803b15801561210457600080fd5b505af1158015612118573d6000803e3d6000fd5b5050505083600001511561218c576101345460405163c8367feb60e01b81526001600160a01b039091169063c8367feb90612159908a908690600401612735565b600060405180830381600087803b15801561217357600080fd5b505af1158015612187573d6000803e3d6000fd5b505050505b6001600160a01b038716600081815261012f6020908152604080832061ffff8b1684528252808320805462ffffff19169055838352610130909152808220805461ffff19169055855190519092917f6b71e3b30065fd1e497c06c0aa64d9c0d0a900758ceedaf05e440f024a9cd17d91a350505050505050565b803b61226a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106af565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61230a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106af565b600080846001600160a01b0316846040516123259190612719565b600060405180830381855af49150503d8060008114612360576040519150601f19603f3d011682016040523d82523d6000602084013e612365565b606091505b509150915061238d8282604051806060016040528060278152602001612a506027913961248d565b95945050505050565b61239f81612206565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006123e7600560f584901c6129ee565b156123f35750336107e6565b61013454604051633b55eb4960e21b8152609084901c60048201526000916001600160a01b03169063ed57ad249060240160206040518083038186803b15801561243c57600080fd5b505afa158015612450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247491906124f9565b90506001600160a01b038116610e3e57339150506107e6565b6060831561249c5750816124c6565b8251156124ac5782518084602001fd5b8160405162461bcd60e51b81526004016106af9190612774565b9392505050565b803580151581146107e657600080fd5b6000602082840312156124ee578081fd5b81356124c681612a3a565b60006020828403121561250a578081fd5b81516124c681612a3a565b600080600080600060a0868803121561252c578081fd5b853561253781612a3a565b9450602086013561254781612a3a565b9350604086013561255781612a3a565b9250606086013561256781612a3a565b9150608086013561257781612a3a565b809150509295509295909350565b60008060408385031215612597578182fd5b82356125a281612a3a565b9150602083013567ffffffffffffffff808211156125be578283fd5b818501915085601f8301126125d1578283fd5b8135818111156125e3576125e3612a24565b604051601f8201601f19908116603f0116810190838211818310171561260b5761260b612a24565b81604052828152886020848701011115612623578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215612655578081fd5b6124c6826124cd565b60006020828403121561266f578081fd5b815161ffff811681146124c6578182fd5b600060208284031215612691578081fd5b5035919050565b6000602082840312156126a9578081fd5b5051919050565b600080604083850312156126c2578182fd5b823591506126d2602084016124cd565b90509250929050565b6000815180845260208085019450808401835b8381101561270e57815161ffff16875295820195908201906001016126ee565b509495945050505050565b6000825161272b818460208701612981565b9190910192915050565b6001600160a01b0383168152604060208201819052600090612759908301846126db565b949350505050565b6000602082526124c660208301846126db565b6000602082528251806020840152612793816040850160208701612981565b601f01601f19169190910160400192915050565b60208082526019908201527f4f6e6c792061646d696e732063616e2063616c6c207468697300000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061ffff80831681851680830382111561293d5761293d612a0e565b01949350505050565b6000821982111561295957612959612a0e565b500190565b600061ffff8381169083168181101561297957612979612a0e565b039392505050565b60005b8381101561299c578181015183820152602001612984565b838111156129ab576000848401525b50505050565b600061ffff808316818114156129c9576129c9612a0e565b6001019392505050565b60006000198214156129e7576129e7612a0e565b5060010190565b600082612a0957634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106fd57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f97420194f77ff07b15e69f8fc4830746487de61ea18d3bea913142d68ad590a64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "params": {
          "addr": "the address to enable"
        }
      },
      "mintCost(uint256)": {
        "params": {
          "tokenId": "the ID to check the cost of to mint"
        },
        "returns": {
          "_0": "the cost of the given token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeAdmin(address)": {
        "params": {
          "addr": "the address to disbale"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmin(address)": {
        "notice": "enables an address to mint / burn"
      },
      "getPendingMint(address)": {
        "notice": "EXTERNAL "
      },
      "mintCommit(uint256,bool)": {
        "notice": "Initiate the start of a mint. This action burns $ORES, as the intent of committing is that you cannot back out once you've started. This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this commit was added to. "
      },
      "mintReveal()": {
        "notice": "Reveal the commits for this user. This will be when the user gets their NFT, and can only be done when the commit id that the user is pending for has been assigned a random seed. "
      },
      "removeAdmin(address)": {
        "notice": "disables an address from minting / burning"
      },
      "setPaused(bool)": {
        "notice": "enables owner to pause / unpause contract"
      },
      "setPendingMintAmt(uint256)": {
        "notice": "Allow the contract owner to set the pending mint amount. This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been   reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community. This function should not be called lightly, this will have negative consequences on the game. "
      },
      "withdraw()": {
        "notice": "allows owner to withdraw funds from minting"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 806,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 788,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 983,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1443,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 276,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 390,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1111,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1154,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1005,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1096,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7675,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "treasureChestTypeId",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 7677,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "maxOresCost",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 7684,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_mintCommits",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_struct(MintCommit)7673_storage))"
      },
      {
        "astId": 7688,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_pendingCommitId",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 7692,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_commitRandoms",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 7694,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "_commitId",
        "offset": 0,
        "slot": "306",
        "type": "t_uint16"
      },
      {
        "astId": 7696,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "pendingMintAmt",
        "offset": 2,
        "slot": "306",
        "type": "t_uint16"
      },
      {
        "astId": 7698,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "allowCommits",
        "offset": 4,
        "slot": "306",
        "type": "t_bool"
      },
      {
        "astId": 7702,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "admins",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7705,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "stakingPool",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IStakingPool)11769"
      },
      {
        "astId": 7708,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "oresToken",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IORES)11728"
      },
      {
        "astId": 7711,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "traits",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(ITraits)11779"
      },
      {
        "astId": 7714,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "mnaNFT",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IMnA)11694"
      },
      {
        "astId": 7717,
        "contract": "contracts/MnAGameCR.sol:MnAGameCR",
        "label": "spidox",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(ISpidox)11751"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMnA)11694": {
        "encoding": "inplace",
        "label": "contract IMnA",
        "numberOfBytes": "20"
      },
      "t_contract(IORES)11728": {
        "encoding": "inplace",
        "label": "contract IORES",
        "numberOfBytes": "20"
      },
      "t_contract(ISpidox)11751": {
        "encoding": "inplace",
        "label": "contract ISpidox",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingPool)11769": {
        "encoding": "inplace",
        "label": "contract IStakingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITraits)11779": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_struct(MintCommit)7673_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => struct MnAGameCR.MintCommit))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(MintCommit)7673_storage)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_struct(MintCommit)7673_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct MnAGameCR.MintCommit)",
        "numberOfBytes": "32",
        "value": "t_struct(MintCommit)7673_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MintCommit)7673_storage": {
        "encoding": "inplace",
        "label": "struct MnAGameCR.MintCommit",
        "members": [
          {
            "astId": 7670,
            "contract": "contracts/MnAGameCR.sol:MnAGameCR",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7672,
            "contract": "contracts/MnAGameCR.sol:MnAGameCR",
            "label": "amount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}