{
  "address": "0xc81a1960Df41277bA9ecE379f1B1ACaDCdC1f04f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "mnaNFT",
      "outputs": [
        {
          "internalType": "contract IMnA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mnaNFT",
          "type": "address"
        }
      ],
      "name": "setMnA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "traitData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEmpty",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "png",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "traitType",
          "type": "uint8"
        },
        {
          "internalType": "uint8[]",
          "name": "traitIds",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isEmpty",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "png",
              "type": "string"
            }
          ],
          "internalType": "struct Traits.Trait[]",
          "name": "traits",
          "type": "tuple[]"
        }
      ],
      "name": "uploadTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a40c843e9932c6cb1b1ee82df8e2a308a626ee790221959a25a93f7a7e12e53",
  "receipt": {
    "to": null,
    "from": "0x13576B3C22F9625156deb8866B8941637036a08F",
    "contractAddress": "0xc81a1960Df41277bA9ecE379f1B1ACaDCdC1f04f",
    "transactionIndex": 52,
    "gasUsed": "3050594",
    "logsBloom": "0x
    "blockHash": "0xd8b3f2a07dd929818c0d45a34ce0f0f5fd3e699bd38d7942849ffa1dbb2bc6cc",
    "transactionHash": "0x5a40c843e9932c6cb1b1ee82df8e2a308a626ee790221959a25a93f7a7e12e53",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 24835015,
        "transactionHash": "0x5a40c843e9932c6cb1b1ee82df8e2a308a626ee790221959a25a93f7a7e12e53",
        "address": "0xc81a1960Df41277bA9ecE379f1B1ACaDCdC1f04f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013576b3c22f9625156deb8866b8941637036a08f"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0xd8b3f2a07dd929818c0d45a34ce0f0f5fd3e699bd38d7942849ffa1dbb2bc6cc"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 24835015,
        "transactionHash": "0x5a40c843e9932c6cb1b1ee82df8e2a308a626ee790221959a25a93f7a7e12e53",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000013576b3c22f9625156deb8866b8941637036a08f",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d20775dc7e24580000000000000000000000000000000000000000000000076d41c62494840000000000000000000000000000000000000000000000000714d156494afaea1c570000000000000000000000000000000000000000000000076b6fbeaeb805dba8000000000000000000000000000000000000000000000714d32850c0d76840af",
        "logIndex": 175,
        "blockHash": "0xd8b3f2a07dd929818c0d45a34ce0f0f5fd3e699bd38d7942849ffa1dbb2bc6cc"
      }
    ],
    "blockNumber": 24835015,
    "cumulativeGasUsed": "9489904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "71036bc916121f26ce4458c835fb3c3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mnaNFT\",\"outputs\":[{\"internalType\":\"contract IMnA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mnaNFT\",\"type\":\"address\"}],\"name\":\"setMnA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEmpty\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEmpty\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct Traits.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to generate the metadata for\"},\"returns\":{\"_0\":\"a base64 encoded JSON dictionary of the token's metadata and SVG\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uploadTraits(uint8,uint8[],(string,bool,string)[])\":{\"params\":{\"traitType\":\"the trait type to upload the traits for (see traitTypes for a mapping)\",\"traits\":\"the names, empty flags and base64 encoded PNGs for each trait\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"generates a base64 encoded metadata response without referencing off-chain content\"},\"uploadTraits(uint8,uint8[],(string,bool,string)[])\":{\"notice\":\"administrative to upload the names and images associated with each trait\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\n\\ncontract Traits is Ownable, ITraits {\\n\\n  using Strings for uint256;\\n\\n  // struct to store each trait's data for metadata and rendering\\n  struct Trait {\\n    string name;\\n    bool isEmpty;\\n    string png;\\n  }\\n\\n  // mapping from trait type (index) to its name\\n  string[11] private _traitTypes = [\\n    \\\"M_Weapon\\\",\\n    \\\"M_Back\\\",\\n    \\\"M_Headgear\\\",\\n    \\\"M_Eyes\\\",\\n    \\\"M_Emblem\\\",\\n    \\\"M_Body\\\",\\n    \\\"A_Headgear\\\",\\n    \\\"A_Eye\\\",\\n    \\\"A_Back\\\",\\n    \\\"A_Mouth\\\",\\n    \\\"A_Body\\\"\\n  ];\\n  // storage of each traits name and base64 PNG data\\n  mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n  // mapping from rankIndex to its score\\n  string[4] private _ranks = [\\n    \\\"4\\\",\\n    \\\"3\\\",\\n    \\\"2\\\",\\n    \\\"1\\\"\\n  ];\\n\\n  IMnA public mnaNFT;\\n\\n  constructor() {}\\n\\n  function setMnA(address _mnaNFT) external onlyOwner {\\n    mnaNFT = IMnA(_mnaNFT);\\n  }\\n\\n  /**\\n   * administrative to upload the names and images associated with each trait\\n   * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\n   * @param traits the names, empty flags and base64 encoded PNGs for each trait\\n   */\\n  function uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyOwner {\\n    require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n    for (uint i = 0; i < traits.length; i++) {\\n      traitData[traitType][traitIds[i]] = Trait(\\n        traits[i].name,\\n        traits[i].isEmpty,\\n        traits[i].png\\n      );\\n    }\\n  }\\n\\n  /**\\n   * generates an <image> element using base64 encoded PNGs\\n   * @param trait the trait storing the PNG data\\n   * @return the <image> element\\n   */\\n  function drawTrait(Trait memory trait) internal pure returns (string memory) {\\n    require(!trait.isEmpty, \\\"Empty trait!!!\\\");\\n    return string(abi.encodePacked(\\n      '<image x=\\\"32\\\" y=\\\"32\\\" width=\\\"1024\\\" height=\\\"1024\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n      trait.png,\\n      '\\\"/>'\\n    ));\\n  }\\n\\n  /**\\n   * generates an entire SVG by composing multiple <image> elements of PNGs\\n   * @param tokenId the ID of the token to generate an SVG for\\n   * @return a valid SVG of the Marine / Alien\\n   */\\n  function drawSVG(uint256 tokenId) internal view returns (string memory) {\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n    string memory svgString; \\n    if (s.isMarine) {\\n      svgString = string(abi.encodePacked(\\n        traitData[5][s.M_Body].isEmpty ? '' : drawTrait(traitData[5][s.M_Body]),\\n        traitData[4][s.M_Emblem].isEmpty ? '' : drawTrait(traitData[4][s.M_Emblem]),\\n        traitData[3][s.M_Eyes].isEmpty ? '' : drawTrait(traitData[3][s.M_Eyes]),\\n        traitData[2][s.M_Headgear].isEmpty ? '' : drawTrait(traitData[2][s.M_Headgear]),\\n        traitData[1][s.M_Back].isEmpty ? '' : drawTrait(traitData[1][s.M_Back]),\\n        traitData[0][s.M_Weapon].isEmpty ? '' : drawTrait(traitData[0][s.M_Weapon])\\n      ));\\n    } else {\\n      svgString = string(abi.encodePacked(\\n        traitData[10][s.A_Body].isEmpty ? '' : drawTrait(traitData[10][s.A_Body]),\\n        traitData[9][s.A_Mouth].isEmpty ? '' : drawTrait(traitData[9][s.A_Mouth]),\\n        traitData[8][s.A_Back].isEmpty ? '' : drawTrait(traitData[8][s.A_Back]),\\n        traitData[7][s.A_Eye].isEmpty ? '' : drawTrait(traitData[7][s.A_Eye]),\\n        traitData[6][s.A_Headgear].isEmpty ? '' : drawTrait(traitData[6][s.A_Headgear])\\n      ));\\n    }\\n    \\n    return string(abi.encodePacked(\\n      '<svg id=\\\"mnaNFT\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 1088 1088\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n      svgString,\\n      \\\"</svg>\\\"\\n    ));\\n  }\\n\\n  /**\\n   * generates an attribute for the attributes array in the ERC721 metadata standard\\n   * @param traitType the trait type to reference as the metadata key\\n   * @param value the token's trait associated with the key\\n   * @return a JSON dictionary for the single attribute\\n   */\\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '{\\\"trait_type\\\":\\\"',\\n      traitType,\\n      '\\\",\\\"value\\\":\\\"',\\n      value,\\n      '\\\"}'\\n    ));\\n  }\\n\\n  /**\\n   * generates an array composed of all the individual traits and values\\n   * @param tokenId the ID of the token to compose the metadata for\\n   * @return a JSON array of all of the attributes for given token ID\\n   */\\n  function compileAttributes(uint256 tokenId) internal view returns (string memory) {\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n    string memory traits;\\n    if (s.isMarine) {\\n      traits = string(abi.encodePacked(\\n        attributeForTypeAndValue(_traitTypes[0], traitData[0][s.M_Weapon].name),',',\\n        attributeForTypeAndValue(_traitTypes[1], traitData[1][s.M_Back].name),',',\\n        attributeForTypeAndValue(_traitTypes[2], traitData[2][s.M_Headgear].name),',',\\n        attributeForTypeAndValue(_traitTypes[3], traitData[3][s.M_Eyes].name),',',\\n        attributeForTypeAndValue(_traitTypes[4], traitData[4][s.M_Emblem].name),',',\\n        attributeForTypeAndValue(_traitTypes[5], traitData[5][s.M_Body].name),','\\n      ));\\n    } else {\\n      traits = string(abi.encodePacked(\\n        attributeForTypeAndValue(_traitTypes[6], traitData[6][s.A_Headgear].name),',',\\n        attributeForTypeAndValue(_traitTypes[7], traitData[7][s.A_Eye].name),',',\\n        attributeForTypeAndValue(_traitTypes[8], traitData[8][s.A_Back].name),',',\\n        attributeForTypeAndValue(_traitTypes[9], traitData[9][s.A_Mouth].name),',',\\n        attributeForTypeAndValue(_traitTypes[10], traitData[10][s.A_Body].name),',',\\n        attributeForTypeAndValue(\\\"Rank Score\\\", _ranks[s.rankIndex]),','\\n      ));\\n    }\\n    return string(abi.encodePacked(\\n      '[',\\n      traits,\\n      '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":',\\n      tokenId <= mnaNFT.getPaidTokens() ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\n      '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":',\\n      s.isMarine ? '\\\"Marine\\\"' : '\\\"Alien\\\"',\\n      '}]'\\n    ));\\n  }\\n\\n  /**\\n   * generates a base64 encoded metadata response without referencing off-chain content\\n   * @param tokenId the ID of the token to generate the metadata for\\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_msgSender() == address(mnaNFT), \\\"hmmmm what doing?\\\");\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n\\n    string memory metadata = string(abi.encodePacked(\\n      '{\\\"name\\\": \\\"',\\n      s.isMarine ? 'Marine #' : 'Alien #',\\n      tokenId.toString(),\\n      '\\\", \\\"description\\\": \\\"Space Game is a 100% on-chain collectible based strategy PVE game. Leveraging both L1 & L2. All metadata and pixel sprites are generated and stored completely on-chain. No API and IPFS are used.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n      base64(bytes(drawSVG(tokenId))),\\n      '\\\", \\\"attributes\\\":',\\n      compileAttributes(tokenId),\\n      \\\"}\\\"\\n    ));\\n\\n    return string(abi.encodePacked(\\n      \\\"data:application/json;base64,\\\",\\n      base64(bytes(metadata))\\n    ));\\n  }\\n\\n  string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  function base64(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return '';\\n    \\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n      \\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n      \\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n      \\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n      \\n      // run over the input, 3 bytes at a time\\n      for {} lt(dataPtr, endPtr) {}\\n      {\\n          dataPtr := add(dataPtr, 3)\\n          \\n          // read 3 bytes\\n          let input := mload(dataPtr)\\n          \\n          // write 4 characters\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n      }\\n      \\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n    }\\n    \\n    return result;\\n  }\\n}\",\"keccak256\":\"0x7203a943a673d76d06db22607a9a9abda3aa9d54be47aff1575a3339b64dc325\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint256);\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (MarineAlien memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function isMarine(uint256 tokenId) external view returns(bool);\\n  \\n}\",\"keccak256\":\"0x61b399d83c8c8464f1b5d391fe92cef9d5979c8b0ed9cfc7960119026b1dc52d\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x5cc816abe59a704ec2a887d644aa058a5f95aa2738c9ca8b3f775cba8201f24a\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "0x60086101e08181526726afabb2b0b837b760c11b6102005260809081526006610220818152654d5f4261636b60d01b6102405260a052600a6102608181526926afa432b0b233b2b0b960b11b6102805260c0526102a0828152654d5f4579657360d01b6102c05260e0526102e0938452674d5f456d626c656d60c01b6103005261010093909352610320818152654d5f426f647960d01b61034052610120526103609283526920afa432b0b233b2b0b960b11b610380526101409290925260056103a090815264415f45796560d81b6103c052610160526103e082815265415f4261636b60d01b6104005261018052600761042090815266082be9adeeae8d60cb1b610440526101a0526104a060405261046091825265415f426f647960d01b610480526101c0919091526200013a90600190600b6200022c565b506040805160c081018252600160808201818152600d60fa1b60a0840152825282518084018452818152603360f81b6020828101919091528084019190915283518085018552828152601960f91b81830152838501528351808501909452908352603160f81b908301526060810191909152620001bc90600d90600462000283565b50348015620001ca57600080fd5b50620001d633620001dc565b6200040d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82600b810192821562000271579160200282015b8281111562000271578251805162000260918491602090910190620002c8565b509160200191906001019062000240565b506200027f92915062000353565b5090565b826004810192821562000271579160200282015b82811115620002715782518051620002b7918491602090910190620002c8565b509160200191906001019062000297565b828054620002d690620003d0565b90600052602060002090601f016020900481019282620002fa576000855562000345565b82601f106200031557805160ff191683800117855562000345565b8280016001018555821562000345579182015b828111156200034557825182559160200191906001019062000328565b506200027f92915062000374565b808211156200027f5760006200036a82826200038b565b5060010162000353565b5b808211156200027f576000815560010162000375565b5080546200039990620003d0565b6000825580601f10620003ad5750620003cd565b601f016020900490600052602060002090810190620003cd919062000374565b50565b600281046001821680620003e557607f821691505b602082108114156200040757634e487b7160e01b600052602260045260246000fd5b50919050565b612f5a806200041d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639bf2ee351161005b5780639bf2ee35146100eb578063c87b56dd1461010d578063d8f320471461012d578063f2fde38b1461014057610088565b8063357bad8c1461008d578063604ca525146100bd578063715018a6146100d25780638da5cb5b146100da575b600080fd5b6011546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004612338565b610153565b005b6100d06101a8565b6000546001600160a01b03166100a0565b6100fe6100f936600461254f565b6101de565b6040516100b493929190612c90565b61012061011b366004612483565b610324565b6040516100b49190612c7d565b6100d061013b3660046124cf565b6104c9565b6100d061014e366004612338565b610741565b6000546001600160a01b031633146101865760405162461bcd60e51b815260040161017d90612cc7565b60405180910390fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101d25760405162461bcd60e51b815260040161017d90612cc7565b6101dc60006107dc565b565b600c60209081526000928352604080842090915290825290208054819061020490612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461023090612e31565b801561027d5780601f106102525761010080835404028352916020019161027d565b820191906000526020600020905b81548152906001019060200180831161026057829003601f168201915b5050506001840154600285018054949560ff9092169491935091506102a190612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd90612e31565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050905083565b6011546060906001600160a01b0316336001600160a01b03161461037e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b604482015260640161017d565b6011546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101a06040518083038186803b1580156103c457600080fd5b505afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc9190612382565b90506000816000015161042e5760405180604001604052806007815260200166416c69656e202360c81b815250610450565b604051806040016040528060088152602001674d6172696e65202360c01b8152505b6104598561082c565b61046a6104658761094f565b6113ba565b61047387611531565b604051602001610486949392919061299b565b60405160208183030381529060405290506104a0816113ba565b6040516020016104b09190612b5e565b604051602081830303815290604052925050505b919050565b6000546001600160a01b031633146104f35760405162461bcd60e51b815260040161017d90612cc7565b8281146105365760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b604482015260640161017d565b60005b8181101561073957604051806060016040528084848481811061056c57634e487b7160e01b600052603260045260246000fd5b905060200281019061057e9190612d41565b6105889080612cfc565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106105e257634e487b7160e01b600052603260045260246000fd5b90506020028101906105f49190612d41565b610605906040810190602001612366565b1515815260200184848481811061062c57634e487b7160e01b600052603260045260246000fd5b905060200281019061063e9190612d41565b61064c906040810190612cfc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152600c6020526040812091508787858181106106b357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106c891906124b3565b60ff1681526020808201929092526040016000208251805191926106f192849290910190612240565b5060208281015160018301805460ff1916911515919091179055604083015180516107229260028501920190612240565b50905050808061073190612e6c565b915050610539565b505050505050565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161017d90612cc7565b6001600160a01b0381166107d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017d565b6107d9816107dc565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161085157506040805180820190915260018152600360fc1b60208201526104c4565b8160005b811561087b578061086581612e6c565b91506108749050600a83612db7565b9150610855565b60008167ffffffffffffffff8111156108a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156108ce576020820181803683370190505b5090505b8415610947576108e3600183612dea565b91506108f0600a86612e87565b6108fb906030612d9f565b60f81b81838151811061091e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610940600a86612db7565b94506108d2565b949350505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190612382565b90506060816000015115610fb65760056000908152600c602090815260c084015160ff90811683527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa690915260409091206001015416610bbc5760056000908152600c602090815260c084015160ff1682527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa690526040908190208151606081019092528054610bb792919082908290610a8b90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab790612e31565b8015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b5050509183525050600182015460ff1615156020820152600282018054604090920191610b3090612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90612e31565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050815250506121a4565b610bcd565b604051806020016040528060008152505b60046000908152600c602090815260a085015160ff90811683527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab809790915260409091206001015416610c7d5760046000908152600c602090815260a085015160ff1682527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab809790526040908190208151606081019092528054610c7892919082908290610a8b90612e31565b610c8e565b604051806020016040528060008152505b60036000908152600c6020908152608086015160ff90811683527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd790915260409091206001015416610d3e5760036000908152600c6020908152608086015160ff1682527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd790526040908190208151606081019092528054610d3992919082908290610a8b90612e31565b610d4f565b604051806020016040528060008152505b60026000908152600c6020908152606087015160ff90811683527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72090915260409091206001015416610dff5760026000908152600c602090815260608088015160ff1683527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72090915260409182902082519182019092528154610dfa929082908290610a8b90612e31565b610e10565b604051806020016040528060008152505b60016000818152600c602090815260408981015160ff90811684527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c9092529091209091015416610ebf5760016000908152600c602090815260408881015160ff1683527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c909152908190208151606081019092528054610eba92919082908290610a8b90612e31565b610ed0565b604051806020016040528060008152505b6000808052600c60209081528881015160ff90811683527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e890915260409091206001015416610f7a576000808052600c60209081528881015160ff1682527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e890526040908190208151606081019092528054610f7592919082908290610a8b90612e31565b610f8b565b604051806020016040528060008152505b604051602001610fa09695949392919061263a565b60405160208183030381529060405290506113a9565b600a6000908152600c602090815261016084015160ff90811683527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a09091526040909120600101541661106857600a6000908152600c602090815261016084015160ff1682527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a09052604090819020815160608101909252805461106392919082908290610a8b90612e31565b611079565b604051806020016040528060008152505b60096000908152600c602090815261014085015160ff90811683527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc3169091526040909120600101541661112b5760096000908152600c602090815261014085015160ff1682527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc3169052604090819020815160608101909252805461112692919082908290610a8b90612e31565b61113c565b604051806020016040528060008152505b60086000908152600c602090815261012086015160ff90811683527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df909152604090912060010154166111ee5760086000908152600c602090815261012086015160ff1682527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df905260409081902081516060810190925280546111e992919082908290610a8b90612e31565b6111ff565b604051806020016040528060008152505b60076000908152600c602090815261010087015160ff90811683527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971909152604090912060010154166112b15760076000908152600c602090815261010087015160ff1682527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971905260409081902081516060810190925280546112ac92919082908290610a8b90612e31565b6112c2565b604051806020016040528060008152505b60066000908152600c602090815260e088015160ff90811683527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b909152604090912060010154166113725760066000908152600c602090815260e088015160ff1682527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b9052604090819020815160608101909252805461136d92919082908290610a8b90612e31565b611383565b604051806020016040528060008152505b6040516020016113979594939291906125cf565b60405160208183030381529060405290505b806040516020016104b091906127ef565b60608151600014156113db57506040805160208101909152600081526104c4565b6000604051806060016040528060408152602001612ee5604091399050600060038451600261140a9190612d9f565b6114149190612db7565b61141f906004612dcb565b9050600061142e826020612d9f565b67ffffffffffffffff81111561145457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561147e576020820181803683370190505b509050818152600183018586518101602084015b818310156114ec5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611492565b600389510660018114611506576002811461151757611523565b613d3d60f01b600119830152611523565b603d60f81b6000198301525b509398975050505050505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561157c57600080fd5b505afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190612382565b90506060816000015115611ba057611720600160000180546115d590612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461160190612e31565b801561164e5780601f106116235761010080835404028352916020019161164e565b820191906000526020600020905b81548152906001019060200180831161163157829003601f168201915b50506000808052600c60209081528881015160ff1682527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e8905260409020805490935061169d92509050612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546116c990612e31565b80156117165780601f106116eb57610100808354040283529160200191611716565b820191906000526020600020905b8154815290600101906020018083116116f957829003601f168201915b5050505050612214565b6117fd60018001805461173290612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461175e90612e31565b80156117ab5780601f10611780576101008083540402835291602001916117ab565b820191906000526020600020905b81548152906001019060200180831161178e57829003601f168201915b505060016000908152600c602090815260408a81015160ff1683527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c9091529020805490935061169d92509050612e31565b6118db6001600201805461181090612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461183c90612e31565b80156118895780601f1061185e57610100808354040283529160200191611889565b820191906000526020600020905b81548152906001019060200180831161186c57829003601f168201915b505060026000908152600c602090815260608b015160ff1682527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd720905260409020805490935061169d92509050612e31565b6119b9600160030180546118ee90612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461191a90612e31565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b505060036000908152600c602090815260808c015160ff1682527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd7905260409020805490935061169d92509050612e31565b611a97600160040180546119cc90612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546119f890612e31565b8015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b505060046000908152600c602090815260a08d015160ff1682527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab8097905260409020805490935061169d92509050612e31565b611b7560016005018054611aaa90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad690612e31565b8015611b235780601f10611af857610100808354040283529160200191611b23565b820191906000526020600020905b815481529060010190602001808311611b0657829003601f168201915b505060056000908152600c602090815260c08e015160ff1682527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa6905260409020805490935061169d92509050612e31565b604051602001611b8a969594939291906126b9565b604051602081830303815290604052905061207c565b611c7e60016006018054611bb390612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdf90612e31565b8015611c2c5780601f10611c0157610100808354040283529160200191611c2c565b820191906000526020600020905b815481529060010190602001808311611c0f57829003601f168201915b505060066000908152600c602090815260e089015160ff1682527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b905260409020805490935061169d92509050612e31565b611d5d60016007018054611c9190612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbd90612e31565b8015611d0a5780601f10611cdf57610100808354040283529160200191611d0a565b820191906000526020600020905b815481529060010190602001808311611ced57829003601f168201915b505060076000908152600c60209081526101008a015160ff1682527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971905260409020805490935061169d92509050612e31565b611e3c60016008018054611d7090612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9c90612e31565b8015611de95780601f10611dbe57610100808354040283529160200191611de9565b820191906000526020600020905b815481529060010190602001808311611dcc57829003601f168201915b505060086000908152600c60209081526101208b015160ff1682527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df905260409020805490935061169d92509050612e31565b611f1b60016009018054611e4f90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7b90612e31565b8015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b505060096000908152600c60209081526101408c015160ff1682527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc316905260409020805490935061169d92509050612e31565b611ffa6001600a018054611f2e90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5a90612e31565b8015611fa75780601f10611f7c57610100808354040283529160200191611fa7565b820191906000526020600020905b815481529060010190602001808311611f8a57829003601f168201915b5050600a6000908152600c60209081526101608d015160ff1682527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a0905260409020805490935061169d92509050612e31565b6120556040518060400160405280600a81526020016952616e6b2053636f726560b01b815250600d89610180015160ff166004811061204957634e487b7160e01b600052603260045260246000fd5b01805461169d90612e31565b60405160200161206a969594939291906126b9565b60405160208183030381529060405290505b60115460408051630803163f60e31b8152905183926001600160a01b031691634018b1f8916004808301926020929190829003018186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f8919061249b565b85111561212457604051806040016040528060078152602001661123b2b710189160c91b815250612145565b604051806040016040528060078152602001661123b2b710181160c91b8152505b835161217057604051806040016040528060078152602001661120b634b2b71160c91b815250612192565b604051806040016040528060088152602001671126b0b934b7329160c11b8152505b6040516020016104b0939291906128dc565b60608160200151156121e95760405162461bcd60e51b815260206004820152600e60248201526d456d70747920747261697421212160901b604482015260640161017d565b81604001516040516020016121fe9190612ba3565b6040516020818303038152906040529050919050565b6060828260405160200161222992919061277e565b604051602081830303815290604052905092915050565b82805461224c90612e31565b90600052602060002090601f01602090048101928261226e57600085556122b4565b82601f1061228757805160ff19168380011785556122b4565b828001600101855582156122b4579182015b828111156122b4578251825591602001919060010190612299565b506122c09291506122c4565b5090565b5b808211156122c057600081556001016122c5565b60008083601f8401126122ea578182fd5b50813567ffffffffffffffff811115612301578182fd5b602083019150836020808302850101111561231b57600080fd5b9250929050565b80516104c481612ec7565b80516104c481612ed5565b600060208284031215612349578081fd5b81356001600160a01b038116811461235f578182fd5b9392505050565b600060208284031215612377578081fd5b813561235f81612ec7565b60006101a0808385031215612395578182fd5b61239e81612d60565b90506123a983612322565b81526123b76020840161232d565b60208201526123c86040840161232d565b60408201526123d96060840161232d565b60608201526123ea6080840161232d565b60808201526123fb60a0840161232d565b60a082015261240c60c0840161232d565b60c082015261241d60e0840161232d565b60e082015261010061243081850161232d565b9082015261012061244284820161232d565b9082015261014061245484820161232d565b9082015261016061246684820161232d565b9082015261018061247884820161232d565b908201529392505050565b600060208284031215612494578081fd5b5035919050565b6000602082840312156124ac578081fd5b5051919050565b6000602082840312156124c4578081fd5b813561235f81612ed5565b6000806000806000606086880312156124e6578081fd5b85356124f181612ed5565b9450602086013567ffffffffffffffff8082111561250d578283fd5b61251989838a016122d9565b90965094506040880135915080821115612531578283fd5b5061253e888289016122d9565b969995985093965092949392505050565b60008060408385031215612561578182fd5b823561256c81612ed5565b9150602083013561257c81612ed5565b809150509250929050565b6000815180845261259f816020860160208601612e01565b601f01601f19169290920160200192915050565b600081516125c5818560208601612e01565b9290920192915050565b600086516125e1818460208b01612e01565b8651908301906125f5818360208b01612e01565b8651910190612608818360208a01612e01565b855191019061261b818360208901612e01565b845191019061262e818360208801612e01565b01979650505050505050565b60008751602061264d8285838d01612e01565b8851918401916126608184848d01612e01565b88519201916126728184848c01612e01565b87519201916126848184848b01612e01565b86519201916126968184848a01612e01565b85519201916126a88184848901612e01565b919091019998505050505050505050565b6000875160206126cc8285838d01612e01565b8184019150600b60fa1b80835289516126eb8160018601858e01612e01565b6001930192830181905288516127078160028601858d01612e01565b6002930192830181905287516127238160038601858c01612e01565b60039301928301819052865161273f8160048601858b01612e01565b600493019283015284516127598160058501848901612e01565b61276f600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b6e3d913a3930b4ba2fba3cb832911d1160891b815282516000906127a981600f850160208801612e01565b6a1116113b30b63ab2911d1160a91b600f9184019182015283516127d481601a840160208801612e01565b61227d60f01b601a9290910191820152601c01949350505050565b60007f3c7376672069643d226d6e614e4654222077696474683d22313030252220686582527f696768743d2231303025222076657273696f6e3d22312e31222076696577426f60208301527f783d22302030203130383820313038382220786d6c6e733d22687474703a2f2f60408301527f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b60608301527f3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e608083015282516128bf8160a0850160208701612e01565b651e17b9bb339f60d11b60a093909101928301525060a601919050565b6000605b60f81b825284516128f8816001850160208901612e01565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b60218201528451612941816024840160208901612e01565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a0060249290910191820152835161297f816043840160208801612e01565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b815284516000906129c181600a850160208a01612e01565b8551908301906129d881600a840160208a01612e01565b7f222c20226465736372697074696f6e223a202253706163652047616d65206973600a92909101918201527f20612031303025206f6e2d636861696e20636f6c6c65637469626c6520626173602a8201527f6564207374726174656779205056452067616d652e204c657665726167696e67604a8201527f20626f7468204c312026204c322e20416c6c206d6574616461746120616e6420606a8201527f706978656c2073707269746573206172652067656e65726174656420616e6420608a8201527f73746f72656420636f6d706c6574656c79206f6e2d636861696e2e204e6f204160aa8201527f504920616e6420495046532061726520757365642e222c2022696d616765223a60ca8201527f2022646174613a696d6167652f7376672b786d6c3b6261736536342c0000000060ea820152612b53612b46612b40612b246101068501896125b3565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b866125b3565b607d60f81b815260010190565b979650505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251612b9681601d850160208701612e01565b91909101601d0192915050565b60007f3c696d61676520783d2233322220793d223332222077696474683d223130323482527f22206865696768743d22313032342220696d6167652d72656e646572696e673d60208301527f22706978656c6174656422207072657365727665417370656374526174696f3d60408301527f22784d6964594d69642220786c696e6b3a687265663d22646174613a696d616760608301526c194bdc1b99ced8985cd94d8d0b609a1b60808301528251612c6381608d850160208701612e01565b6211179f60e91b608d939091019283015250609001919050565b60006020825261235f6020830184612587565b600060608252612ca36060830186612587565b84151560208401528281036040840152612cbd8185612587565b9695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112612d12578283fd5b83018035915067ffffffffffffffff821115612d2c578283fd5b60200191503681900382131561231b57600080fd5b60008235605e19833603018112612d56578182fd5b9190910192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9757634e487b7160e01b600052604160045260246000fd5b604052919050565b60008219821115612db257612db2612e9b565b500190565b600082612dc657612dc6612eb1565b500490565b6000816000190483118215151615612de557612de5612e9b565b500290565b600082821015612dfc57612dfc612e9b565b500390565b60005b83811015612e1c578181015183820152602001612e04565b83811115612e2b576000848401525b50505050565b600281046001821680612e4557607f821691505b60208210811415612e6657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e8057612e80612e9b565b5060010190565b600082612e9657612e96612eb1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b80151581146107d957600080fd5b60ff811681146107d957600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220950f2fa7854d0d36d9fc1387c1b2a34b488b61aaabdaeabf0478bf79cda9668264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639bf2ee351161005b5780639bf2ee35146100eb578063c87b56dd1461010d578063d8f320471461012d578063f2fde38b1461014057610088565b8063357bad8c1461008d578063604ca525146100bd578063715018a6146100d25780638da5cb5b146100da575b600080fd5b6011546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004612338565b610153565b005b6100d06101a8565b6000546001600160a01b03166100a0565b6100fe6100f936600461254f565b6101de565b6040516100b493929190612c90565b61012061011b366004612483565b610324565b6040516100b49190612c7d565b6100d061013b3660046124cf565b6104c9565b6100d061014e366004612338565b610741565b6000546001600160a01b031633146101865760405162461bcd60e51b815260040161017d90612cc7565b60405180910390fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101d25760405162461bcd60e51b815260040161017d90612cc7565b6101dc60006107dc565b565b600c60209081526000928352604080842090915290825290208054819061020490612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461023090612e31565b801561027d5780601f106102525761010080835404028352916020019161027d565b820191906000526020600020905b81548152906001019060200180831161026057829003601f168201915b5050506001840154600285018054949560ff9092169491935091506102a190612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd90612e31565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050905083565b6011546060906001600160a01b0316336001600160a01b03161461037e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b604482015260640161017d565b6011546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101a06040518083038186803b1580156103c457600080fd5b505afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc9190612382565b90506000816000015161042e5760405180604001604052806007815260200166416c69656e202360c81b815250610450565b604051806040016040528060088152602001674d6172696e65202360c01b8152505b6104598561082c565b61046a6104658761094f565b6113ba565b61047387611531565b604051602001610486949392919061299b565b60405160208183030381529060405290506104a0816113ba565b6040516020016104b09190612b5e565b604051602081830303815290604052925050505b919050565b6000546001600160a01b031633146104f35760405162461bcd60e51b815260040161017d90612cc7565b8281146105365760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b604482015260640161017d565b60005b8181101561073957604051806060016040528084848481811061056c57634e487b7160e01b600052603260045260246000fd5b905060200281019061057e9190612d41565b6105889080612cfc565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106105e257634e487b7160e01b600052603260045260246000fd5b90506020028101906105f49190612d41565b610605906040810190602001612366565b1515815260200184848481811061062c57634e487b7160e01b600052603260045260246000fd5b905060200281019061063e9190612d41565b61064c906040810190612cfc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152600c6020526040812091508787858181106106b357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106c891906124b3565b60ff1681526020808201929092526040016000208251805191926106f192849290910190612240565b5060208281015160018301805460ff1916911515919091179055604083015180516107229260028501920190612240565b50905050808061073190612e6c565b915050610539565b505050505050565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161017d90612cc7565b6001600160a01b0381166107d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017d565b6107d9816107dc565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161085157506040805180820190915260018152600360fc1b60208201526104c4565b8160005b811561087b578061086581612e6c565b91506108749050600a83612db7565b9150610855565b60008167ffffffffffffffff8111156108a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156108ce576020820181803683370190505b5090505b8415610947576108e3600183612dea565b91506108f0600a86612e87565b6108fb906030612d9f565b60f81b81838151811061091e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610940600a86612db7565b94506108d2565b949350505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190612382565b90506060816000015115610fb65760056000908152600c602090815260c084015160ff90811683527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa690915260409091206001015416610bbc5760056000908152600c602090815260c084015160ff1682527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa690526040908190208151606081019092528054610bb792919082908290610a8b90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab790612e31565b8015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b5050509183525050600182015460ff1615156020820152600282018054604090920191610b3090612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90612e31565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050815250506121a4565b610bcd565b604051806020016040528060008152505b60046000908152600c602090815260a085015160ff90811683527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab809790915260409091206001015416610c7d5760046000908152600c602090815260a085015160ff1682527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab809790526040908190208151606081019092528054610c7892919082908290610a8b90612e31565b610c8e565b604051806020016040528060008152505b60036000908152600c6020908152608086015160ff90811683527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd790915260409091206001015416610d3e5760036000908152600c6020908152608086015160ff1682527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd790526040908190208151606081019092528054610d3992919082908290610a8b90612e31565b610d4f565b604051806020016040528060008152505b60026000908152600c6020908152606087015160ff90811683527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72090915260409091206001015416610dff5760026000908152600c602090815260608088015160ff1683527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72090915260409182902082519182019092528154610dfa929082908290610a8b90612e31565b610e10565b604051806020016040528060008152505b60016000818152600c602090815260408981015160ff90811684527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c9092529091209091015416610ebf5760016000908152600c602090815260408881015160ff1683527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c909152908190208151606081019092528054610eba92919082908290610a8b90612e31565b610ed0565b604051806020016040528060008152505b6000808052600c60209081528881015160ff90811683527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e890915260409091206001015416610f7a576000808052600c60209081528881015160ff1682527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e890526040908190208151606081019092528054610f7592919082908290610a8b90612e31565b610f8b565b604051806020016040528060008152505b604051602001610fa09695949392919061263a565b60405160208183030381529060405290506113a9565b600a6000908152600c602090815261016084015160ff90811683527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a09091526040909120600101541661106857600a6000908152600c602090815261016084015160ff1682527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a09052604090819020815160608101909252805461106392919082908290610a8b90612e31565b611079565b604051806020016040528060008152505b60096000908152600c602090815261014085015160ff90811683527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc3169091526040909120600101541661112b5760096000908152600c602090815261014085015160ff1682527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc3169052604090819020815160608101909252805461112692919082908290610a8b90612e31565b61113c565b604051806020016040528060008152505b60086000908152600c602090815261012086015160ff90811683527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df909152604090912060010154166111ee5760086000908152600c602090815261012086015160ff1682527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df905260409081902081516060810190925280546111e992919082908290610a8b90612e31565b6111ff565b604051806020016040528060008152505b60076000908152600c602090815261010087015160ff90811683527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971909152604090912060010154166112b15760076000908152600c602090815261010087015160ff1682527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971905260409081902081516060810190925280546112ac92919082908290610a8b90612e31565b6112c2565b604051806020016040528060008152505b60066000908152600c602090815260e088015160ff90811683527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b909152604090912060010154166113725760066000908152600c602090815260e088015160ff1682527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b9052604090819020815160608101909252805461136d92919082908290610a8b90612e31565b611383565b604051806020016040528060008152505b6040516020016113979594939291906125cf565b60405160208183030381529060405290505b806040516020016104b091906127ef565b60608151600014156113db57506040805160208101909152600081526104c4565b6000604051806060016040528060408152602001612ee5604091399050600060038451600261140a9190612d9f565b6114149190612db7565b61141f906004612dcb565b9050600061142e826020612d9f565b67ffffffffffffffff81111561145457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561147e576020820181803683370190505b509050818152600183018586518101602084015b818310156114ec5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611492565b600389510660018114611506576002811461151757611523565b613d3d60f01b600119830152611523565b603d60f81b6000198301525b509398975050505050505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b15801561157c57600080fd5b505afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190612382565b90506060816000015115611ba057611720600160000180546115d590612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461160190612e31565b801561164e5780601f106116235761010080835404028352916020019161164e565b820191906000526020600020905b81548152906001019060200180831161163157829003601f168201915b50506000808052600c60209081528881015160ff1682527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e8905260409020805490935061169d92509050612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546116c990612e31565b80156117165780601f106116eb57610100808354040283529160200191611716565b820191906000526020600020905b8154815290600101906020018083116116f957829003601f168201915b5050505050612214565b6117fd60018001805461173290612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461175e90612e31565b80156117ab5780601f10611780576101008083540402835291602001916117ab565b820191906000526020600020905b81548152906001019060200180831161178e57829003601f168201915b505060016000908152600c602090815260408a81015160ff1683527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c9091529020805490935061169d92509050612e31565b6118db6001600201805461181090612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461183c90612e31565b80156118895780601f1061185e57610100808354040283529160200191611889565b820191906000526020600020905b81548152906001019060200180831161186c57829003601f168201915b505060026000908152600c602090815260608b015160ff1682527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd720905260409020805490935061169d92509050612e31565b6119b9600160030180546118ee90612e31565b80601f016020809104026020016040519081016040528092919081815260200182805461191a90612e31565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b505060036000908152600c602090815260808c015160ff1682527fc0da782485e77ae272268ae0a3ff44c1552ecb60b3743924de17a815e0a3cfd7905260409020805490935061169d92509050612e31565b611a97600160040180546119cc90612e31565b80601f01602080910402602001604051908101604052809291908181526020018280546119f890612e31565b8015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b505060046000908152600c602090815260a08d015160ff1682527f5b84bb9e0f5aa9cc45a8bb66468db5d4816d1e75ff86b5e1f1dd8d144dab8097905260409020805490935061169d92509050612e31565b611b7560016005018054611aaa90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad690612e31565b8015611b235780601f10611af857610100808354040283529160200191611b23565b820191906000526020600020905b815481529060010190602001808311611b0657829003601f168201915b505060056000908152600c602090815260c08e015160ff1682527f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa6905260409020805490935061169d92509050612e31565b604051602001611b8a969594939291906126b9565b604051602081830303815290604052905061207c565b611c7e60016006018054611bb390612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdf90612e31565b8015611c2c5780601f10611c0157610100808354040283529160200191611c2c565b820191906000526020600020905b815481529060010190602001808311611c0f57829003601f168201915b505060066000908152600c602090815260e089015160ff1682527f980f427e00e74f6d338adfccc7468518c8c8ea00836d0dce98c5fe154e17bf2b905260409020805490935061169d92509050612e31565b611d5d60016007018054611c9190612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbd90612e31565b8015611d0a5780601f10611cdf57610100808354040283529160200191611d0a565b820191906000526020600020905b815481529060010190602001808311611ced57829003601f168201915b505060076000908152600c60209081526101008a015160ff1682527fdae089abd7155aa13ce498edb0d7a7156b783d015031f10c9a3d4f5fcb518971905260409020805490935061169d92509050612e31565b611e3c60016008018054611d7090612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9c90612e31565b8015611de95780601f10611dbe57610100808354040283529160200191611de9565b820191906000526020600020905b815481529060010190602001808311611dcc57829003601f168201915b505060086000908152600c60209081526101208b015160ff1682527f5ff1be3842b54290a9d10674244dae5848d2371b5314790c54805c086586e1df905260409020805490935061169d92509050612e31565b611f1b60016009018054611e4f90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7b90612e31565b8015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b505060096000908152600c60209081526101408c015160ff1682527f2fb3c9afecd3f0d43923381d3e9f60168c039b98f0b7120382e81b682b7bc316905260409020805490935061169d92509050612e31565b611ffa6001600a018054611f2e90612e31565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5a90612e31565b8015611fa75780601f10611f7c57610100808354040283529160200191611fa7565b820191906000526020600020905b815481529060010190602001808311611f8a57829003601f168201915b5050600a6000908152600c60209081526101608d015160ff1682527f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a0905260409020805490935061169d92509050612e31565b6120556040518060400160405280600a81526020016952616e6b2053636f726560b01b815250600d89610180015160ff166004811061204957634e487b7160e01b600052603260045260246000fd5b01805461169d90612e31565b60405160200161206a969594939291906126b9565b60405160208183030381529060405290505b60115460408051630803163f60e31b8152905183926001600160a01b031691634018b1f8916004808301926020929190829003018186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f8919061249b565b85111561212457604051806040016040528060078152602001661123b2b710189160c91b815250612145565b604051806040016040528060078152602001661123b2b710181160c91b8152505b835161217057604051806040016040528060078152602001661120b634b2b71160c91b815250612192565b604051806040016040528060088152602001671126b0b934b7329160c11b8152505b6040516020016104b0939291906128dc565b60608160200151156121e95760405162461bcd60e51b815260206004820152600e60248201526d456d70747920747261697421212160901b604482015260640161017d565b81604001516040516020016121fe9190612ba3565b6040516020818303038152906040529050919050565b6060828260405160200161222992919061277e565b604051602081830303815290604052905092915050565b82805461224c90612e31565b90600052602060002090601f01602090048101928261226e57600085556122b4565b82601f1061228757805160ff19168380011785556122b4565b828001600101855582156122b4579182015b828111156122b4578251825591602001919060010190612299565b506122c09291506122c4565b5090565b5b808211156122c057600081556001016122c5565b60008083601f8401126122ea578182fd5b50813567ffffffffffffffff811115612301578182fd5b602083019150836020808302850101111561231b57600080fd5b9250929050565b80516104c481612ec7565b80516104c481612ed5565b600060208284031215612349578081fd5b81356001600160a01b038116811461235f578182fd5b9392505050565b600060208284031215612377578081fd5b813561235f81612ec7565b60006101a0808385031215612395578182fd5b61239e81612d60565b90506123a983612322565b81526123b76020840161232d565b60208201526123c86040840161232d565b60408201526123d96060840161232d565b60608201526123ea6080840161232d565b60808201526123fb60a0840161232d565b60a082015261240c60c0840161232d565b60c082015261241d60e0840161232d565b60e082015261010061243081850161232d565b9082015261012061244284820161232d565b9082015261014061245484820161232d565b9082015261016061246684820161232d565b9082015261018061247884820161232d565b908201529392505050565b600060208284031215612494578081fd5b5035919050565b6000602082840312156124ac578081fd5b5051919050565b6000602082840312156124c4578081fd5b813561235f81612ed5565b6000806000806000606086880312156124e6578081fd5b85356124f181612ed5565b9450602086013567ffffffffffffffff8082111561250d578283fd5b61251989838a016122d9565b90965094506040880135915080821115612531578283fd5b5061253e888289016122d9565b969995985093965092949392505050565b60008060408385031215612561578182fd5b823561256c81612ed5565b9150602083013561257c81612ed5565b809150509250929050565b6000815180845261259f816020860160208601612e01565b601f01601f19169290920160200192915050565b600081516125c5818560208601612e01565b9290920192915050565b600086516125e1818460208b01612e01565b8651908301906125f5818360208b01612e01565b8651910190612608818360208a01612e01565b855191019061261b818360208901612e01565b845191019061262e818360208801612e01565b01979650505050505050565b60008751602061264d8285838d01612e01565b8851918401916126608184848d01612e01565b88519201916126728184848c01612e01565b87519201916126848184848b01612e01565b86519201916126968184848a01612e01565b85519201916126a88184848901612e01565b919091019998505050505050505050565b6000875160206126cc8285838d01612e01565b8184019150600b60fa1b80835289516126eb8160018601858e01612e01565b6001930192830181905288516127078160028601858d01612e01565b6002930192830181905287516127238160038601858c01612e01565b60039301928301819052865161273f8160048601858b01612e01565b600493019283015284516127598160058501848901612e01565b61276f600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b6e3d913a3930b4ba2fba3cb832911d1160891b815282516000906127a981600f850160208801612e01565b6a1116113b30b63ab2911d1160a91b600f9184019182015283516127d481601a840160208801612e01565b61227d60f01b601a9290910191820152601c01949350505050565b60007f3c7376672069643d226d6e614e4654222077696474683d22313030252220686582527f696768743d2231303025222076657273696f6e3d22312e31222076696577426f60208301527f783d22302030203130383820313038382220786d6c6e733d22687474703a2f2f60408301527f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b60608301527f3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e608083015282516128bf8160a0850160208701612e01565b651e17b9bb339f60d11b60a093909101928301525060a601919050565b6000605b60f81b825284516128f8816001850160208901612e01565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b60218201528451612941816024840160208901612e01565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a0060249290910191820152835161297f816043840160208801612e01565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b815284516000906129c181600a850160208a01612e01565b8551908301906129d881600a840160208a01612e01565b7f222c20226465736372697074696f6e223a202253706163652047616d65206973600a92909101918201527f20612031303025206f6e2d636861696e20636f6c6c65637469626c6520626173602a8201527f6564207374726174656779205056452067616d652e204c657665726167696e67604a8201527f20626f7468204c312026204c322e20416c6c206d6574616461746120616e6420606a8201527f706978656c2073707269746573206172652067656e65726174656420616e6420608a8201527f73746f72656420636f6d706c6574656c79206f6e2d636861696e2e204e6f204160aa8201527f504920616e6420495046532061726520757365642e222c2022696d616765223a60ca8201527f2022646174613a696d6167652f7376672b786d6c3b6261736536342c0000000060ea820152612b53612b46612b40612b246101068501896125b3565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b866125b3565b607d60f81b815260010190565b979650505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251612b9681601d850160208701612e01565b91909101601d0192915050565b60007f3c696d61676520783d2233322220793d223332222077696474683d223130323482527f22206865696768743d22313032342220696d6167652d72656e646572696e673d60208301527f22706978656c6174656422207072657365727665417370656374526174696f3d60408301527f22784d6964594d69642220786c696e6b3a687265663d22646174613a696d616760608301526c194bdc1b99ced8985cd94d8d0b609a1b60808301528251612c6381608d850160208701612e01565b6211179f60e91b608d939091019283015250609001919050565b60006020825261235f6020830184612587565b600060608252612ca36060830186612587565b84151560208401528281036040840152612cbd8185612587565b9695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112612d12578283fd5b83018035915067ffffffffffffffff821115612d2c578283fd5b60200191503681900382131561231b57600080fd5b60008235605e19833603018112612d56578182fd5b9190910192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9757634e487b7160e01b600052604160045260246000fd5b604052919050565b60008219821115612db257612db2612e9b565b500190565b600082612dc657612dc6612eb1565b500490565b6000816000190483118215151615612de557612de5612e9b565b500290565b600082821015612dfc57612dfc612e9b565b500390565b60005b83811015612e1c578181015183820152602001612e04565b83811115612e2b576000848401525b50505050565b600281046001821680612e4557607f821691505b60208210811415612e6657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e8057612e80612e9b565b5060010190565b600082612e9657612e96612eb1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b80151581146107d957600080fd5b60ff811681146107d957600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220950f2fa7854d0d36d9fc1387c1b2a34b488b61aaabdaeabf0478bf79cda9668264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the ID of the token to generate the metadata for"
        },
        "returns": {
          "_0": "a base64 encoded JSON dictionary of the token's metadata and SVG"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uploadTraits(uint8,uint8[],(string,bool,string)[])": {
        "params": {
          "traitType": "the trait type to upload the traits for (see traitTypes for a mapping)",
          "traits": "the names, empty flags and base64 encoded PNGs for each trait"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenURI(uint256)": {
        "notice": "generates a base64 encoded metadata response without referencing off-chain content"
      },
      "uploadTraits(uint8,uint8[],(string,bool,string)[])": {
        "notice": "administrative to upload the names and images associated with each trait"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1512,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10827,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)11_storage"
      },
      {
        "astId": 10834,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)10811_storage))"
      },
      {
        "astId": 10843,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_ranks",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 10846,
        "contract": "contracts/Traits.sol:Traits",
        "label": "mnaNFT",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IMnA)11667"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)11_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMnA)11667": {
        "encoding": "inplace",
        "label": "contract IMnA",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)10811_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint8 => struct Traits.Trait))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_struct(Trait)10811_storage)"
      },
      "t_mapping(t_uint8,t_struct(Trait)10811_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Traits.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)10811_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)10811_storage": {
        "encoding": "inplace",
        "label": "struct Traits.Trait",
        "members": [
          {
            "astId": 10806,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10808,
            "contract": "contracts/Traits.sol:Traits",
            "label": "isEmpty",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 10810,
            "contract": "contracts/Traits.sol:Traits",
            "label": "png",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}