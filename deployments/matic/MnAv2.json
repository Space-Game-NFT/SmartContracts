{
  "address": "0x017bd8887521444ff8Fbce992A37a2FE53057149",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlienBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarineBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEAD_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "existingCombinations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isMarine",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "M_Weapon",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Back",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Headgear",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Emblem",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Headgear",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Eye",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Back",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rankIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMnA.MarineAlien",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenWriteBlock",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMarine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "klaye",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "klayeTokenForCoolDown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelMath",
      "outputs": [
        {
          "internalType": "contract ILevelMath",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mnaV1",
      "outputs": [
        {
          "internalType": "contract IMnA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ores",
      "outputs": [
        {
          "internalType": "contract IORES",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "oresTokenForLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "resetCoolDown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mnaV1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ores",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_klaye",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_levelMath",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "tokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "updateOriginAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "upgradeEpoches",
      "outputs": [
        {
          "internalType": "bool",
          "name": "skipped",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "upgradeLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fccdf7f90d8ef798e4ee25ad510dbd58ef622076f432c5d821de237359e2111",
  "receipt": {
    "to": null,
    "from": "0xD98bfa55c0491f58c6802e69CAC9a9F72c47B1CE",
    "contractAddress": "0x017bd8887521444ff8Fbce992A37a2FE53057149",
    "transactionIndex": 74,
    "gasUsed": "3659650",
    "logsBloom": "0x
    "blockHash": "0xb7c60d6f26cfb1466ce1034be8832585a633624be35ff0da7ec6d079de218ddc",
    "transactionHash": "0x2fccdf7f90d8ef798e4ee25ad510dbd58ef622076f432c5d821de237359e2111",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 27277558,
        "transactionHash": "0x2fccdf7f90d8ef798e4ee25ad510dbd58ef622076f432c5d821de237359e2111",
        "address": "0x017bd8887521444ff8Fbce992A37a2FE53057149",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d98bfa55c0491f58c6802e69cac9a9f72c47b1ce"
        ],
        "data": "0x",
        "logIndex": 274,
        "blockHash": "0xb7c60d6f26cfb1466ce1034be8832585a633624be35ff0da7ec6d079de218ddc"
      },
      {
        "transactionIndex": 74,
        "blockNumber": 27277558,
        "transactionHash": "0x2fccdf7f90d8ef798e4ee25ad510dbd58ef622076f432c5d821de237359e2111",
        "address": "0x017bd8887521444ff8Fbce992A37a2FE53057149",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000d98bfa55c0491f58c6802e69cac9a9f72c47b1ce",
        "logIndex": 275,
        "blockHash": "0xb7c60d6f26cfb1466ce1034be8832585a633624be35ff0da7ec6d079de218ddc"
      },
      {
        "transactionIndex": 74,
        "blockNumber": 27277558,
        "transactionHash": "0x2fccdf7f90d8ef798e4ee25ad510dbd58ef622076f432c5d821de237359e2111",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d98bfa55c0491f58c6802e69cac9a9f72c47b1ce",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x000000000000000000000000000000000000000000000000030c19598069e4820000000000000000000000000000000000000000000000004f95fe482c2bdda10000000000000000000000000000000000000000000001dd4d783e48866946040000000000000000000000000000000000000000000000004c89e4eeabc1f91f0000000000000000000000000000000000000000000001dd508457a206d32a86",
        "logIndex": 276,
        "blockHash": "0xb7c60d6f26cfb1466ce1034be8832585a633624be35ff0da7ec6d079de218ddc"
      }
    ],
    "blockNumber": 27277558,
    "cumulativeGasUsed": "14479313",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fb03553b676fe9e8a8f0650bb1f56f7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlienBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarineBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingCombinations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMarine\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"M_Weapon\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Back\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Headgear\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Emblem\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Headgear\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Eye\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Back\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rankIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IMnA.MarineAlien\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenWriteBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMarine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"klaye\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"klayeTokenForCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelMath\",\"outputs\":[{\"internalType\":\"contract ILevelMath\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnaV1\",\"outputs\":[{\"internalType\":\"contract IMnA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ores\",\"outputs\":[{\"internalType\":\"contract IORES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"oresTokenForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"resetCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mnaV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ores\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_klaye\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_levelMath\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"updateOriginAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeEpoches\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"skipped\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"upgradeLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"params\":{\"addr\":\"the address to enable\"}},\"isMarine(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to check\"},\"returns\":{\"_0\":\"marine - whether or not a token is a Marines\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAdmin(address)\":{\"params\":{\"addr\":\"the address to disbale\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetCoolDown(uint256[])\":{\"params\":{\"tokenIds\":\"- The token ids what you're going to reset\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeLevel(uint256[])\":{\"params\":{\"tokenIds\":\"- The token ids what you're going to upgrade\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"enables an address to mint / burn\"},\"burn(uint256)\":{\"notice\":\"Burn a token - any game logic should be handled before this function.\"},\"claimTokens(uint256[])\":{\"notice\":\"Claims the MnAv2 tokens by burning some MnAv2 tokens. Used to avoid estimateGas failure\"},\"isMarine(uint256)\":{\"notice\":\"checks if a token is a Marines\"},\"klayeTokenForCoolDown(uint256)\":{\"notice\":\"Gets the number of $KLAYE tokens for the specific level\"},\"oresTokenForLevel(uint256)\":{\"notice\":\"Gets the number of $ORES tokens for the specific level\"},\"removeAdmin(address)\":{\"notice\":\"disables an address from minting / burning\"},\"resetCoolDown(uint256[])\":{\"notice\":\"Resets cooldown time to upgrade immediately.\"},\"setPaused(bool)\":{\"notice\":\"enables owner to pause / unpause minting\"},\"upgradeLevel(uint256[])\":{\"notice\":\"Upgrades current level upto next one. $ORES token is required to do.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MnAv2.sol\":\"MnAv2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MnAv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\nimport \\\"./interfaces/IORES.sol\\\";\\nimport \\\"./interfaces/IMnAv2.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/ILevelMath.sol\\\";\\n\\nimport \\\"./libraries/ERC721A.sol\\\";\\n\\ncontract MnAv2 is IMnAv2, IERC721Receiver, ERC721Enumerable, Ownable, Pausable {\\n  struct LastWrite {\\n    uint64 time;\\n    uint64 blockNum;\\n  }\\n\\n  struct UpgradeEpoch {\\n    bool skipped;\\n    uint256 lastUpdate;\\n  }\\n\\n  event MarineBurned(uint256 indexed tokenId);\\n  event AlienBurned(uint256 indexed tokenId);\\n\\n  // number of tokens have been minted so far\\n  uint16 public override minted;\\n\\n  uint256 public MAX_LEVEL = 69;\\n\\n  // mapping from tokenId to level number\\n  mapping(uint256 => uint256) private tokenLevels;\\n  // mapping from tokenId to UpgradeEpoch\\n  mapping(uint256 => UpgradeEpoch) public upgradeEpoches;\\n  // mapping from tokenId to a struct containing the token's traits\\n  mapping(uint256 => IMnA.MarineAlien) private tokenTraits;\\n  // mapping from hashed(tokenTrait) to the tokenId it's associated with\\n  // used to ensure there are no duplicates\\n  mapping(uint256 => uint256) public existingCombinations;\\n  // Tracks the last block and timestamp that a caller has written to state.\\n  // Disallow some access to functions if they occur while a change is being written.\\n\\n  mapping(address => LastWrite) private lastWriteAddress;\\n  mapping(uint256 => LastWrite) private lastWriteToken;\\n\\n  address public DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n  // reference to Traits\\n  ITraits public traits;\\n\\n  // MnA v1 address\\n  IMnA public mnaV1;\\n\\n  // ORES token address\\n  IORES public ores;\\n\\n  // KLAYE token address\\n  IERC20 public klaye;\\n\\n  // LevelMath contract address\\n  ILevelMath public levelMath;\\n\\n  // address => allowedToCallFunctions\\n  mapping(address => bool) private admins;\\n\\n  constructor() ERC721(\\\"Marines & Aliens Game v2\\\", \\\"MnAv2\\\") {\\n    _pause();\\n  }\\n\\n  modifier requireContractsSet() {\\n    require(\\n      address(traits) != address(0) &&\\n        address(mnaV1) != address(0) &&\\n        address(ores) != address(0) &&\\n        address(levelMath) != address(0) &&\\n        address(klaye) != address(0),\\n      \\\"Contracts not set\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier blockIfChangingAddress() {\\n    // frens can always call whenever they want :)\\n    require(\\n      admins[_msgSender()] ||\\n        lastWriteAddress[tx.origin].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier blockIfChangingToken(uint256 tokenId) {\\n    // frens can always call whenever they want :)\\n    require(\\n      admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    _;\\n  }\\n\\n  function setContracts(\\n    address _mnaV1,\\n    address _traits,\\n    address _ores,\\n    address _klaye,\\n    address _levelMath\\n  ) external onlyOwner {\\n    mnaV1 = IMnA(_mnaV1);\\n    traits = ITraits(_traits);\\n    ores = IORES(_ores);\\n    klaye = IERC20(_klaye);\\n    levelMath = ILevelMath(_levelMath);\\n  }\\n\\n  /**\\n   * Mint a token - any payment / game logic should be handled in the game contract.\\n   * This will just generate random traits and mint a token to a designated address.\\n   */\\n  function mintInternal(address recipient, uint256 tokenId)\\n    internal\\n    whenNotPaused\\n  {\\n    minted++;\\n    upgradeEpoches[tokenId] = UpgradeEpoch(false, block.timestamp);\\n    _safeMint(recipient, tokenId);\\n  }\\n\\n  function getTokenWriteBlock(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint64)\\n  {\\n    require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n    return lastWriteToken[tokenId].blockNum;\\n  }\\n\\n  /**\\n   * Claims the MnAv2 tokens by burning some MnAv2 tokens.\\n   * Used to avoid estimateGas failure\\n   */\\n  function claimTokens(uint256[] calldata tokenIds) external whenNotPaused {\\n    for (uint256 index = 0; index < tokenIds.length; index++) {\\n      uint256 tokenId = tokenIds[index];\\n      require(mnaV1.ownerOf(tokenId) == msg.sender, \\\"not owner\\\");\\n      IMnA.MarineAlien memory s = mnaV1.getTokenTraits(tokenId);\\n      tokenTraits[tokenId] = s;\\n      mnaV1.safeTransferFrom(msg.sender, DEAD_ADDRESS, tokenId);\\n      mintInternal(msg.sender, tokenId);\\n    }\\n  }\\n\\n  /**\\n   * Upgrades current level upto next one. $ORES token is required to do.\\n   * @param tokenIds - The token ids what you're going to upgrade\\n   */\\n  function upgradeLevel(uint256[] calldata tokenIds)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    require(tokenIds.length > 0, \\\"invalid param\\\");\\n    uint256 totalOresToken = 0;\\n    for (uint256 index = 0; index < tokenIds.length; index++) {\\n      uint256 tokenId = tokenIds[index];\\n      uint256 tokenLevel = tokenLevels[tokenId];\\n      require(ownerOf(tokenId) == msg.sender, \\\"not owner\\\");\\n      require(tokenLevel <= MAX_LEVEL, \\\"Already max level\\\");\\n      UpgradeEpoch memory upgradeEpoch = upgradeEpoches[tokenId];\\n      ILevelMath.LevelEpoch memory levelEpoch = levelMath.getLevelEpoch(\\n        tokenLevel\\n      );\\n      if (!upgradeEpoch.skipped) {\\n        require(\\n          upgradeEpoch.lastUpdate + levelEpoch.coolDownTime < block.timestamp,\\n          \\\"needs to wait for the cooldown duration\\\"\\n        );\\n      }\\n\\n      totalOresToken += levelEpoch.oresToken;\\n      tokenLevels[tokenId] = tokenLevel + 1;\\n      upgradeEpoches[tokenId] = UpgradeEpoch(false, block.timestamp);\\n    }\\n    require(ores.transferFrom(msg.sender, DEAD_ADDRESS, totalOresToken));\\n  }\\n\\n  /**\\n   * Resets cooldown time to upgrade immediately.\\n   * @param tokenIds - The token ids what you're going to reset\\n   */\\n  function resetCoolDown(uint256[] calldata tokenIds)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    require(tokenIds.length > 0, \\\"invalid param\\\");\\n    uint256 totalKlayeToken = 0;\\n    for (uint256 index = 0; index < tokenIds.length; index++) {\\n      uint256 tokenId = tokenIds[index];\\n      uint256 tokenLevel = tokenLevels[tokenId];\\n      require(tokenLevel <= MAX_LEVEL, \\\"already max level\\\");\\n\\n      UpgradeEpoch memory upgradeEpoch = upgradeEpoches[tokenId];\\n      ILevelMath.LevelEpoch memory levelEpoch = levelMath.getLevelEpoch(\\n        tokenLevel\\n      );\\n      require(!upgradeEpoch.skipped, \\\"already reset\\\");\\n      totalKlayeToken += levelEpoch.klayeToSkip;\\n      upgradeEpoches[tokenId] = UpgradeEpoch(true, block.timestamp);\\n    }\\n    require(klaye.transferFrom(msg.sender, DEAD_ADDRESS, totalKlayeToken));\\n  }\\n\\n  /**\\n   * Burn a token - any game logic should be handled before this function.\\n   */\\n  function burn(uint256 tokenId) external whenNotPaused {\\n    require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n    require(ownerOf(tokenId) == tx.origin, \\\"Oops you don't own that\\\");\\n    if (tokenTraits[tokenId].isMarine) {\\n      emit MarineBurned(tokenId);\\n    } else {\\n      emit AlienBurned(tokenId);\\n    }\\n    _burn(tokenId);\\n  }\\n\\n  function updateOriginAccess(uint16[] memory tokenIds) external override {\\n    require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n    uint64 blockNum = uint64(block.number);\\n    uint64 time = uint64(block.timestamp);\\n    lastWriteAddress[tx.origin] = LastWrite(time, blockNum);\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      lastWriteToken[tokenIds[i]] = LastWrite(time, blockNum);\\n    }\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n    // allow admin contracts to be send without approval\\n    if (!admins[_msgSender()]) {\\n      require(\\n        _isApprovedOrOwner(_msgSender(), tokenId),\\n        \\\"ERC721: transfer caller is not owner nor approved\\\"\\n      );\\n    }\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /** READ */\\n\\n  /**\\n   * Gets the number of $ORES tokens for the specific level\\n   */\\n  function oresTokenForLevel(uint256 level) public view returns (uint256) {}\\n\\n  /**\\n   * Gets the number of $KLAYE tokens for the specific level\\n   */\\n  function klayeTokenForCoolDown(uint256 level) public view returns (uint256) {}\\n\\n  /**\\n   * checks if a token is a Marines\\n   * @param tokenId the ID of the token to check\\n   * @return marine - whether or not a token is a Marines\\n   */\\n  function isMarine(uint256 tokenId)\\n    external\\n    view\\n    override\\n    blockIfChangingToken(tokenId)\\n    returns (bool)\\n  {\\n    // Sneaky aliens will be slain if they try to peep this after mint. Nice try.\\n    IMnA.MarineAlien memory s = tokenTraits[tokenId];\\n    return s.isMarine;\\n  }\\n\\n  /**\\n   * enables owner to pause / unpause minting\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  /**\\n   * enables an address to mint / burn\\n   * @param addr the address to enable\\n   */\\n  function addAdmin(address addr) external onlyOwner {\\n    admins[addr] = true;\\n  }\\n\\n  /**\\n   * disables an address from minting / burning\\n   * @param addr the address to disbale\\n   */\\n  function removeAdmin(address addr) external onlyOwner {\\n    admins[addr] = false;\\n  }\\n\\n  function getTokenTraits(uint256 tokenId)\\n    external\\n    view\\n    override\\n    blockIfChangingAddress\\n    blockIfChangingToken(tokenId)\\n    returns (IMnA.MarineAlien memory)\\n  {\\n    return tokenTraits[tokenId];\\n  }\\n\\n  function getTokenLevel(uint256 tokenId)\\n    external\\n    view\\n    override\\n    blockIfChangingAddress\\n    blockIfChangingToken(tokenId)\\n    returns (uint256)\\n  {\\n    return tokenLevels[tokenId];\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    blockIfChangingAddress\\n    blockIfChangingToken(tokenId)\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n    return traits.tokenURI(tokenId);\\n  }\\n\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    virtual\\n    override(ERC721Enumerable, IERC721Enumerable)\\n    blockIfChangingAddress\\n    returns (uint256)\\n  {\\n    require(\\n      admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    uint256 tokenId = super.tokenOfOwnerByIndex(owner, index);\\n    require(\\n      admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    return tokenId;\\n  }\\n\\n  function balanceOf(address owner)\\n    public\\n    view\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingAddress\\n    returns (uint256)\\n  {\\n    require(\\n      admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    return super.balanceOf(owner);\\n  }\\n\\n  function ownerOf(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingAddress\\n    blockIfChangingToken(tokenId)\\n    returns (address)\\n  {\\n    address addr = super.ownerOf(tokenId);\\n    require(\\n      admins[_msgSender()] || lastWriteAddress[addr].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    return addr;\\n  }\\n\\n  function tokenByIndex(uint256 index)\\n    public\\n    view\\n    virtual\\n    override(ERC721Enumerable, IERC721Enumerable)\\n    returns (uint256)\\n  {\\n    uint256 tokenId = super.tokenByIndex(index);\\n    require(\\n      admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number,\\n      \\\"hmmmm what doing?\\\"\\n    );\\n    return tokenId;\\n  }\\n\\n  function approve(address to, uint256 tokenId)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingToken(tokenId)\\n  {\\n    super.approve(to, tokenId);\\n  }\\n\\n  function getApproved(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingToken(tokenId)\\n    returns (address)\\n  {\\n    return super.getApproved(tokenId);\\n  }\\n\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingAddress\\n  {\\n    super.setApprovalForAll(operator, approved);\\n  }\\n\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override(ERC721, IERC721)\\n    blockIfChangingAddress\\n    returns (bool)\\n  {\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n    super.safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n    super.safeTransferFrom(from, to, tokenId, _data);\\n  }\\n\\n  function onERC721Received(\\n    address,\\n    address from,\\n    uint256,\\n    bytes calldata\\n  ) external pure override returns (bytes4) {\\n    return IERC721Receiver.onERC721Received.selector;\\n  }\\n}\\n\",\"keccak256\":\"0xd9d535db1d4cf10936e553bb29f0448d305887bc6da11889b3e90e54dfe43d35\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ILevelMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILevelMath {\\n  struct LevelEpoch {\\n    uint256 oresToken;\\n    uint256 coolDownTime;\\n    uint256 klayeToSkip;\\n    uint256 klayePerDay;\\n    uint256 maxRewardDuration;\\n  }\\n\\n  function getLevelEpoch(uint256 level)\\n    external\\n    view\\n    returns (LevelEpoch memory);\\n}\\n\",\"keccak256\":\"0xb9136603a3f7e03eda0f98a854a5372b12f478fe761c87c93eb24c4f2992e722\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n\\n    function mint(address recipient, uint256 seed) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getMaxTokens() external view returns (uint256);\\n\\n    function getPaidTokens() external view returns (uint256);\\n\\n    function getTokenTraits(uint256 tokenId)\\n        external\\n        view\\n        returns (MarineAlien memory);\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view returns (uint64);\\n\\n    function isMarine(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf26c94f83a4922f62da0b1a73b8ae94d0d7c36a24ab5c95265518271c1d48a5a\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnAv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./IMnA.sol\\\";\\n\\ninterface IMnAv2 is IERC721Enumerable {\\n  function minted() external returns (uint16);\\n\\n  function updateOriginAccess(uint16[] memory tokenIds) external;\\n\\n  function getTokenTraits(uint256 tokenId)\\n    external\\n    view\\n    returns (IMnA.MarineAlien memory);\\n\\n  function getTokenLevel(uint256 tokenId) external view returns (uint256);\\n\\n  function getTokenWriteBlock(uint256 tokenId) external view returns (uint64);\\n\\n  function isMarine(uint256 tokenId) external view returns (bool);\\n\\n  function upgradeLevel(uint256[] calldata tokenIds) external;\\n\\n  function resetCoolDown(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x34af7523141d1fd46017f6b24cac414d7d9ed5d7ed0d861358df6d6e8b7463b2\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IORES.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IORES {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address from, uint256 amount) external;\\n\\n  function updateOriginAccess() external;\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1cf4e42815b3bfea39dc76cb58b7224377fb7a7b0ace75c7a3fb432e6de10b44\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfebf7cfef26ed32ad67a63f48174978d6e9f7e6577d77359f8498ce1b9099d1f\",\"license\":\"MIT LICENSE\"},\"contracts/libraries/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n  Context,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  struct TokenOwnership {\\n    address addr;\\n    uint64 startTimestamp;\\n  }\\n\\n  struct AddressData {\\n    uint128 balance;\\n    uint128 numberMinted;\\n  }\\n\\n  uint256 private currentIndex = 1;\\n\\n  uint256 internal immutable maxBatchSize;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 maxBatchSize_\\n  ) {\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n    _name = name_;\\n    _symbol = symbol_;\\n    maxBatchSize = maxBatchSize_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return currentIndex;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n    return index;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n    uint256 numMintedSoFar = totalSupply();\\n    uint256 tokenIdsIdx = 0;\\n    address currOwnershipAddr = address(0);\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\n      TokenOwnership memory ownership = _ownerships[i];\\n      if (ownership.addr != address(0)) {\\n        currOwnershipAddr = ownership.addr;\\n      }\\n      if (currOwnershipAddr == owner) {\\n        if (tokenIdsIdx == index) {\\n          return i;\\n        }\\n        tokenIdsIdx++;\\n      }\\n    }\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    require(\\n      owner != address(0),\\n      \\\"ERC721A: number minted query for the zero address\\\"\\n    );\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  function ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (TokenOwnership memory)\\n  {\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n    uint256 lowestTokenToCheck;\\n    if (tokenId >= maxBatchSize) {\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n    }\\n\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n      TokenOwnership memory ownership = _ownerships[curr];\\n      if (ownership.addr != address(0)) {\\n        return ownership;\\n      }\\n    }\\n\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n    );\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721A.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, _data),\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return tokenId < currentIndex;\\n  }\\n\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` cannot be larger than the max batch size.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    uint256 startTokenId = currentIndex;\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    AddressData memory addressData = _addressData[to];\\n    _addressData[to] = AddressData(\\n      addressData.balance + uint128(quantity),\\n      addressData.numberMinted + uint128(quantity)\\n    );\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    uint256 updatedIndex = startTokenId;\\n\\n    for (uint256 i = 0; i < quantity; i++) {\\n      emit Transfer(address(0), to, updatedIndex);\\n      require(\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n      );\\n      updatedIndex++;\\n    }\\n\\n    currentIndex = updatedIndex;\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n      getApproved(tokenId) == _msgSender() ||\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n    require(\\n      isApprovedOrOwner,\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    require(\\n      prevOwnership.addr == from,\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\n    );\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    _addressData[from].balance -= 1;\\n    _addressData[to].balance += 1;\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n    uint256 nextTokenId = tokenId + 1;\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\n      if (_exists(nextTokenId)) {\\n        _ownerships[nextTokenId] = TokenOwnership(\\n          prevOwnership.addr,\\n          prevOwnership.startTimestamp\\n        );\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  uint256 public nextOwnerToExplicitlySet = 0;\\n\\n  /**\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n   */\\n  function _setOwnersExplicit(uint256 quantity) internal {\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n    if (endIndex > currentIndex - 1) {\\n      endIndex = currentIndex - 1;\\n    }\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n      if (_ownerships[i].addr == address(0)) {\\n        TokenOwnership memory ownership = ownershipOf(i);\\n        _ownerships[i] = TokenOwnership(\\n          ownership.addr,\\n          ownership.startTimestamp\\n        );\\n      }\\n    }\\n    nextOwnerToExplicitlySet = endIndex + 1;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x08f6a7665a7336d9649f8386635fdc683623a0fb7d0eca7ed53227ab032a903e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526045600b55601280546001600160a01b03191661dead1790553480156200002a57600080fd5b50604080518082018252601881527f4d6172696e6573202620416c69656e732047616d65207632000000000000000060208083019182528351808501909452600584526426b720bb1960d91b9084015281519192916200008d91600091620001e5565b508051620000a3906001906020840190620001e5565b505050620000c0620000ba620000dd60201b60201c565b620000e1565b600a805460ff60a01b19169055620000d762000133565b620002c8565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000147600a54600160a01b900460ff1690565b156200018c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640160405180910390fd5b600a805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620001c83390565b6040516001600160a01b03909116815260200160405180910390a1565b828054620001f3906200028b565b90600052602060002090601f01602090048101928262000217576000855562000262565b82601f106200023257805160ff191683800117855562000262565b8280016001018555821562000262579182015b828111156200026257825182559160200191906001019062000245565b506200027092915062000274565b5090565b5b8082111562000270576000815560010162000275565b600281046001821680620002a057607f821691505b60208210811415620002c257634e487b7160e01b600052602260045260246000fd5b50919050565b613ef780620002d86000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c8063704802751161015c578063b077227b116100ce578063e1fc334f11610087578063e1fc334f1461060c578063e985e9c51461061f578063ebd1736814610632578063ecc5fe301461065d578063f2fde38b14610670578063f63bf8bd146106835761028a565b8063b077227b14610569578063b88d4fde1461057c578063bb7789fc1461058f578063c87b56dd146105a2578063d011645c146105b5578063d1ed7fc4146105c85761028a565b806394e568471161012057806394e56847146104f257806395d89b411461051257806396ffb9241461051a578063a1b8f3741461052d578063a22cb4651461054d578063a49062d4146105605761028a565b806370480275146104a057806370a08231146104b3578063715018a6146104c6578063797e7ed9146104ce5780638da5cb5b146104e15761028a565b80632d08265a116102005780634e6fd6c4116101b95780634e6fd6c4146104195780634f02c4201461042c5780634f6ccce7146104545780635c975abb146104675780636352211e1461047a5780636cbbd5da1461048d5761028a565b80632d08265a146103a75780632f745c59146103ba57806335ca838b146103cd5780634019bfc7146103e057806342842e0e146103f357806342966c68146104065761028a565b806312dcfba41161025257806312dcfba41461028f578063150b7a021461032e57806316c38b3c146103665780631785f53c1461037957806318160ddd1461038c57806323b872dd146103945761028a565b806301641d1e1461028f57806301ffc9a7146102b657806306fdde03146102d9578063081812fc146102ee578063095ea7b314610319575b600080fd5b6102a361029d366004613a55565b50600090565b6040519081526020015b60405180910390f35b6102c96102c4366004613859565b610696565b60405190151581526020016102ad565b6102e16106c3565b6040516102ad9190613ad6565b6103016102fc366004613a55565b610755565b6040516001600160a01b0390911681526020016102ad565b61032c6103273660046136d0565b6107ca565b005b61034d61033c366004613564565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102ad565b61032c610374366004613821565b610833565b61032c610387366004613444565b610921565b6008546102a3565b61032c6103a2366004613524565b61096c565b61032c6103b53660046137b3565b610a15565b6102a36103c83660046136d0565b610e50565b61032c6103db3660046136fb565b610f79565b6102c96103ee366004613a55565b6110da565b61032c610401366004613524565b611218565b61032c610414366004613a55565b61127d565b601254610301906001600160a01b031681565b600a5461044190600160a81b900461ffff1681565b60405161ffff90911681526020016102ad565b6102a3610462366004613a55565b6113b8565b6102c9600a54600160a01b900460ff1690565b610301610488366004613a55565b61141f565b601754610301906001600160a01b031681565b61032c6104ae366004613444565b611542565b6102a36104c1366004613444565b611590565b61032c611654565b601654610301906001600160a01b031681565b600a546001600160a01b0316610301565b610505610500366004613a55565b61168a565b6040516102ad9190613c4d565b6102e1611885565b601454610301906001600160a01b031681565b6102a361053b366004613a55565b600f6020526000908152604090205481565b61032c61055b3660046136a3565b611894565b6102a3600b5481565b61032c6105773660046137b3565b6118fb565b61032c61058a3660046135fd565b611be7565b61032c61059d3660046137b3565b611c54565b6102e16105b0366004613a55565b611f83565b6102a36105c3366004613a55565b61211d565b6105f56105d6366004613a55565b600d602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016102ad565b601354610301906001600160a01b031681565b6102c961062d36600461347c565b6121e4565b610645610640366004613a55565b61226b565b6040516001600160401b0390911681526020016102ad565b601554610301906001600160a01b031681565b61032c61067e366004613444565b6122bd565b61032c6106913660046134b4565b612355565b60006001600160e01b0319821663780e9d6360e01b14806106bb57506106bb826123de565b90505b919050565b6060600080546106d290613dea565b80601f01602080910402602001604051908101604052809291908181526020018280546106fe90613dea565b801561074b5780601f106107205761010080835404028352916020019161074b565b820191906000526020600020905b81548152906001019060200180831161072e57829003601f168201915b5050505050905090565b33600090815260186020526040812054829060ff1680610793575060008181526011602052604090205443600160401b9091046001600160401b0316105b6107b85760405162461bcd60e51b81526004016107af90613b72565b60405180910390fd5b6107c18361242e565b91505b50919050565b33600090815260186020526040902054819060ff1680610808575060008181526011602052604090205443600160401b9091046001600160401b0316105b6108245760405162461bcd60e51b81526004016107af90613b72565b61082e83836124c3565b505050565b6013546001600160a01b03161580159061085757506014546001600160a01b031615155b801561086d57506015546001600160a01b031615155b801561088357506017546001600160a01b031615155b801561089957506016546001600160a01b031615155b6108d95760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b60448201526064016107af565b600a546001600160a01b031633146109035760405162461bcd60e51b81526004016107af90613bc7565b8015610916576109116125d4565b61091e565b61091e61265c565b50565b600a546001600160a01b0316331461094b5760405162461bcd60e51b81526004016107af90613bc7565b6001600160a01b03166000908152601860205260409020805460ff19169055565b33600090815260186020526040902054819060ff16806109aa575060008181526011602052604090205443600160401b9091046001600160401b0316105b6109c65760405162461bcd60e51b81526004016107af90613b72565b3360009081526018602052604090205460ff16610a04576109e8335b836126e6565b610a045760405162461bcd60e51b81526004016107af90613bfc565b610a0f8484846127bd565b50505050565b610a28600a54600160a01b900460ff1690565b15610a455760405162461bcd60e51b81526004016107af90613b9d565b60005b8181101561082e576000838383818110610a7257634e487b7160e01b600052603260045260246000fd5b6014546040516331a9108f60e11b8152602092909202939093013560048201819052935033926001600160a01b03169150636352211e9060240160206040518083038186803b158015610ac457600080fd5b505afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc9190613460565b6001600160a01b031614610b3e5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016107af565b6014546040516394e5684760e01b8152600481018390526000916001600160a01b0316906394e56847906024016101a06040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc9190613954565b905080600e600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff16021790555061018082015181600001600c6101000a81548160ff021916908360ff160217905550905050601460009054906101000a90046001600160a01b03166001600160a01b03166342842e0e33601260009054906101000a90046001600160a01b0316856040518463ffffffff1660e01b8152600401610dff939291906001600160a01b039384168152919092166020820152604081019190915260600190565b600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b50505050610e3b3383612968565b50508080610e4890613e41565b915050610a48565b3360009081526018602052604081205460ff1680610e8d57503260009081526010602052604090205443600160401b9091046001600160401b0316105b610ea95760405162461bcd60e51b81526004016107af90613b72565b3360009081526018602052604090205460ff1680610eef57506001600160a01b03831660009081526010602052604090205443600160401b9091046001600160401b0316105b610f0b5760405162461bcd60e51b81526004016107af90613b72565b6000610f178484612a14565b3360009081526018602052604090205490915060ff1680610f56575060008181526011602052604090205443600160401b9091046001600160401b0316105b610f725760405162461bcd60e51b81526004016107af90613b72565b9392505050565b3360009081526018602052604090205460ff16610fa85760405162461bcd60e51b81526004016107af90613b3b565b604080518082018252426001600160401b038181168352438082166020808601918252326000908152601090915295862094518554915167ffffffffffffffff199092169084161767ffffffffffffffff60401b1916600160401b91909316029190911790925590915b8351811015610a0f576040518060400160405280836001600160401b03168152602001846001600160401b03168152506011600086848151811061106657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015161ffff168252818101929092526040016000208251815493909201516001600160401b03908116600160401b0267ffffffffffffffff60401b199190931667ffffffffffffffff199094169390931792909216179055806110d281613e41565b915050611012565b33600090815260186020526040812054829060ff1680611118575060008181526011602052604090205443600160401b9091046001600160401b0316105b6111345760405162461bcd60e51b81526004016107af90613b72565b50506000908152600e602090815260409182902082516101a081018452905460ff80821615158084526101008084048316958501959095526201000083048216958401959095526301000000820481166060840152640100000000820481166080840152650100000000008204811660a084015266010000000000008204811660c0840152600160381b8204811660e0840152600160401b8204811693830193909352600160481b81048316610120830152600160501b81048316610140830152600160581b81048316610160830152600160601b90049091166101809091015290565b33600090815260186020526040902054819060ff1680611256575060008181526011602052604090205443600160401b9091046001600160401b0316105b6112725760405162461bcd60e51b81526004016107af90613b72565b610a0f848484612aaa565b611290600a54600160a01b900460ff1690565b156112ad5760405162461bcd60e51b81526004016107af90613b9d565b3360009081526018602052604090205460ff166112dc5760405162461bcd60e51b81526004016107af90613b3b565b326112e68261141f565b6001600160a01b03161461133c5760405162461bcd60e51b815260206004820152601760248201527f4f6f707320796f7520646f6e2774206f776e207468617400000000000000000060448201526064016107af565b6000818152600e602052604090205460ff16156113835760405181907f86f8109fc1014c667ee2be6fb0b2b1d54dc3677ab2235dd38d9ea7d6419ff73890600090a26113af565b60405181907f53a25ae4217fbc3bc27383ae359a946f20812eb9b2cb7c25142d40c433acb65890600090a25b61091e81612ac5565b6000806113c483612b6c565b3360009081526018602052604090205490915060ff1680611403575060008181526011602052604090205443600160401b9091046001600160401b0316105b6106bb5760405162461bcd60e51b81526004016107af90613b72565b3360009081526018602052604081205460ff168061145c57503260009081526010602052604090205443600160401b9091046001600160401b0316105b6114785760405162461bcd60e51b81526004016107af90613b72565b33600090815260186020526040902054829060ff16806114b6575060008181526011602052604090205443600160401b9091046001600160401b0316105b6114d25760405162461bcd60e51b81526004016107af90613b72565b60006114dd84612c0d565b3360009081526018602052604090205490915060ff168061152657506001600160a01b03811660009081526010602052604090205443600160401b9091046001600160401b0316105b6107c15760405162461bcd60e51b81526004016107af90613b72565b600a546001600160a01b0316331461156c5760405162461bcd60e51b81526004016107af90613bc7565b6001600160a01b03166000908152601860205260409020805460ff19166001179055565b3360009081526018602052604081205460ff16806115cd57503260009081526010602052604090205443600160401b9091046001600160401b0316105b6115e95760405162461bcd60e51b81526004016107af90613b72565b3360009081526018602052604090205460ff168061162f57506001600160a01b03821660009081526010602052604090205443600160401b9091046001600160401b0316105b61164b5760405162461bcd60e51b81526004016107af90613b72565b6106bb82612c84565b600a546001600160a01b0316331461167e5760405162461bcd60e51b81526004016107af90613bc7565b6116886000612d0b565b565b604080516101a08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e083018290526101008301829052610120830182905261014083018290526101608301829052610180830182905233825260189052919091205460ff168061172c57503260009081526010602052604090205443600160401b9091046001600160401b0316105b6117485760405162461bcd60e51b81526004016107af90613b72565b33600090815260186020526040902054829060ff1680611786575060008181526011602052604090205443600160401b9091046001600160401b0316105b6117a25760405162461bcd60e51b81526004016107af90613b72565b50506000908152600e602090815260409182902082516101a081018452905460ff808216151583526101008083048216948401949094526201000082048116948301949094526301000000810484166060830152640100000000810484166080830152650100000000008104841660a083015266010000000000008104841660c0830152600160381b8104841660e0830152600160401b8104841692820192909252600160481b82048316610120820152600160501b82048316610140820152600160581b82048316610160820152600160601b90910490911661018082015290565b6060600180546106d290613dea565b3360009081526018602052604090205460ff16806118d157503260009081526010602052604090205443600160401b9091046001600160401b0316105b6118ed5760405162461bcd60e51b81526004016107af90613b72565b6118f78282612d5d565b5050565b61190e600a54600160a01b900460ff1690565b1561192b5760405162461bcd60e51b81526004016107af90613b9d565b806119685760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420706172616d60981b60448201526064016107af565b6000805b82811015611b4e57600084848381811061199657634e487b7160e01b600052603260045260246000fd5b9050602002013590506000600c6000838152602001908152602001600020549050600b548111156119fd5760405162461bcd60e51b8152602060048201526011602482015270185b1c9958591e481b585e081b195d995b607a1b60448201526064016107af565b6000828152600d6020908152604080832081518083018352815460ff1615158152600190910154928101929092526017549051631afbb35560e31b8152600481018590529192916001600160a01b039091169063d7dd9aa89060240160a06040518083038186803b158015611a7157600080fd5b505afa158015611a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa99190613903565b825190915015611aeb5760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481c995cd95d609a1b60448201526064016107af565b6040810151611afa9087613d8f565b60408051808201825260018082524260208084019182526000998a52600d9052929097209051815460ff1916901515178155905195019490945550919350829150611b46905081613e41565b91505061196c565b506016546012546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd906064015b602060405180830381600087803b158015611ba657600080fd5b505af1158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde919061383d565b61082e57600080fd5b33600090815260186020526040902054829060ff1680611c25575060008181526011602052604090205443600160401b9091046001600160401b0316105b611c415760405162461bcd60e51b81526004016107af90613b72565b611c4d85858585612d68565b5050505050565b611c67600a54600160a01b900460ff1690565b15611c845760405162461bcd60e51b81526004016107af90613b9d565b80611cc15760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420706172616d60981b60448201526064016107af565b6000805b82811015611f41576000848483818110611cef57634e487b7160e01b600052603260045260246000fd5b602090810292909201356000818152600c909352604090922054919250339050611d188361141f565b6001600160a01b031614611d5a5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016107af565b600b54811115611da05760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481b585e081b195d995b607a1b60448201526064016107af565b6000828152600d6020908152604080832081518083018352815460ff1615158152600190910154928101929092526017549051631afbb35560e31b8152600481018590529192916001600160a01b039091169063d7dd9aa89060240160a06040518083038186803b158015611e1457600080fd5b505afa158015611e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4c9190613903565b8251909150611ec7574281602001518360200151611e6a9190613d8f565b10611ec75760405162461bcd60e51b815260206004820152602760248201527f6e6565647320746f207761697420666f722074686520636f6f6c646f776e20646044820152663ab930ba34b7b760c91b60648201526084016107af565b8051611ed39087613d8f565b9550611ee0836001613d8f565b6000858152600c60209081526040808320939093558251808401845282815242818301908152978352600d9091529190209051815460ff1916901515178155935160019094019390935550829150611f39905081613e41565b915050611cc5565b506015546012546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401611b8c565b3360009081526018602052604090205460609060ff1680611fc357503260009081526010602052604090205443600160401b9091046001600160401b0316105b611fdf5760405162461bcd60e51b81526004016107af90613b72565b33600090815260186020526040902054829060ff168061201d575060008181526011602052604090205443600160401b9091046001600160401b0316105b6120395760405162461bcd60e51b81526004016107af90613b72565b6000838152600260205260409020546001600160a01b031661209d5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20494420646f6573206e6f7420657869737400000000000000000060448201526064016107af565b60135460405163c87b56dd60e01b8152600481018590526001600160a01b039091169063c87b56dd9060240160006040518083038186803b1580156120e157600080fd5b505afa1580156120f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c19190810190613891565b3360009081526018602052604081205460ff168061215a57503260009081526010602052604090205443600160401b9091046001600160401b0316105b6121765760405162461bcd60e51b81526004016107af90613b72565b33600090815260186020526040902054829060ff16806121b4575060008181526011602052604090205443600160401b9091046001600160401b0316105b6121d05760405162461bcd60e51b81526004016107af90613b72565b50506000908152600c602052604090205490565b3360009081526018602052604081205460ff168061222157503260009081526010602052604090205443600160401b9091046001600160401b0316105b61223d5760405162461bcd60e51b81526004016107af90613b72565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16610f72565b3360009081526018602052604081205460ff1661229a5760405162461bcd60e51b81526004016107af90613b3b565b50600090815260116020526040902054600160401b90046001600160401b031690565b600a546001600160a01b031633146122e75760405162461bcd60e51b81526004016107af90613bc7565b6001600160a01b03811661234c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107af565b61091e81612d0b565b600a546001600160a01b0316331461237f5760405162461bcd60e51b81526004016107af90613bc7565b601480546001600160a01b03199081166001600160a01b03978816179091556013805482169587169590951790945560158054851693861693909317909255601680548416918516919091179055601780549092169216919091179055565b60006001600160e01b031982166380ac58cd60e01b148061240f57506001600160e01b03198216635b5e139f60e01b145b806106bb57506301ffc9a760e01b6001600160e01b03198316146106bb565b6000818152600260205260408120546001600160a01b03166124a75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107af565b506000908152600460205260409020546001600160a01b031690565b60006124ce82612c0d565b9050806001600160a01b0316836001600160a01b0316141561253c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107af565b336001600160a01b03821614806125585750612558813361062d565b6125ca5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107af565b61082e8383612d99565b6125e7600a54600160a01b900460ff1690565b156126045760405162461bcd60e51b81526004016107af90613b9d565b600a805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861263f3390565b6040516001600160a01b03909116815260200160405180910390a1565b61266f600a54600160a01b900460ff1690565b6126b25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107af565b600a805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361263f565b6000818152600260205260408120546001600160a01b031661275f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107af565b600061276a83612c0d565b9050806001600160a01b0316846001600160a01b031614806127a55750836001600160a01b031661279a84610755565b6001600160a01b0316145b806127b557506127b581856121e4565b949350505050565b826001600160a01b03166127d082612c0d565b6001600160a01b0316146128385760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107af565b6001600160a01b03821661289a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107af565b6128a5838383612e07565b6128b0600082612d99565b6001600160a01b03831660009081526003602052604081208054600192906128d9908490613da7565b90915550506001600160a01b0382166000908152600360205260408120805460019290612907908490613d8f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61297b600a54600160a01b900460ff1690565b156129985760405162461bcd60e51b81526004016107af90613b9d565b600a8054600160a81b900461ffff169060156129b383613e1f565b82546101009290920a61ffff818102199093169190921691909102179055506040805180820182526000808252426020808401918252858352600d90529290209051815460ff19169015151781559051600191909101556118f78282612ec4565b6000612a1f83612c84565b8210612a815760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107af565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61082e83838360405180602001604052806000815250611be7565b6000612ad082612c0d565b9050612ade81600084612e07565b612ae9600083612d99565b6001600160a01b0381166000908152600360205260408120805460019290612b12908490613da7565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000612b7760085490565b8210612bda5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107af565b60088281548110612bfb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106bb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107af565b60006001600160a01b038216612cef5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107af565b506001600160a01b031660009081526003602052604090205490565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118f7338383612ede565b612d71336109e2565b612d8d5760405162461bcd60e51b81526004016107af90613bfc565b610a0f84848484612fad565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612dce82612c0d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038316612e6257612e5d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612e85565b816001600160a01b0316836001600160a01b031614612e8557612e858382612fe0565b6001600160a01b038216612ea157612e9c8161307d565b61082e565b826001600160a01b0316826001600160a01b03161461082e5761082e8282613156565b6118f782826040518060200160405280600081525061319a565b816001600160a01b0316836001600160a01b03161415612f405760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107af565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612fb88484846127bd565b612fc4848484846131cd565b610a0f5760405162461bcd60e51b81526004016107af90613ae9565b60006001612fed84612c84565b612ff79190613da7565b60008381526007602052604090205490915080821461304a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061308f90600190613da7565b600083815260096020526040812054600880549394509092849081106130c557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106130f457634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061313a57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061316183612c84565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6131a483836132da565b6131b160008484846131cd565b61082e5760405162461bcd60e51b81526004016107af90613ae9565b60006001600160a01b0384163b156132cf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613211903390899088908890600401613a99565b602060405180830381600087803b15801561322b57600080fd5b505af192505050801561325b575060408051601f3d908101601f1916820190925261325891810190613875565b60015b6132b5573d808015613289576040519150601f19603f3d011682016040523d82523d6000602084013e61328e565b606091505b5080516132ad5760405162461bcd60e51b81526004016107af90613ae9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506127b5565b506001949350505050565b6001600160a01b0382166133305760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107af565b6000818152600260205260409020546001600160a01b0316156133955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107af565b6133a160008383612e07565b6001600160a01b03821660009081526003602052604081208054600192906133ca908490613d8f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80516106be81613e9d565b805160ff811681146106be57600080fd5b600060208284031215613455578081fd5b8135610f7281613e88565b600060208284031215613471578081fd5b8151610f7281613e88565b6000806040838503121561348e578081fd5b823561349981613e88565b915060208301356134a981613e88565b809150509250929050565b600080600080600060a086880312156134cb578081fd5b85356134d681613e88565b945060208601356134e681613e88565b935060408601356134f681613e88565b9250606086013561350681613e88565b9150608086013561351681613e88565b809150509295509295909350565b600080600060608486031215613538578081fd5b833561354381613e88565b9250602084013561355381613e88565b929592945050506040919091013590565b60008060008060006080868803121561357b578283fd5b853561358681613e88565b9450602086013561359681613e88565b93506040860135925060608601356001600160401b03808211156135b8578283fd5b818801915088601f8301126135cb578283fd5b8135818111156135d9578384fd5b8960208285010111156135ea578384fd5b9699959850939650602001949392505050565b60008060008060808587031215613612578182fd5b843561361d81613e88565b9350602085013561362d81613e88565b92506040850135915060608501356001600160401b0381111561364e578182fd5b8501601f8101871361365e578182fd5b803561367161366c82613d68565b613d38565b818152886020838501011115613685578384fd5b81602084016020830137908101602001929092525092959194509250565b600080604083850312156136b5578182fd5b82356136c081613e88565b915060208301356134a981613e9d565b600080604083850312156136e2578182fd5b82356136ed81613e88565b946020939093013593505050565b6000602080838503121561370d578182fd5b82356001600160401b0380821115613723578384fd5b818501915085601f830112613736578384fd5b81358181111561374857613748613e72565b8381029150613758848301613d38565b8181528481019084860184860187018a1015613772578788fd5b8795505b838610156137a6578035945061ffff85168514613791578788fd5b84835260019590950194918601918601613776565b5098975050505050505050565b600080602083850312156137c5578182fd5b82356001600160401b03808211156137db578384fd5b818501915085601f8301126137ee578384fd5b8135818111156137fc578485fd5b866020808302850101111561380f578485fd5b60209290920196919550909350505050565b600060208284031215613832578081fd5b8135610f7281613e9d565b60006020828403121561384e578081fd5b8151610f7281613e9d565b60006020828403121561386a578081fd5b8135610f7281613eab565b600060208284031215613886578081fd5b8151610f7281613eab565b6000602082840312156138a2578081fd5b81516001600160401b038111156138b7578182fd5b8201601f810184136138c7578182fd5b80516138d561366c82613d68565b8181528560208385010111156138e9578384fd5b6138fa826020830160208601613dbe565b95945050505050565b600060a08284031215613914578081fd5b61391e60a0613d38565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006101a0808385031215613967578182fd5b61397081613d38565b905061397b83613428565b815261398960208401613433565b602082015261399a60408401613433565b60408201526139ab60608401613433565b60608201526139bc60808401613433565b60808201526139cd60a08401613433565b60a08201526139de60c08401613433565b60c08201526139ef60e08401613433565b60e0820152610100613a02818501613433565b90820152610120613a14848201613433565b90820152610140613a26848201613433565b90820152610160613a38848201613433565b90820152610180613a4a848201613433565b908201529392505050565b600060208284031215613a66578081fd5b5035919050565b60008151808452613a85816020860160208601613dbe565b601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613acc90830184613a6d565b9695505050505050565b600060208252610f726020830184613a6d565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526019908201527f4f6e6c792061646d696e732063616e2063616c6c207468697300000000000000604082015260600190565b602080825260119082015270686d6d6d6d207768617420646f696e673f60781b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8151151581526101a081016020830151613c6c602084018260ff169052565b506040830151613c81604084018260ff169052565b506060830151613c96606084018260ff169052565b506080830151613cab608084018260ff169052565b5060a0830151613cc060a084018260ff169052565b5060c0830151613cd560c084018260ff169052565b5060e0830151613cea60e084018260ff169052565b506101008381015160ff908116918401919091526101208085015182169084015261014080850151821690840152610160808501518216908401526101809384015116929091019190915290565b604051601f8201601f191681016001600160401b0381118282101715613d6057613d60613e72565b604052919050565b60006001600160401b03821115613d8157613d81613e72565b50601f01601f191660200190565b60008219821115613da257613da2613e5c565b500190565b600082821015613db957613db9613e5c565b500390565b60005b83811015613dd9578181015183820152602001613dc1565b83811115610a0f5750506000910152565b600281046001821680613dfe57607f821691505b602082108114156107c457634e487b7160e01b600052602260045260246000fd5b600061ffff80831681811415613e3757613e37613e5c565b6001019392505050565b6000600019821415613e5557613e55613e5c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461091e57600080fd5b801515811461091e57600080fd5b6001600160e01b03198116811461091e57600080fdfea2646970667358221220d3c9e753068bccfc51d15a5fafcaa361d26f3be54136aeba3d2fc618624d227364736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "params": {
          "addr": "the address to enable"
        }
      },
      "isMarine(uint256)": {
        "params": {
          "tokenId": "the ID of the token to check"
        },
        "returns": {
          "_0": "marine - whether or not a token is a Marines"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeAdmin(address)": {
        "params": {
          "addr": "the address to disbale"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetCoolDown(uint256[])": {
        "params": {
          "tokenIds": "- The token ids what you're going to reset"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeLevel(uint256[])": {
        "params": {
          "tokenIds": "- The token ids what you're going to upgrade"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmin(address)": {
        "notice": "enables an address to mint / burn"
      },
      "burn(uint256)": {
        "notice": "Burn a token - any game logic should be handled before this function."
      },
      "claimTokens(uint256[])": {
        "notice": "Claims the MnAv2 tokens by burning some MnAv2 tokens. Used to avoid estimateGas failure"
      },
      "isMarine(uint256)": {
        "notice": "checks if a token is a Marines"
      },
      "klayeTokenForCoolDown(uint256)": {
        "notice": "Gets the number of $KLAYE tokens for the specific level"
      },
      "oresTokenForLevel(uint256)": {
        "notice": "Gets the number of $ORES tokens for the specific level"
      },
      "removeAdmin(address)": {
        "notice": "disables an address from minting / burning"
      },
      "resetCoolDown(uint256[])": {
        "notice": "Resets cooldown time to upgrade immediately."
      },
      "setPaused(bool)": {
        "notice": "enables owner to pause / unpause minting"
      },
      "upgradeLevel(uint256[])": {
        "notice": "Upgrades current level upto next one. $ORES token is required to do."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3404,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3406,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3410,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3414,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3418,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3424,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4358,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4362,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4365,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4369,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1512,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2391,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "_paused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 10444,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "minted",
        "offset": 21,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 10447,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "MAX_LEVEL",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10451,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "tokenLevels",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10456,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "upgradeEpoches",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(UpgradeEpoch)10433_storage)"
      },
      {
        "astId": 10461,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "tokenTraits",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(MarineAlien)17740_storage)"
      },
      {
        "astId": 10465,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "existingCombinations",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10470,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "lastWriteAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(LastWrite)10428_storage)"
      },
      {
        "astId": 10475,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "lastWriteToken",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(LastWrite)10428_storage)"
      },
      {
        "astId": 10478,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "DEAD_ADDRESS",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 10481,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "traits",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ITraits)17940"
      },
      {
        "astId": 10484,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "mnaV1",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IMnA)17796"
      },
      {
        "astId": 10487,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "ores",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IORES)17889"
      },
      {
        "astId": 10490,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "klaye",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC20)3129"
      },
      {
        "astId": 10493,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "levelMath",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(ILevelMath)17708"
      },
      {
        "astId": 10497,
        "contract": "contracts/MnAv2.sol:MnAv2",
        "label": "admins",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3129": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILevelMath)17708": {
        "encoding": "inplace",
        "label": "contract ILevelMath",
        "numberOfBytes": "20"
      },
      "t_contract(IMnA)17796": {
        "encoding": "inplace",
        "label": "contract IMnA",
        "numberOfBytes": "20"
      },
      "t_contract(IORES)17889": {
        "encoding": "inplace",
        "label": "contract IORES",
        "numberOfBytes": "20"
      },
      "t_contract(ITraits)17940": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(LastWrite)10428_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MnAv2.LastWrite)",
        "numberOfBytes": "32",
        "value": "t_struct(LastWrite)10428_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(LastWrite)10428_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MnAv2.LastWrite)",
        "numberOfBytes": "32",
        "value": "t_struct(LastWrite)10428_storage"
      },
      "t_mapping(t_uint256,t_struct(MarineAlien)17740_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMnA.MarineAlien)",
        "numberOfBytes": "32",
        "value": "t_struct(MarineAlien)17740_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeEpoch)10433_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MnAv2.UpgradeEpoch)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeEpoch)10433_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LastWrite)10428_storage": {
        "encoding": "inplace",
        "label": "struct MnAv2.LastWrite",
        "members": [
          {
            "astId": 10425,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 10427,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "blockNum",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarineAlien)17740_storage": {
        "encoding": "inplace",
        "label": "struct IMnA.MarineAlien",
        "members": [
          {
            "astId": 17715,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "isMarine",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 17717,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Weapon",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17719,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Back",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17721,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Headgear",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17723,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Eyes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17725,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Emblem",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17727,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "M_Body",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17729,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "A_Headgear",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17731,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "A_Eye",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17733,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "A_Back",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17735,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "A_Mouth",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17737,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "A_Body",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17739,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "rankIndex",
            "offset": 12,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeEpoch)10433_storage": {
        "encoding": "inplace",
        "label": "struct MnAv2.UpgradeEpoch",
        "members": [
          {
            "astId": 10430,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "skipped",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10432,
            "contract": "contracts/MnAv2.sol:MnAv2",
            "label": "lastUpdate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
