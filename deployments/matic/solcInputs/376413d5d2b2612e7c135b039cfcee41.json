{
  "language": "Solidity",
  "sources": {
    "contracts/FounderPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\n\nimport \"./libraries/ERC721A.sol\";\n\n\ncontract FounderPass is Ownable, ERC721A, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Strings for uint256;\n    using SafeERC20 for IERC20;\n   \n    bool private _isActive = false;\n    bool public isPublicSale = false;\n    bool public isTransferLocked = true;\n    bytes32 public merkleRoot;\n    address public weth;\n\n    uint256 public constant MAX_MINT = 6969;\n    uint256 public constant maxCountPerAccountPre = 3;\n    uint256 public constant maxCountPerAccountPublic = 6;\n\n    uint256 public maxCountPerClaim = 30;\n    uint256 public presalePrice = 0.055 ether;\n    uint256 public publicsalePrice = 0.075 ether;\n\n    uint256 public totalMinted = 0;\n    string private _tokenBaseURI = \"\";\n\n    // Mapping from owner to list of Minted token IDs\n    mapping(address => uint256) private _preMintedTokens;\n    mapping(address => uint256) private _publicMintedTokens;\n\n    modifier onlyActive() {\n        require(_isActive && totalMinted < MAX_MINT, 'not active');\n        _;\n    }\n\n    constructor(bytes32 _merkleRoot, uint256 _maxBatchMintSize, address _weth) ERC721A(\"FounderPass\", \"FP\", _maxBatchMintSize) {\n        merkleRoot = _merkleRoot;\n        weth = _weth;\n    }\n\n    function mint(uint256 numberOfTokens, bytes32[] calldata merkleProof) external payable onlyActive nonReentrant() {\n        require(numberOfTokens > 0, \"zero count\");\n        require(numberOfTokens <= maxCountPerClaim, \"exceeded max limit per claim\");\n        require(numberOfTokens <= MAX_MINT.sub(totalMinted), \"not enough nfts\");\n        require(availableClaimCount(msg.sender, merkleProof) >= numberOfTokens, \"insufficient available\");\n\n        uint256 costForMinting = costForMint(numberOfTokens);\n        // transfer cost for mint to owner address\n        IERC20(weth).safeTransferFrom(msg.sender, owner(), costForMinting);\n        _safeMint(msg.sender, numberOfTokens);\n        totalMinted = totalMinted + numberOfTokens;\n\n        if(isPublicSale) {\n            _publicMintedTokens[msg.sender] = _publicMintedTokens[msg.sender].add(numberOfTokens);\n        } else {\n            _preMintedTokens[msg.sender] = _preMintedTokens[msg.sender].add(numberOfTokens);\n        }\n    }\n\n    function costForMint(uint256 _numToMint) public view returns(uint256) {\n        return (isPublicSale ? publicsalePrice : presalePrice).mul(_numToMint);\n    }\n\n    function availableClaimCount(address account, bytes32[] calldata merkleProof) public view returns(uint256) {\n        if(!_isActive) {\n            return 0;\n        }\n        if(!isPublicSale) {\n            if(!isWhiteList(account, merkleProof)) {\n                return 0;\n            }\n            return _preMintedTokens[account] >= maxCountPerAccountPre ? 0 : maxCountPerAccountPre.sub(_preMintedTokens[account]);\n        }\n        else {\n            return _publicMintedTokens[account] >= maxCountPerAccountPublic ? 0 : maxCountPerAccountPublic.sub(_publicMintedTokens[account]);\n        }\n    }   \n\n\n    function isWhiteList(address account, bytes32[] calldata merkleProof) public view returns(bool) {\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(account));\n        return MerkleProof.verify(merkleProof, merkleRoot, node);\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return _tokenBaseURI;\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721A) returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual override {\n        require(!isTransferLocked, \"Transfer Locked!\");\n    }    \n    \n    /////////////////////////////////////////////////////////////\n    //////////////////   Admin Functions ////////////////////////\n    /////////////////////////////////////////////////////////////\n    function startPresale() external onlyOwner {\n        _isActive = true;\n        isPublicSale = false;\n    }\n\n    function startPublicSale() external onlyOwner {\n        _isActive = true;\n        isPublicSale = true;\n    }\n\n    function endSale() external onlyOwner {\n        _isActive = false;\n    }\n\n    function setTokenBaseURI(string memory URI) external onlyOwner {\n        _tokenBaseURI = URI;\n    }\n\n    function setPresalePrice(uint _price) external onlyOwner {\n        presalePrice = _price;\n    }\n\n    function setPublicsalePrice(uint _price) external onlyOwner {\n        publicsalePrice = _price;\n    }\n\n    function setMaxCountPerClaim(uint _count) external onlyOwner {\n        maxCountPerClaim = _count;\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    function setTransferLocked(bool _isTransferLocked) external onlyOwner {\n        isTransferLocked = _isTransferLocked;\n    }\n\n    receive() external payable {}\n\n    function _safeTransferETH(address to, uint256 value) internal returns(bool) {\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\treturn success;\n    }\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "contracts/libraries/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at 0 (e.g. 1, 2, 3..).\n *\n * Does not support burning tokens to address(0).\n */\ncontract ERC721A is\n  Context,\n  ERC165,\n  IERC721,\n  IERC721Metadata,\n  IERC721Enumerable\n{\n  using Address for address;\n  using Strings for uint256;\n\n  struct TokenOwnership {\n    address addr;\n    uint64 startTimestamp;\n  }\n\n  struct AddressData {\n    uint128 balance;\n    uint128 numberMinted;\n  }\n\n  uint256 private currentIndex = 1;\n\n  uint256 internal immutable maxBatchSize;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to ownership details\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n  mapping(uint256 => TokenOwnership) private _ownerships;\n\n  // Mapping owner address to address data\n  mapping(address => AddressData) private _addressData;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  /**\n   * @dev\n   * `maxBatchSize` refers to how much a minter can mint at a time.\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 maxBatchSize_\n  ) {\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\n    _name = name_;\n    _symbol = symbol_;\n    maxBatchSize = maxBatchSize_;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-totalSupply}.\n   */\n  function totalSupply() public view override returns (uint256) {\n    return currentIndex;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenByIndex}.\n   */\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\n    return index;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\n    uint256 numMintedSoFar = totalSupply();\n    uint256 tokenIdsIdx = 0;\n    address currOwnershipAddr = address(0);\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\n      TokenOwnership memory ownership = _ownerships[i];\n      if (ownership.addr != address(0)) {\n        currOwnershipAddr = ownership.addr;\n      }\n      if (currOwnershipAddr == owner) {\n        if (tokenIdsIdx == index) {\n          return i;\n        }\n        tokenIdsIdx++;\n      }\n    }\n    revert(\"ERC721A: unable to get token of owner by index\");\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      interfaceId == type(IERC721Enumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\n    return uint256(_addressData[owner].balance);\n  }\n\n  function _numberMinted(address owner) internal view returns (uint256) {\n    require(\n      owner != address(0),\n      \"ERC721A: number minted query for the zero address\"\n    );\n    return uint256(_addressData[owner].numberMinted);\n  }\n\n  function ownershipOf(uint256 tokenId)\n    internal\n    view\n    returns (TokenOwnership memory)\n  {\n    require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\n\n    uint256 lowestTokenToCheck;\n    if (tokenId >= maxBatchSize) {\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\n    }\n\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\n      TokenOwnership memory ownership = _ownerships[curr];\n      if (ownership.addr != address(0)) {\n        return ownership;\n      }\n    }\n\n    revert(\"ERC721A: unable to determine the owner of token\");\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    return ownershipOf(tokenId).addr;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Metadata: URI query for nonexistent token\"\n    );\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public override {\n    address owner = ERC721A.ownerOf(tokenId);\n    require(to != owner, \"ERC721A: approval to current owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721A: approve caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view override returns (address) {\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public override {\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override {\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public override {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, _data),\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return tokenId < currentIndex;\n  }\n\n  function _safeMint(address to, uint256 quantity) internal {\n    _safeMint(to, quantity, \"\");\n  }\n\n  /**\n   * @dev Mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `quantity` cannot be larger than the max batch size.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bytes memory _data\n  ) internal {\n    uint256 startTokenId = currentIndex;\n    require(to != address(0), \"ERC721A: mint to the zero address\");\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\n    require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    AddressData memory addressData = _addressData[to];\n    _addressData[to] = AddressData(\n      addressData.balance + uint128(quantity),\n      addressData.numberMinted + uint128(quantity)\n    );\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    uint256 updatedIndex = startTokenId;\n\n    for (uint256 i = 0; i < quantity; i++) {\n      emit Transfer(address(0), to, updatedIndex);\n      require(\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\n      );\n      updatedIndex++;\n    }\n\n    currentIndex = updatedIndex;\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) private {\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n      getApproved(tokenId) == _msgSender() ||\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\n\n    require(\n      isApprovedOrOwner,\n      \"ERC721A: transfer caller is not owner nor approved\"\n    );\n\n    require(\n      prevOwnership.addr == from,\n      \"ERC721A: transfer from incorrect owner\"\n    );\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, prevOwnership.addr);\n\n    _addressData[from].balance -= 1;\n    _addressData[to].balance += 1;\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n    uint256 nextTokenId = tokenId + 1;\n    if (_ownerships[nextTokenId].addr == address(0)) {\n      if (_exists(nextTokenId)) {\n        _ownerships[nextTokenId] = TokenOwnership(\n          prevOwnership.addr,\n          prevOwnership.startTimestamp\n        );\n      }\n    }\n\n    emit Transfer(from, to, tokenId);\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(\n    address to,\n    uint256 tokenId,\n    address owner\n  ) private {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  uint256 public nextOwnerToExplicitlySet = 0;\n\n  /**\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\n   */\n  function _setOwnersExplicit(uint256 quantity) internal {\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\n    require(quantity > 0, \"quantity must be nonzero\");\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\n    if (endIndex > currentIndex - 1) {\n      endIndex = currentIndex - 1;\n    }\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\n      if (_ownerships[i].addr == address(0)) {\n        TokenOwnership memory ownership = ownershipOf(i);\n        _ownerships[i] = TokenOwnership(\n          ownership.addr,\n          ownership.startTimestamp\n        );\n      }\n    }\n    nextOwnerToExplicitlySet = endIndex + 1;\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver(to).onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/Spidox.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\n\nimport \"./libraries/ERC721A.sol\";\n\n\ncontract Spidox is Ownable, ERC721A, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Strings for uint256;\n    using SafeERC20 for IERC20;\n   \n    bool private _isActive = false;\n    bool public isPublicSale = false;\n    bool public isTransferLocked = true;\n    bytes32 public merkleRoot;\n    address public weth;\n\n    uint256 public MAX_MINT = 6969;\n    uint256 public maxCountPerClaim = 1;\n    uint256 public totalMinted = 0;\n    string private _tokenBaseURI = \"\";\n\n    mapping(address => bool) public claimedAccounts;\n\n    modifier onlyActive() {\n        require(_isActive && totalMinted < MAX_MINT, 'not active');\n        _;\n    }\n\n    constructor(bytes32 _merkleRoot, uint256 _maxBatchMintSize) ERC721A(\"SPIDOX\", \"SPIDOX\", _maxBatchMintSize) {\n        merkleRoot = _merkleRoot;\n    }\n\n    function claim(uint256 numberOfTokens, bytes32[] calldata merkleProof) external payable onlyActive nonReentrant() {\n        require(numberOfTokens > 0, \"zero count\");\n        require(numberOfTokens <= maxCountPerClaim, \"exceeded max limit per claim\");\n        require(totalMinted < MAX_MINT.sub(totalMinted), \"not enough nfts\");\n        require(!claimedAccounts[msg.sender], \"already claimed\");\n        require(isWhiteList(msg.sender, merkleProof), \"Only whitelisted account can claim\");\n        _safeMint(msg.sender, 1);\n        totalMinted++;\n        claimedAccounts[msg.sender] = true;\n    }\n\n    function isWhiteList(address account, bytes32[] calldata merkleProof) public view returns(bool) {\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(account));\n        return MerkleProof.verify(merkleProof, merkleRoot, node);\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return _tokenBaseURI;\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721A) returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function setMaxCountPerClaim(uint256 _maxCountPerClaim) public onlyOwner {\n        maxCountPerClaim = _maxCountPerClaim;\n    }\n\n    function setMaxMint(uint256 _maxMint) public onlyOwner {\n        MAX_MINT = _maxMint;\n    }    \n\n    function setTokenBaseURI(string memory URI) external onlyOwner {\n        _tokenBaseURI = URI;\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    receive() external payable {}\n\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/MnAGameCR.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport \"./interfaces/IMnAGame.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/ITraits.sol\";\nimport \"./interfaces/IORES.sol\";\nimport \"./interfaces/IMnA.sol\";\nimport \"./interfaces/ISpidox.sol\";\n\n\ncontract MnAGameCR is UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, IMnAGame {\n\n  event MintCommitted(address indexed owner, uint256 indexed amount);\n  event MintRevealed(address indexed owner, uint256 indexed amount);\n\n  struct MintCommit {\n    bool stake;\n    uint16 amount;\n  }\n\n  uint256 public treasureChestTypeId;\n  // max $ORES cost \n  uint256 private maxOresCost;\n\n  // address -> commit # -> commits\n  mapping(address => mapping(uint16 => MintCommit)) private _mintCommits;\n  // address -> commit num of commit need revealed for account\n  mapping(address => uint16) private _pendingCommitId;\n  // commit # -> offchain random\n  mapping(uint16 => uint256) private _commitRandoms;\n  uint16 private _commitId;\n  uint16 private pendingMintAmt;\n  bool public allowCommits;\n\n  // address => can call addCommitRandom\n  mapping(address => bool) private admins;\n\n  // reference to the Tower for choosing random Alien thieves\n  IStakingPool public stakingPool;\n  // reference to $ORES for burning on mint\n  IORES public oresToken;\n  // reference to Traits\n  ITraits public traits;\n  // reference to NFT collection\n  IMnA public mnaNFT;\n  // reference to spidox collection\n  ISpidox public spidox;\n\n  function initialize() initializer public {\n    __Pausable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n    __Ownable_init_unchained();\n    _pause();\n    maxOresCost = 90000 ether;\n    _commitId = 1;\n    allowCommits = true;\n  }  \n\nfunction _authorizeUpgrade(address) internal override onlyOwner {}\n\n  /** CRITICAL TO SETUP */\n\n  modifier requireContractsSet() {\n      require(address(oresToken) != address(0) && address(traits) != address(0) \n        && address(mnaNFT) != address(0) && address(stakingPool) != address(0)\n        , \"Contracts not set\");\n      _;\n  }\n\n  function setContracts(address _ores, address _traits, address _wnd, address _stakingPool, address _spidox) external onlyOwner {\n    oresToken = IORES(_ores);\n    traits = ITraits(_traits);\n    mnaNFT = IMnA(_wnd);\n    stakingPool = IStakingPool(_stakingPool);\n    spidox = ISpidox(_spidox);\n  }\n\n  /** EXTERNAL */\n\n  function getPendingMint(address addr) external view returns (MintCommit memory) {\n    require(_pendingCommitId[addr] != 0, \"no pending commits\");\n    return _mintCommits[addr][_pendingCommitId[addr]];\n  }\n\n  function hasMintPending(address addr) external view returns (bool) {\n    return _pendingCommitId[addr] != 0;\n  }\n\n  function canMint(address addr) external view returns (bool) {\n    return _pendingCommitId[addr] != 0 && _commitRandoms[_pendingCommitId[addr]] > 0;\n  }\n\n  // Seed the current commit id so that pending commits can be revealed\n  function addCommitRandom(uint256 seed) external {\n    require(owner() == _msgSender() || admins[_msgSender()], \"Only admins can call this\");\n    _commitRandoms[_commitId] = seed;\n    _commitId += 1;\n  }\n\n  function deleteCommit(address addr) external {\n    require(owner() == _msgSender() || admins[_msgSender()], \"Only admins can call this\");\n    uint16 commitIdCur = _pendingCommitId[_msgSender()];\n    require(commitIdCur > 0, \"No pending commit\");\n    delete _mintCommits[addr][commitIdCur];\n    delete _pendingCommitId[addr];\n  }\n\n  function forceRevealCommit(address addr) external {\n    require(owner() == _msgSender() || admins[_msgSender()], \"Only admins can call this\");\n    reveal(addr);\n  }\n\n  /** Initiate the start of a mint. This action burns $ORES, as the intent of committing is that you cannot back out once you've started.\n    * This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this\n    * commit was added to. */\n  function mintCommit(uint256 amount, bool stake) external whenNotPaused nonReentrant {\n    require(allowCommits, \"adding commits disallowed\");\n    require(tx.origin == _msgSender(), \"Only EOA\");\n    require(_pendingCommitId[_msgSender()] == 0, \"Already have pending mints\");\n    uint16 minted = mnaNFT.minted();\n    uint256 maxTokens = mnaNFT.getMaxTokens();\n    require(minted + pendingMintAmt + amount <= maxTokens, \"All tokens minted\");\n    require(amount > 0 && amount <= 10, \"Invalid mint amount\");\n\n    uint256 totalORESCost = 0;\n    // Loop through the amount of \n    for (uint i = 1; i <= amount; i++) {\n      totalORESCost += mintCost(minted + pendingMintAmt + i);\n    }\n    if (totalORESCost > 0) {\n      oresToken.burn(_msgSender(), totalORESCost);\n      oresToken.updateOriginAccess();\n    }\n    uint16 amt = uint16(amount);\n    _mintCommits[_msgSender()][_commitId] = MintCommit(stake, amt);\n    _pendingCommitId[_msgSender()] = _commitId;\n    pendingMintAmt += amt;\n    emit MintCommitted(_msgSender(), amount);\n  }\n\n  /** Reveal the commits for this user. This will be when the user gets their NFT, and can only be done when the commit id that\n    * the user is pending for has been assigned a random seed. */\n  function mintReveal() external whenNotPaused nonReentrant {\n    require(tx.origin == _msgSender(), \"Only EOA1\");\n    reveal(_msgSender());\n  }\n\n  function reveal(address addr) internal {\n    uint16 commitIdCur = _pendingCommitId[addr];\n    require(commitIdCur > 0, \"No pending commit\");\n    require(_commitRandoms[commitIdCur] > 0, \"random seed not set\");\n    uint16 minted = mnaNFT.minted();\n    MintCommit memory commit = _mintCommits[addr][commitIdCur];\n    pendingMintAmt -= commit.amount;\n    uint16[] memory tokenIds = new uint16[](commit.amount);\n    uint16[] memory tokenIdsToStake = new uint16[](commit.amount);\n    uint256 seed = _commitRandoms[commitIdCur];\n    for (uint k = 0; k < commit.amount; k++) {\n      minted++;\n      // scramble the random so the steal / treasure mechanic are different per mint\n      seed = uint256(keccak256(abi.encode(seed, addr)));\n      address recipient = selectRecipient(seed);\n      if(recipient != addr && address(spidox) != address(0) && spidox.balanceOf(addr) > 0) {\n        // If the mint is going to be stolen, there's a 50% chance \n        //  a alien will prefer a treasure chest over it\n        if(seed & 1 == 1) {\n          spidox.safeTransferFrom(addr, recipient, spidox.tokenOfOwnerByIndex(addr, 0), \"\");\n          recipient = addr;\n        }\n      }\n      tokenIds[k] = minted;\n      if (!commit.stake || recipient != addr) {\n        mnaNFT.mint(recipient, seed);\n      } else {\n        mnaNFT.mint(address(stakingPool), seed);\n        tokenIdsToStake[k] = minted;\n      }\n    }\n    mnaNFT.updateOriginAccess(tokenIds);\n    if(commit.stake) {\n      stakingPool.addManyToMarinePoolAndAlienPool(addr, tokenIdsToStake);\n    }\n    delete _mintCommits[addr][commitIdCur];\n    delete _pendingCommitId[addr];\n    emit MintRevealed(addr, tokenIds.length);\n  }\n\n  /** \n   * @param tokenId the ID to check the cost of to mint\n   * @return the cost of the given token ID\n   */\n  function mintCost(uint256 tokenId) public view returns (uint256) {\n    if (tokenId <= 6969) return 0 ether;\n    if (tokenId < 14000) return 30000 ether;\n    if (tokenId < 20999) return 60000 ether;\n    if (tokenId < 27998) return 90000 ether;\n    return maxOresCost;\n  }\n\n  /**\n   * the first 25% (ETH purchases) go to the minter\n   * the remaining 80% have a 10% chance to be given to a random staked alien\n   * @param seed a random value to select a recipient from\n   * @return the address of the recipient (either the minter or the Alien thief's owner)\n   */\n  function selectRecipient(uint256 seed) internal view returns (address) {\n    if (((seed >> 245) % 5) != 0) return _msgSender(); // top 10 bits haven't been used\n    address thief = stakingPool.randomAlienOwner(seed >> 144); // 144 bits reserved for trait selection\n    if (thief == address(0x0)) return _msgSender();\n    return thief;\n  }\n\n  /** ADMIN */\n\n  /**\n   * enables owner to pause / unpause contract\n   */\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\n    if (_paused) _pause();\n    else _unpause();\n  }\n\n  function setMaxOresCost(uint256 _amount) external requireContractsSet onlyOwner {\n    maxOresCost = _amount;\n  } \n\n  function setTreasureChestId(uint256 typeId) external onlyOwner {\n    treasureChestTypeId = typeId;\n  }\n\n  function setAllowCommits(bool allowed) external onlyOwner {\n    allowCommits = allowed;\n  }\n\n  /** Allow the contract owner to set the pending mint amount.\n    * This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been \n    *  reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community.\n    * This function should not be called lightly, this will have negative consequences on the game. */\n  function setPendingMintAmt(uint256 pendingAmt) external onlyOwner {\n    pendingMintAmt = uint16(pendingAmt);\n  }\n\n  /**\n  * enables an address to mint / burn\n  * @param addr the address to enable\n  */\n  function addAdmin(address addr) external onlyOwner {\n      admins[addr] = true;\n  }\n\n  /**\n  * disables an address from minting / burning\n  * @param addr the address to disbale\n  */\n  function removeAdmin(address addr) external onlyOwner {\n      admins[addr] = false;\n  }\n\n  /**\n   * allows owner to withdraw funds from minting\n   */\n  function withdraw() external onlyOwner {\n    payable(owner()).transfer(address(this).balance);\n  }\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IMnAGame.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\ninterface IMnAGame {\n  \n}"
    },
    "contracts/interfaces/IStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE \n\npragma solidity ^0.8.0;\n\ninterface IStakingPool {\n  function addManyToMarinePoolAndAlienPool(address account, uint16[] calldata tokenIds) external;\n  function randomAlienOwner(uint256 seed) external view returns (address);\n}"
    },
    "contracts/interfaces/ITraits.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE \n\npragma solidity ^0.8.0;\n\ninterface ITraits {\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}"
    },
    "contracts/interfaces/IORES.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\ninterface IORES {\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n    function updateOriginAccess() external;\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}"
    },
    "contracts/interfaces/IMnA.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface IMnA is IERC721Enumerable {\n\n    // game data storage\n    struct MarineAlien {\n        bool isMarine;\n        uint8 M_Weapon;\n        uint8 M_Back;\n        uint8 M_Headgear;\n        uint8 M_Eyes;\n        uint8 M_Emblem;\n        uint8 M_Body;\n        uint8 A_Headgear;\n        uint8 A_Eye;\n        uint8 A_Back;\n        uint8 A_Mouth;\n        uint8 A_Body;\n        uint8 rankIndex;\n    }\n\n    function minted() external returns (uint16);\n    function updateOriginAccess(uint16[] memory tokenIds) external;\n    function mint(address recipient, uint256 seed) external;\n    function burn(uint256 tokenId) external;\n    function getMaxTokens() external view returns (uint256);\n    function getPaidTokens() external view returns (uint256);\n    function getTokenTraits(uint256 tokenId) external view returns (MarineAlien memory);\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\n    function isMarine(uint256 tokenId) external view returns(bool);\n  \n}"
    },
    "contracts/interfaces/ISpidox.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ISpidox is IERC721{\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/Traits.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./interfaces/ITraits.sol\";\nimport \"./interfaces/IMnA.sol\";\n\ncontract Traits is Ownable, ITraits {\n\n  using Strings for uint256;\n\n  // struct to store each trait's data for metadata and rendering\n  struct Trait {\n    string name;\n    bool isEmpty;\n    string png;\n  }\n\n  // mapping from trait type (index) to its name\n  string[11] private _traitTypes = [\n    \"M_Weapon\",\n    \"M_Back\",\n    \"M_Headgear\",\n    \"M_Eyes\",\n    \"M_Emblem\",\n    \"M_Body\",\n    \"A_Headgear\",\n    \"A_Eye\",\n    \"A_Back\",\n    \"A_Mouth\",\n    \"A_Body\"\n  ];\n  // storage of each traits name and base64 PNG data\n  mapping(uint8 => mapping(uint8 => Trait)) public traitData;\n  // mapping from rankIndex to its score\n  string[4] private _ranks = [\n    \"4\",\n    \"3\",\n    \"2\",\n    \"1\"\n  ];\n\n  IMnA public mnaNFT;\n\n  constructor() {}\n\n  function setMnA(address _mnaNFT) external onlyOwner {\n    mnaNFT = IMnA(_mnaNFT);\n  }\n\n  /**\n   * administrative to upload the names and images associated with each trait\n   * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\n   * @param traits the names, empty flags and base64 encoded PNGs for each trait\n   */\n  function uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyOwner {\n    require(traitIds.length == traits.length, \"Mismatched inputs\");\n    for (uint i = 0; i < traits.length; i++) {\n      traitData[traitType][traitIds[i]] = Trait(\n        traits[i].name,\n        traits[i].isEmpty,\n        traits[i].png\n      );\n    }\n  }\n\n  /**\n   * generates an <image> element using base64 encoded PNGs\n   * @param trait the trait storing the PNG data\n   * @return the <image> element\n   */\n  function drawTrait(Trait memory trait) internal pure returns (string memory) {\n    require(!trait.isEmpty, \"Empty trait!!!\");\n    return string(abi.encodePacked(\n      '<image x=\"4\" y=\"4\" width=\"32\" height=\"32\" image-rendering=\"pixelated\" preserveAspectRatio=\"xMidYMid\" xlink:href=\"data:image/png;base64,',\n      trait.png,\n      '\"/>'\n    ));\n  }\n\n  /**\n   * generates an entire SVG by composing multiple <image> elements of PNGs\n   * @param tokenId the ID of the token to generate an SVG for\n   * @return a valid SVG of the Marine / Alien\n   */\n  function drawSVG(uint256 tokenId) internal view returns (string memory) {\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\n    string memory svgString; \n    if (s.isMarine) {\n      svgString = string(abi.encodePacked(\n        traitData[0][s.M_Weapon].isEmpty ? '' : drawTrait(traitData[0][s.M_Weapon]),\n        traitData[1][s.M_Back].isEmpty ? '' : drawTrait(traitData[1][s.M_Back]),\n        traitData[2][s.M_Headgear].isEmpty ? '' : drawTrait(traitData[2][s.M_Headgear]),\n        traitData[3][s.M_Eyes].isEmpty ? '' : drawTrait(traitData[3][s.M_Eyes]),\n        traitData[4][s.M_Emblem].isEmpty ? '' : drawTrait(traitData[4][s.M_Emblem]),\n        traitData[5][s.M_Body].isEmpty ? '' : drawTrait(traitData[5][s.M_Body])\n      ));\n    } else {\n      svgString = string(abi.encodePacked(\n        traitData[6][s.A_Headgear].isEmpty ? '' : drawTrait(traitData[6][s.A_Headgear]),\n        traitData[7][s.A_Eye].isEmpty ? '' : drawTrait(traitData[7][s.A_Eye]),\n        traitData[8][s.A_Back].isEmpty ? '' : drawTrait(traitData[8][s.A_Back]),\n        traitData[9][s.A_Mouth].isEmpty ? '' : drawTrait(traitData[9][s.A_Mouth]),\n        traitData[10][s.A_Body].isEmpty ? '' : drawTrait(traitData[10][s.A_Body])\n      ));\n    }\n    \n    return string(abi.encodePacked(\n      '<svg id=\"mnaNFT\" width=\"100%\" height=\"100%\" version=\"1.1\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n      svgString,\n      \"</svg>\"\n    ));\n  }\n\n  /**\n   * generates an attribute for the attributes array in the ERC721 metadata standard\n   * @param traitType the trait type to reference as the metadata key\n   * @param value the token's trait associated with the key\n   * @return a JSON dictionary for the single attribute\n   */\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\n    return string(abi.encodePacked(\n      '{\"trait_type\":\"',\n      traitType,\n      '\",\"value\":\"',\n      value,\n      '\"}'\n    ));\n  }\n\n  /**\n   * generates an array composed of all the individual traits and values\n   * @param tokenId the ID of the token to compose the metadata for\n   * @return a JSON array of all of the attributes for given token ID\n   */\n  function compileAttributes(uint256 tokenId) internal view returns (string memory) {\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\n    string memory traits;\n    if (s.isMarine) {\n      traits = string(abi.encodePacked(\n        attributeForTypeAndValue(_traitTypes[0], traitData[0][s.M_Weapon].name),',',\n        attributeForTypeAndValue(_traitTypes[1], traitData[1][s.M_Back].name),',',\n        attributeForTypeAndValue(_traitTypes[2], traitData[2][s.M_Headgear].name),',',\n        attributeForTypeAndValue(_traitTypes[3], traitData[3][s.M_Eyes].name),',',\n        attributeForTypeAndValue(_traitTypes[4], traitData[4][s.M_Emblem].name),',',\n        attributeForTypeAndValue(_traitTypes[5], traitData[5][s.M_Body].name),','\n      ));\n    } else {\n      traits = string(abi.encodePacked(\n        attributeForTypeAndValue(_traitTypes[6], traitData[6][s.A_Headgear].name),',',\n        attributeForTypeAndValue(_traitTypes[7], traitData[7][s.A_Eye].name),',',\n        attributeForTypeAndValue(_traitTypes[8], traitData[8][s.A_Back].name),',',\n        attributeForTypeAndValue(_traitTypes[9], traitData[9][s.A_Mouth].name),',',\n        attributeForTypeAndValue(_traitTypes[10], traitData[10][s.A_Body].name),',',\n        attributeForTypeAndValue(\"Rank Score\", _ranks[s.rankIndex]),','\n      ));\n    }\n    return string(abi.encodePacked(\n      '[',\n      traits,\n      '{\"trait_type\":\"Generation\",\"value\":',\n      tokenId <= mnaNFT.getPaidTokens() ? '\"Gen 0\"' : '\"Gen 1\"',\n      '},{\"trait_type\":\"Type\",\"value\":',\n      s.isMarine ? '\"Marine\"' : '\"Alien\"',\n      '}]'\n    ));\n  }\n\n  /**\n   * generates a base64 encoded metadata response without referencing off-chain content\n   * @param tokenId the ID of the token to generate the metadata for\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\n   */\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    require(_msgSender() == address(mnaNFT), \"hmmmm what doing?\");\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\n\n    string memory metadata = string(abi.encodePacked(\n      '{\"name\": \"',\n      s.isMarine ? 'Marine #' : 'Alien #',\n      tokenId.toString(),\n      '\", \"description\": \"Space Game is a 100% on-chain collectible based strategy PVE game. Leveraging both L1 & L2. All metadata and pixel sprites are generated and stored completely on-chain. No API and IPFS are used.\", \"image\": \"data:image/svg+xml;base64,',\n      base64(bytes(drawSVG(tokenId))),\n      '\", \"attributes\":',\n      compileAttributes(tokenId),\n      \"}\"\n    ));\n\n    return string(abi.encodePacked(\n      \"data:application/json;base64,\",\n      base64(bytes(metadata))\n    ));\n  }\n\n  string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n  function base64(bytes memory data) internal pure returns (string memory) {\n    if (data.length == 0) return '';\n    \n    // load the table into memory\n    string memory table = TABLE;\n\n    // multiply by 4/3 rounded up\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n    // add some extra buffer at the end required for the writing\n    string memory result = new string(encodedLen + 32);\n\n    assembly {\n      // set the actual output length\n      mstore(result, encodedLen)\n      \n      // prepare the lookup table\n      let tablePtr := add(table, 1)\n      \n      // input ptr\n      let dataPtr := data\n      let endPtr := add(dataPtr, mload(data))\n      \n      // result ptr, jump over length\n      let resultPtr := add(result, 32)\n      \n      // run over the input, 3 bytes at a time\n      for {} lt(dataPtr, endPtr) {}\n      {\n          dataPtr := add(dataPtr, 3)\n          \n          // read 3 bytes\n          let input := mload(dataPtr)\n          \n          // write 4 characters\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n          resultPtr := add(resultPtr, 1)\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n          resultPtr := add(resultPtr, 1)\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n          resultPtr := add(resultPtr, 1)\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n          resultPtr := add(resultPtr, 1)\n      }\n      \n      // padding with '='\n      switch mod(mload(data), 3)\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n    }\n    \n    return result;\n  }\n}"
    },
    "contracts/MnA.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport \"./interfaces/IMnA.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/ITraits.sol\";\nimport \"./interfaces/IRandomSeedGenerator.sol\";\nimport \"./interfaces/IFounderPass.sol\";\n\nimport \"./libraries/ERC721A.sol\";\n\n\ncontract MnA is IMnA, IERC721Receiver, ERC721Enumerable, Ownable, Pausable {\n\n    struct LastWrite {\n        uint64 time;\n        uint64 blockNum;\n    }\n\n    event MarineMinted(uint256 indexed tokenId);\n    event AlienMinted(uint256 indexed tokenId);\n    event MarineStolen(uint256 indexed tokenId);\n    event AlienStolen(uint256 indexed tokenId);\n    event MarineBurned(uint256 indexed tokenId);\n    event AlienBurned(uint256 indexed tokenId);\n\n    // max number of tokens that can be minted\n    uint256 public maxTokens = 27997;\n    // number of tokens that can be airdropped for a fee\n    uint256 public PAID_TOKENS = 6969;\n    // number of tokens that admin can mint for airdrop at a time\n    uint256 public airdropMintingCount = 100;\n    // number of tokens have been minted so far\n    uint16 public override minted;\n    // flag to show airdrop stage\n    bool public isAirdropStage;\n\n    // mapping from tokenId to a struct containing the token's traits\n    mapping(uint256 => MarineAlien) private tokenTraits;\n    // mapping from hashed(tokenTrait) to the tokenId it's associated with\n    // used to ensure there are no duplicates\n    mapping(uint256 => uint256) public existingCombinations;\n    // Tracks the last block and timestamp that a caller has written to state.\n    // Disallow some access to functions if they occur while a change is being written.\n    mapping(address => LastWrite) private lastWriteAddress;\n    mapping(uint256 => LastWrite) private lastWriteToken;\n\n    // list of probabilities for each trait type\n    // 0 - 5 are associated with Marine, 6 - 11 are associated with Aliens\n    uint8[][12] public rarities;\n    // list of aliases for Walker's Alias algorithm\n    // 0 - 5 are associated with Marine, 6 - 11 are associated with Aliens\n    uint8[][12] public aliases;\n\n    // reference to the Tower contract to allow transfers to it without approval\n    IStakingPool public stakingPool;\n    // reference to Traits\n    ITraits public traits;\n    // random seed generator\n    IRandomSeedGenerator public randomSeedGenerator;\n    // founder pass\n    IFounderPass public founderPass;\n\n    // address => allowedToCallFunctions\n    mapping(address => bool) private admins;\n\n    constructor(address _founderPass) ERC721(\"Marines & Aliens Game\", \"MnA\") {\n        _pause();\n\n        // A.J. Walker's Alias Algorithm\n        // Marines\n        // Weapon\n        rarities[0] =  [255, 38, 50, 237, 211, 201, 248, 61, 8, 45, 106, 18, 122, 49, 45, 34, 19, 16];\n        aliases[0] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 11];\n        // Back\n        rarities[1] = [255, 204, 30, 225, 71, 245, 196, 81, 40, 28, 20];\n        aliases[1] = [0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 4];        \n        // Headgear\n        rarities[2] = [255, 188, 14, 219, 208, 239, 55, 75, 137, 239, 126, 47, 245, 221, 163, 122, 81, 40];\n        aliases[2] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 11];\n        // Eyes\n        rarities[3] = [255, 38, 50, 237, 211, 201, 248, 61, 8, 45, 106, 18, 122, 49, 45, 34, 19, 16];\n        aliases[3] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 11];\n        // Emblem\n        rarities[4] = [255, 151, 239, 219, 215, 104, 18, 229, 208, 229, 26, 112, 231, 118, 47, 245, 196, 163, 122, 65];\n        aliases[4] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 10, 11, 14];\n        // Body\n        rarities[5] = [255, 73, 114, 186, 43, 204, 184, 204, 241, 55, 198, 102, 30, 245, 204, 163, 131, 98, 65, 40];\n        aliases[5] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 9, 12];\n\n        // Aliens\n        // Headgear\n        rarities[6] = [255, 71, 163, 102, 122, 163, 51, 245, 180, 86, 20];\n        aliases[6] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\n        // Eye\n        rarities[7] = [255, 112, 204, 102, 81, 184, 71, 245, 163, 61, 20];\n        aliases[7] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\n        // Back\n        rarities[8] = [255, 245, 143, 81, 61, 122, 10, 204, 163, 81, 20];\n        aliases[8] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 1, 2, 3, 4, 6];          \n        // Mouth\n        rarities[9] = [255, 245, 143, 81, 61, 122, 10, 204, 163, 81, 20];\n        aliases[9] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 1, 2, 3, 4, 6];\n        // Body\n        rarities[10] = [255, 51, 143, 40, 20, 122, 51, 204, 163, 122, 20];\n        aliases[10] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\n              \n\n        // rankIndex\n        rarities[11] = [255, 79, 165, 25];\n        aliases[11] = [0, 1, 1, 1];\n\n        founderPass = IFounderPass(_founderPass);\n    }\n\n    modifier requireContractsSet() {\n        require(address(traits) != address(0) && address(stakingPool) != address(0) && address(randomSeedGenerator) != address(0), \"Contracts not set\");\n        _;\n    }\n\n    modifier blockIfChangingAddress() {\n        // frens can always call whenever they want :)\n        require(admins[_msgSender()] || lastWriteAddress[tx.origin].blockNum < block.number, \"hmmmm what doing?\");\n        _;\n    }\n\n    modifier blockIfChangingToken(uint256 tokenId) {\n        // frens can always call whenever they want :)\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \"hmmmm what doing?\");\n        _;\n    }\n\n    function setContracts(address _traits, address _stakingPool, address _randomSeedGenerator) external onlyOwner {\n        traits = ITraits(_traits);\n        stakingPool = IStakingPool(_stakingPool);\n        randomSeedGenerator = IRandomSeedGenerator(_randomSeedGenerator);\n    }\n\n    function getTokenWriteBlock(uint256 tokenId) external view override returns(uint64) {\n        require(admins[_msgSender()], \"Only admins can call this\");\n        return lastWriteToken[tokenId].blockNum;\n    }\n\n    function mintForAirdrop() external onlyOwner whenNotPaused {\n        require(isAirdropStage, \"Airdrop minting is only available in airdrop stage\");\n        require(PAID_TOKENS > minted, \"Airdrop minting completed\");\n        require(address(randomSeedGenerator) != address(0), \"random seed generator is null\");\n        \n        uint256 _mintCount = airdropMintingCount;\n        if (PAID_TOKENS < minted + airdropMintingCount) _mintCount = PAID_TOKENS - minted;\n        for (uint256 i = 0; i < _mintCount; i++) {\n            uint256 randomNumber = uint256(keccak256(abi.encode(randomSeedGenerator.random(), minted)));\n            mint(address(this), randomNumber);\n        }\n    }\n\n    function claim() external whenNotPaused {\n        uint256 balance = founderPass.balanceOf(msg.sender);\n        for (uint256 index = 0; index < balance; index++) {\n            uint256 tokenId = founderPass.tokenOfOwnerByIndex(msg.sender, index);\n            require(IERC721(address(this)).ownerOf(tokenId) == address(this), \"Invalid tokenId\"); \n            IERC721(address(this)).safeTransferFrom(address(this), msg.sender, tokenId);\n        }\n    }\n\n    function withdrawUnClaimed(address recipient, uint256 tokenId) external onlyOwner whenNotPaused {\n        require(!isAirdropStage, \"Can withdraw after airdrop stage ends\");\n        uint256 remainingIds = IMnA(address(this)).balanceOf(address(this));\n        require(remainingIds > 0, \"Nothing to withdraw\");\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \"Invalid tokenId\");\n        IERC721(address(this)).safeTransferFrom(address(this), recipient, tokenId);\n    }\n\n    /** \n    * Mint a token - any payment / game logic should be handled in the game contract. \n    * This will just generate random traits and mint a token to a designated address.\n    */\n    function mint(address recipient, uint256 seed) public override whenNotPaused {\n        require(admins[_msgSender()], \"Only admins can call this\");\n        require(minted + 1 <= maxTokens, \"All tokens minted\");\n        minted++;\n        generate(minted, seed, lastWriteAddress[tx.origin]);\n        if(tx.origin != recipient && recipient != address(stakingPool) && recipient != address(this)) {\n            // Stolen!\n            if(tokenTraits[minted].isMarine) {\n                emit MarineStolen(minted);\n            }\n            else {\n                emit AlienStolen(minted);\n            }\n        }\n        _safeMint(recipient, minted);\n    }\n\n    /**\n    * Burn a token - any game logic should be handled before this function.\n    */\n    function burn(uint256 tokenId) external override whenNotPaused {\n        require(admins[_msgSender()], \"Only admins can call this\");\n        require(ownerOf(tokenId) == tx.origin, \"Oops you don't own that\");\n        if(tokenTraits[tokenId].isMarine) {\n            emit MarineBurned(tokenId);\n        }\n        else {\n            emit AlienBurned(tokenId);\n        }\n        _burn(tokenId);\n    }\n\n    function updateOriginAccess(uint16[] memory tokenIds) external override {\n        require(admins[_msgSender()], \"Only admins can call this\");\n        uint64 blockNum = uint64(block.number);\n        uint64 time = uint64(block.timestamp);\n        lastWriteAddress[tx.origin] = LastWrite(time, blockNum);\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            lastWriteToken[tokenIds[i]] = LastWrite(time, blockNum);\n        }\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\n        // allow admin contracts to be send without approval\n        if(!admins[_msgSender()]) {\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        }\n        _transfer(from, to, tokenId);\n    }\n\n    /** INTERNAL */\n\n    /**\n    * generates traits for a specific token, checking to make sure it's unique\n    * @param tokenId the id of the token to generate traits for\n    * @param seed a pseudorandom 256 bit number to derive traits from\n    * @return t - a struct of traits for the given token ID\n    */\n    function generate(uint256 tokenId, uint256 seed, LastWrite memory lw) internal returns (MarineAlien memory t) {\n        t = selectTraits(seed);\n        if (existingCombinations[structToHash(t)] == 0) {\n            tokenTraits[tokenId] = t;\n            existingCombinations[structToHash(t)] = tokenId;\n            if(t.isMarine) {\n                emit MarineMinted(tokenId);\n            }\n            else {\n                emit AlienMinted(tokenId);\n            }\n            return t;\n        }\n        uint256 nextSeed = uint256(keccak256(abi.encode(randomSeedGenerator.random(), seed)));\n        return generate(tokenId, nextSeed, lw);\n    }\n\n    /**\n    * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\n    * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\n    * probability & alias tables are generated off-chain beforehand\n    * @param seed portion of the 256 bit seed to remove trait correlation\n    * @param traitType the trait type to select a trait for \n    * @return the ID of the randomly selected trait\n    */\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\n        uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\n        // If a selected random trait probability is selected (biased coin) return that trait\n        if (seed >> 8 < rarities[traitType][trait]) return trait;\n        return aliases[traitType][trait];\n    }\n\n    /**\n    * selects the species and all of its traits based on the seed value\n    * @param seed a pseudorandom 256 bit number to derive traits from\n    * @return t -  a struct of randomly selected traits\n    */\n    function selectTraits(uint256 seed) internal view returns (MarineAlien memory t) {    \n        t.isMarine = (seed & 0xFFFF) % 10 != 0;\n\n        if (t.isMarine) {\n            seed >>= 16;    \n            t.M_Weapon = selectTrait(uint16(seed & 0xFFFF), 0);\n            seed >>= 16;\n            t.M_Back = selectTrait(uint16(seed & 0xFFFF), 1);\n            seed >>= 16;\n            t.M_Headgear = selectTrait(uint16(seed & 0xFFFF), 2);\n            seed >>= 16;\n            t.M_Eyes = selectTrait(uint16(seed & 0xFFFF), 3);\n            seed >>= 16;\n            t.M_Emblem = selectTrait(uint16(seed & 0xFFFF), 4);\n            seed >>= 16;\n            t.M_Body = selectTrait(uint16(seed & 0xFFFF), 5);\n        } else {\n            seed >>= 16;    \n            t.A_Headgear = selectTrait(uint16(seed & 0xFFFF), 0);\n            seed >>= 16;\n            t.A_Eye = selectTrait(uint16(seed & 0xFFFF), 1);\n            seed >>= 16;\n            t.A_Back = selectTrait(uint16(seed & 0xFFFF), 2);\n            seed >>= 16;\n            t.A_Mouth = selectTrait(uint16(seed & 0xFFFF), 3);\n            seed >>= 16;\n            t.A_Body = selectTrait(uint16(seed & 0xFFFF), 4);\n            seed >>= 16;\n            t.rankIndex = selectTrait(uint16(seed & 0xFFFF), 5);\n        }\n    }\n\n    /**\n    * converts a struct to a 256 bit hash to check for uniqueness\n    * @param s the struct to pack into a hash\n    * @return the 256 bit hash of the struct\n    */\n    function structToHash(MarineAlien memory s) internal pure returns (uint256) {\n        return uint256(keccak256(\n            abi.encodePacked(\n                s.isMarine,\n                s.M_Weapon,\n                s.M_Back,\n                s.M_Headgear,\n                s.M_Eyes,\n                s.M_Emblem,\n                s.M_Body,\n                s.A_Headgear,\n                s.A_Eye,\n                s.A_Back,\n                s.A_Mouth,\n                s.A_Body,\n                s.rankIndex\n            )\n        ));\n    }\n\n    /** READ */\n\n    /**\n    * checks if a token is a Marines\n    * @param tokenId the ID of the token to check\n    * @return marine - whether or not a token is a Marines\n    */\n    function isMarine(uint256 tokenId) external view override blockIfChangingToken(tokenId) returns (bool) {\n        // Sneaky aliens will be slain if they try to peep this after mint. Nice try.\n        IMnA.MarineAlien memory s = tokenTraits[tokenId];\n        return s.isMarine;\n    }\n\n    function getMaxTokens() external view override returns (uint256) {\n        return maxTokens;\n    }\n\n    function getPaidTokens() external view override returns (uint256) {\n        return PAID_TOKENS;\n    }\n\n    /**\n    * updates the number of tokens for sale\n    */\n    function setPaidTokens(uint256 _paidTokens) external onlyOwner {\n        PAID_TOKENS = uint16(_paidTokens);\n    }\n\n    /**\n     * start or end airdrop stage\n     */\n    function setAirdropStage(bool _isAirdropStage) external onlyOwner {\n        isAirdropStage = _isAirdropStage;\n    }\n\n    /**\n     * set the number of tokens to mint at a time for airdrop.\n     */\n    function setAirdropMintingCount(uint256 _airdropMintingCount) external onlyOwner {\n        airdropMintingCount = _airdropMintingCount;\n    }\n\n    /**\n    * enables owner to pause / unpause minting\n    */\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\n        if (_paused) _pause();\n        else _unpause();\n    }\n\n    /**\n    * enables an address to mint / burn\n    * @param addr the address to enable\n    */\n    function addAdmin(address addr) external onlyOwner {\n        admins[addr] = true;\n    }\n\n    /**\n    * disables an address from minting / burning\n    * @param addr the address to disbale\n    */\n    function removeAdmin(address addr) external onlyOwner {\n        admins[addr] = false;\n    }\n\n    function getTokenTraits(uint256 tokenId) external view override blockIfChangingAddress blockIfChangingToken(tokenId) returns (MarineAlien memory) {\n        return tokenTraits[tokenId];\n    }\n\n    function tokenURI(uint256 tokenId) public view override blockIfChangingAddress blockIfChangingToken(tokenId) returns (string memory) {\n        require(_exists(tokenId), \"Token ID does not exist\");\n        return traits.tokenURI(tokenId);\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override(ERC721Enumerable, IERC721Enumerable) blockIfChangingAddress returns (uint256) {\n        require(admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number, \"hmmmm what doing?\");\n        uint256 tokenId = super.tokenOfOwnerByIndex(owner, index);\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \"hmmmm what doing?\");\n        return tokenId;\n    }\n    \n    function balanceOf(address owner) public view virtual override(ERC721, IERC721) blockIfChangingAddress returns (uint256) {\n        require(admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number, \"hmmmm what doing?\");\n        return super.balanceOf(owner);\n    }\n\n    function ownerOf(uint256 tokenId) public view virtual override(ERC721, IERC721) blockIfChangingAddress blockIfChangingToken(tokenId) returns (address) {\n        address addr = super.ownerOf(tokenId);\n        require(admins[_msgSender()] || lastWriteAddress[addr].blockNum < block.number, \"hmmmm what doing?\");\n        return addr;\n    }\n\n    function tokenByIndex(uint256 index) public view virtual override(ERC721Enumerable, IERC721Enumerable) returns (uint256) {\n        uint256 tokenId = super.tokenByIndex(index);\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \"hmmmm what doing?\");\n        return tokenId;\n    }\n\n    function approve(address to, uint256 tokenId) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\n        super.approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId) public view virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) returns (address) {\n        return super.getApproved(tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override(ERC721, IERC721) blockIfChangingAddress {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override(ERC721, IERC721) blockIfChangingAddress returns (bool) {\n        return super.isApprovedForAll(owner, operator);\n    }\n    \n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\n        super.safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    function onERC721Received(\n        address,\n        address from,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n      return IERC721Receiver.onERC721Received.selector;\n    }    \n\n}"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/interfaces/IRandomSeedGenerator.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IRandomSeedGenerator {\n    function random() external returns (uint256);\n}"
    },
    "contracts/interfaces/IFounderPass.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IFounderPass is IERC721{\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n}"
    },
    "contracts/StakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\n\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./interfaces/IMnAGame.sol\";\nimport \"./interfaces/IMnA.sol\";\nimport \"./interfaces/IORES.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IRandomSeedGenerator.sol\";\n\ncontract StakingPool is UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC721Receiver, PausableUpgradeable, IStakingPool {\n  \n  // maximum rank for a Marine/Alien\n  uint8 public constant MAX_RANK = 4;\n\n  // struct to store a stake's token, owner, and earning values\n  struct Stake {\n    uint16 tokenId;\n    uint80 value;\n    address owner;\n  }\n\n  uint256 private totalRankStaked;\n  uint256 private numMarinesStaked;\n\n  event TokenStaked(address indexed owner, uint256 indexed tokenId, bool indexed isMarine, uint256 value);\n  event MarineClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n  event AlienClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\n\n  // reference to the MnA NFT contract\n  IMnA public mnaNFT;\n  // reference to the MnA NFT contract\n  IMnAGame public mnaGame;\n  // reference to the $ORES contract for minting $ORES earnings\n  IORES public oresToken;\n  // reference to Randomer \n  IRandomSeedGenerator public randomSeedGenerator;\n\n  // maps tokenId to stake\n  mapping(uint256 => Stake) private marinePool; \n  // maps rank to all Alien staked with that rank\n  mapping(uint256 => Stake[]) private alienPool; \n  // tracks location of each Alien in AlienPool\n  mapping(uint256 => uint256) private alienPoolIndices; \n  // any rewards distributed when no aliens are staked\n  uint256 private unaccountedRewards; \n  // amount of $ORES due for each rank point staked\n  uint256 private oresPerRank; \n\n  // marines earn 10000 $ORES per day\n  uint256 public constant DAILY_ORES_RATE = 10000 ether;\n  // marines must have 2 days worth of $ORES to unstake or else they're still guarding the marine pool\n  uint256 public constant MINIMUM_TO_EXIT = 2 days;\n  // aliens take a 20% tax on all $ORES claimed\n  uint256 public constant ORES_CLAIM_TAX_PERCENTAGE = 20;\n  // there will only ever be (roughly) 2 billion $ORES earned through staking\n  uint256 public constant MAXIMUM_GLOBAL_ORES = 2000000000 ether;\n  uint256 public treasureChestTypeId;\n\n  // amount of $ORES earned so far\n  uint256 public totalORESEarned;\n  // the last time $ORES was claimed\n  uint256 private lastClaimTimestamp;\n\n  // emergency rescue to allow unstaking without any checks but without $ORES\n  bool public rescueEnabled;\n\n  function initialize() initializer public {\n    __Pausable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n    __Ownable_init_unchained();\n    _pause();\n  }  \n\nfunction _authorizeUpgrade(address) internal override onlyOwner {}\n\n  /** CRITICAL TO SETUP */\n\n  modifier requireContractsSet() {\n      require(address(mnaNFT) != address(0) && address(oresToken) != address(0) \n        && address(mnaGame) != address(0) && address(randomSeedGenerator) != address(0), \"Contracts not set\");\n      _;\n  }\n\n  function setContracts(address _mnaNFT, address _gp, address _mnaGame, address _rand) external onlyOwner {\n    mnaNFT = IMnA(_mnaNFT);\n    oresToken = IORES(_gp);\n    mnaGame = IMnAGame(_mnaGame);\n    randomSeedGenerator = IRandomSeedGenerator(_rand);\n  }\n\n  function setTreasureChestId(uint256 typeId) external onlyOwner {\n    treasureChestTypeId = typeId;\n  }\n\n  /** STAKING */\n\n  /**\n   * adds Marines and Aliens to the MarinePool and AlienPool\n   * @param account the address of the staker\n   * @param tokenIds the IDs of the Marines and Aliens to stake\n   */\n  function addManyToMarinePoolAndAlienPool(address account, uint16[] calldata tokenIds) external override nonReentrant {\n    require(tx.origin == _msgSender() || _msgSender() == address(mnaGame), \"Only EOA\");\n    require(account == tx.origin, \"account to sender mismatch\");\n    for (uint i = 0; i < tokenIds.length; i++) {\n      if (_msgSender() != address(mnaGame)) { // dont do this step if its a mint + stake\n        require(mnaNFT.ownerOf(tokenIds[i]) == _msgSender(), \"You don't own this token\");\n        mnaNFT.transferFrom(_msgSender(), address(this), tokenIds[i]);\n      } else if (tokenIds[i] == 0) {\n        continue; // there may be gaps in the array for stolen tokens\n      }\n\n      if (mnaNFT.isMarine(tokenIds[i])) \n        _addMarineToMarinePool(account, tokenIds[i]);\n      else \n        _addAlienToAlienPool(account, tokenIds[i]);\n    }\n  }\n\n  /**\n   * adds a single Marine to the MarinePool\n   * @param account the address of the staker\n   * @param tokenId the ID of the Marine to add to the MarinePool\n   */\n  function _addMarineToMarinePool(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\n    marinePool[tokenId] = Stake({\n      owner: account,\n      tokenId: uint16(tokenId),\n      value: uint80(block.timestamp)\n    });\n    numMarinesStaked += 1;\n    emit TokenStaked(account, tokenId, true, block.timestamp);\n  }\n\n  /**\n   * adds a single Alien to the AlienPool\n   * @param account the address of the staker\n   * @param tokenId the ID of the Alien to add to the AlienPool\n   */\n  function _addAlienToAlienPool(address account, uint256 tokenId) internal {\n    uint8 rank = _rankForAlien(tokenId);\n    totalRankStaked += rank; // Portion of earnings ranges from 4 to 1\n    alienPoolIndices[tokenId] = alienPool[rank].length; // Store the location of the alien in the AlienPool\n    alienPool[rank].push(Stake({\n      owner: account,\n      tokenId: uint16(tokenId),\n      value: uint80(oresPerRank)\n    })); // Add the alien to the AlienPool\n    emit TokenStaked(account, tokenId, false, oresPerRank);\n  }\n\n  /** CLAIMING / UNSTAKING */\n\n  /**\n   * realize $ORES earnings and optionally unstake tokens from the MarinePool / AlienPool\n   * to unstake a Marine it will require it has 2 days worth of $ORES unclaimed\n   * @param tokenIds the IDs of the tokens to claim earnings from\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\n   */\n  function claimManyFromMarinePoolAndAlienPool(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant {\n    require(tx.origin == _msgSender() || _msgSender() == address(mnaGame), \"Only EOA\");\n    uint256 owed = 0;\n    for (uint i = 0; i < tokenIds.length; i++) {\n      if (mnaNFT.isMarine(tokenIds[i])) {\n        owed += _claimMarineFromMarinePool(tokenIds[i], unstake);\n      }\n      else {\n        owed += _claimAlienFromAlienPool(tokenIds[i], unstake);\n      }\n    }\n    oresToken.updateOriginAccess();\n    if (owed == 0) {\n      return;\n    }\n    oresToken.mint(_msgSender(), owed);\n  }\n\n  function calculateRewards(uint256 tokenId) external view returns (uint256 owed) {\n    uint64 lastTokenWrite = mnaNFT.getTokenWriteBlock(tokenId);\n    // Must check this, as getTokenTraits will be allowed since this contract is an admin\n    require(lastTokenWrite < block.number, \"hmmmm what doing?\");\n    Stake memory stake = marinePool[tokenId];\n    if(mnaNFT.isMarine(tokenId)) {\n      if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\n        owed = (block.timestamp - stake.value) * DAILY_ORES_RATE / 1 days;\n      } else if (stake.value > lastClaimTimestamp) {\n        owed = 0; // $ORES production stopped already\n      } else {\n        owed = (lastClaimTimestamp - stake.value) * DAILY_ORES_RATE / 1 days; // stop earning additional $ORES if it's all been earned\n      }\n    }\n    else {\n      uint8 rank = _rankForAlien(tokenId);\n      owed = (rank) * (oresPerRank - stake.value); // Calculate portion of tokens based on Rank\n    }\n  }\n\n  /**\n   * realize $ORES earnings for a single Marine and optionally unstake it\n   * if not unstaking, pay a 20% tax to the staked Aliens\n   * if unstaking, there is a 50% chance all $ORES is stolen\n   * @param tokenId the ID of the Marines to claim earnings from\n   * @param unstake whether or not to unstake the Marines\n   * @return owed - the amount of $ORES earned\n   */\n  function _claimMarineFromMarinePool(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\n    Stake memory stake = marinePool[tokenId];\n    require(stake.owner == _msgSender(), \"Don't own the given token\");\n    require(!(unstake && block.timestamp - stake.value < MINIMUM_TO_EXIT), \"Still guarding the marinePool\");\n    if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\n      owed = (block.timestamp - stake.value) * DAILY_ORES_RATE / 1 days;\n    } else if (stake.value > lastClaimTimestamp) {\n      owed = 0; // $ORES production stopped already\n    } else {\n      owed = (lastClaimTimestamp - stake.value) * DAILY_ORES_RATE / 1 days; // stop earning additional $ORES if it's all been earned\n    }\n    if (unstake) {\n      if (randomSeedGenerator.random() & 1 == 1) { // 50% chance of all $ORES stolen\n        _payAlienTax(owed);\n        owed = 0;\n      }\n      delete marinePool[tokenId];\n      numMarinesStaked -= 1;\n      // Always transfer last to guard against reentrance\n      mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // send back Marine\n    } else {\n      _payAlienTax(owed * ORES_CLAIM_TAX_PERCENTAGE / 100); // percentage tax to staked aliens\n      owed = owed * (100 - ORES_CLAIM_TAX_PERCENTAGE) / 100; // remainder goes to Marine owner\n      marinePool[tokenId] = Stake({\n        owner: _msgSender(),\n        tokenId: uint16(tokenId),\n        value: uint80(block.timestamp)\n      }); // reset stake\n    }\n    emit MarineClaimed(tokenId, unstake, owed);\n  }\n\n  /**\n   * realize $ORES earnings for a single Alien and optionally unstake it\n   * Aliens earn $ORES proportional to their rank\n   * @param tokenId the ID of the Alien to claim earnings from\n   * @param unstake whether or not to unstake the Alien\n   * @return owed - the amount of $ORES earned\n   */\n  function _claimAlienFromAlienPool(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\n    require(mnaNFT.ownerOf(tokenId) == address(this), \"Doesn't own token\");\n    uint8 rank = _rankForAlien(tokenId);\n    Stake memory stake = alienPool[rank][alienPoolIndices[tokenId]];\n    require(!(unstake && block.timestamp - stake.value < MINIMUM_TO_EXIT), \"Still guarding the alienPool\");\n    require(stake.owner == _msgSender(), \"Doesn't own token\");\n    owed = (rank) * (oresPerRank - stake.value); // Calculate portion of tokens based on Rank\n    if (unstake) {\n      totalRankStaked -= rank; // Remove rank from total staked\n      if (randomSeedGenerator.random() & 1 == 1) { // 50% chance of all $ORES stolen\n        _payAlienTax(owed);\n        owed = 0;\n      }      \n      Stake memory lastStake = alienPool[rank][alienPool[rank].length - 1];\n      alienPool[rank][alienPoolIndices[tokenId]] = lastStake; // Shuffle last Alien to current position\n      alienPoolIndices[lastStake.tokenId] = alienPoolIndices[tokenId];\n      alienPool[rank].pop(); // Remove duplicate\n      delete alienPoolIndices[tokenId]; // Delete old mapping\n      // Always remove last to guard against reentrance\n      mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // Send back Alien\n    } else {\n      alienPool[rank][alienPoolIndices[tokenId]] = Stake({\n        owner: _msgSender(),\n        tokenId: uint16(tokenId),\n        value: uint80(oresPerRank)\n      }); // reset stake\n    }\n    emit AlienClaimed(tokenId, unstake, owed);\n  }\n  /**\n   * emergency unstake tokens\n   * @param tokenIds the IDs of the tokens to claim earnings from\n   */\n  function rescue(uint256[] calldata tokenIds) external nonReentrant {\n    require(rescueEnabled, \"RESCUE DISABLED\");\n    uint256 tokenId;\n    Stake memory stake;\n    Stake memory lastStake;\n    uint8 rank;\n    for (uint i = 0; i < tokenIds.length; i++) {\n      tokenId = tokenIds[i];\n      if (mnaNFT.isMarine(tokenId)) {\n        stake = marinePool[tokenId];\n        require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\n        delete marinePool[tokenId];\n        numMarinesStaked -= 1;\n        mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // send back Marines\n        emit MarineClaimed(tokenId, true, 0);\n      } else {\n        rank = _rankForAlien(tokenId);\n        stake = alienPool[rank][alienPoolIndices[tokenId]];\n        require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");\n        totalRankStaked -= rank; // Remove Rank from total staked\n        lastStake = alienPool[rank][alienPool[rank].length - 1];\n        alienPool[rank][alienPoolIndices[tokenId]] = lastStake; // Shuffle last Alien to current position\n        alienPoolIndices[lastStake.tokenId] = alienPoolIndices[tokenId];\n        alienPool[rank].pop(); // Remove duplicate\n        delete alienPoolIndices[tokenId]; // Delete old mapping\n        mnaNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \"\"); // Send back Alien\n        emit AlienClaimed(tokenId, true, 0);\n      }\n    }\n  }\n\n  /** ACCOUNTING */\n\n  /** \n   * add $ORES to claimable pot for the AlienPool\n   * @param amount $ORES to add to the pot\n   */\n  function _payAlienTax(uint256 amount) internal {\n    if (totalRankStaked == 0) { // if there's no staked aliens\n      unaccountedRewards += amount; // keep track of $ORES due to aliens\n      return;\n    }\n    // makes sure to include any unaccounted $ORES \n    oresPerRank += (amount + unaccountedRewards) / totalRankStaked;\n    unaccountedRewards = 0;\n  }\n\n  /**\n   * tracks $ORES earnings to ensure it stops once 2.4 billion is eclipsed\n   */\n  modifier _updateEarnings() {\n    if (totalORESEarned < MAXIMUM_GLOBAL_ORES) {\n      totalORESEarned += \n        (block.timestamp - lastClaimTimestamp)\n        * numMarinesStaked\n        * DAILY_ORES_RATE / 1 days; \n      lastClaimTimestamp = block.timestamp;\n    }\n    _;\n  }\n\n  /** ADMIN */\n\n  /**\n   * allows owner to enable \"rescue mode\"\n   * simplifies accounting, prioritizes tokens out in emergency\n   */\n  function setRescueEnabled(bool _enabled) external onlyOwner {\n    rescueEnabled = _enabled;\n  }\n\n  /**\n   * enables owner to pause / unpause contract\n   */\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\n    if (_paused) _pause();\n    else _unpause();\n  }\n\n  /** READ ONLY */\n\n  /**\n   * gets the rank score for a Alien\n   * @param tokenId the ID of the Alien to get the rank score for\n   * @return the rank score of the Alien (5-8)\n   */\n  function _rankForAlien(uint256 tokenId) internal view returns (uint8) {\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\n    return MAX_RANK - s.rankIndex; // rank index is 0-3\n  }\n\n  /**\n   * chooses a random Alien thief when a newly minted token is stolen\n   * @param seed a random value to choose a Alien from\n   * @return the owner of the randomly selected Alien thief\n   */\n  function randomAlienOwner(uint256 seed) external view override returns (address) {\n    if (totalRankStaked == 0) {\n      return address(0x0);\n    }\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalRankStaked; // choose a value from 0 to total rank staked\n    uint256 cumulative;\n    seed >>= 32;\n    // loop through each bucket of Aliens with the same rank score\n    for (uint i = MAX_RANK - 3; i <= MAX_RANK; i++) {\n      cumulative += alienPool[i].length * i;\n      // if the value is not inside of that bucket, keep going\n      if (bucket >= cumulative) continue;\n      // get the address of a random Alien with that rank score\n      return alienPool[i][seed % alienPool[i].length].owner;\n    }\n    return address(0x0);\n  }\n\n  function onERC721Received(\n        address,\n        address from,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n      require(from == address(0x0), \"Cannot send to MarinePool directly\");\n      return IERC721Receiver.onERC721Received.selector;\n    }\n\n  \n}"
    },
    "contracts/ORES.sol": {
      "content": "// SPDX-License-Identifier: MIT LICENSE\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IORES.sol\";\n\ncontract ORES is IORES, ERC20, Ownable {\n  // Tracks the last block that a caller has written to state.\n  // Disallow some access to functions if they occur while a change is being written.\n  mapping(address => uint256) private lastWrite;\n\n  // address => allowedToCallFunctions\n  mapping(address => bool) private admins;\n  \n  constructor() ERC20(\"$ORES\", \"$ORES\") { }\n\n  /**\n   * enables an address to mint / burn\n   * @param addr the address to enable\n   */\n  function addAdmin(address addr) external onlyOwner {\n    admins[addr] = true;\n  } \n\n  /**\n   * disables an address from minting / burning\n   * @param addr the address to disbale\n   */\n  function removeAdmin(address addr) external onlyOwner {\n    admins[addr] = false;\n  }\n\n  /**\n   * mints $ORES to a recipient\n   * @param to the recipient of the $ORES\n   * @param amount the amount of $ORES to mint\n   */\n  function mint(address to, uint256 amount) external override {\n    require(admins[msg.sender], \"Only admins can mint\");\n    _mint(to, amount);\n  }\n\n  /**\n   * burns $ORES from a holder\n   * @param from the holder of the $ORES\n   * @param amount the amount of $ORES to burn\n   */\n  function burn(address from, uint256 amount) external override {\n    require(admins[msg.sender], \"Only admins can burn\");\n    _burn(from, amount);\n  }\n\n  /**\n    * @dev See {IERC20-transferFrom}.\n    *\n    * Emits an {Approval} event indicating the updated allowance. This is not\n    * required by the EIP. See the note at the beginning of {ERC20}.\n    *\n    * Requirements:\n    *\n    * - `sender` and `recipient` cannot be the zero address.\n    * - `sender` must have a balance of at least `amount`.\n    * - the caller must have allowance for ``sender``'s tokens of at least\n    * `amount`.\n    */\n  function transferFrom(\n      address sender,\n      address recipient,\n      uint256 amount\n  ) public virtual override(ERC20, IORES) disallowIfStateIsChanging returns (bool) {\n    require(admins[_msgSender()] || lastWrite[sender] < block.number , \"hmmmm what doing?\");\n    // If the entity invoking this transfer is an admin (i.e. the gameContract)\n    // allow the transfer without approval. This saves gas and a transaction.\n    // The sender address will still need to actually have the amount being attempted to send.\n    if(admins[_msgSender()]) {\n      // NOTE: This will omit any events from being written. This saves additional gas,\n      // and the event emission is not a requirement by the EIP\n      // (read this function summary / ERC20 summary for more details)\n      _transfer(sender, recipient, amount);\n      return true;\n    }\n\n    // If it's not an admin entity (game contract, tower, etc)\n    // The entity will need to be given permission to transfer these funds\n    // For instance, someone can't just make a contract and siphon $ORES from every account\n    return super.transferFrom(sender, recipient, amount);\n  }\n\n  modifier disallowIfStateIsChanging() {\n    // frens can always call whenever they want :)\n    require(admins[_msgSender()] || lastWrite[tx.origin] < block.number, \"hmmmm what doing?\");\n    _;\n  }\n\n  function updateOriginAccess() external override {\n    require(admins[_msgSender()], \"Only admins can call this\");\n    lastWrite[tx.origin] = block.number;\n  }\n\n  function balanceOf(address account) public view virtual override disallowIfStateIsChanging returns (uint256) {\n    // Y U checking on this address in the same block it's being modified... hmmmm\n    require(admins[_msgSender()] || lastWrite[account] < block.number, \"hmmmm what doing?\");\n    return super.balanceOf(account);\n  }\n\n  function transfer(address recipient, uint256 amount) public virtual override disallowIfStateIsChanging returns (bool) {\n    require(admins[_msgSender()] || lastWrite[_msgSender()] < block.number, \"hmmmm what doing?\");\n    return super.transfer(recipient, amount);\n  }\n\n  // Not ensuring state changed in this block as it would needlessly increase gas\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return super.allowance(owner, spender);\n  }\n\n  // Not ensuring state changed in this block as it would needlessly increase gas\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    return super.approve(spender, amount);\n  }\n\n  // Not ensuring state changed in this block as it would needlessly increase gas\n  function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  // Not ensuring state changed in this block as it would needlessly increase gas\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/RandomSeedGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n\ncontract RandomSeedGenerator is VRFConsumerBase, Ownable {\n    \n    bytes32 internal keyHash;\n    uint256 internal fee;\n    uint256 public randomSeed;\n    \n    mapping(address => bool) public admins;\n    \n    constructor(address _vrfCoordinator, address _linkToken, bytes32 _keyHash, uint256 _fee) \n        VRFConsumerBase(\n            _vrfCoordinator, // VRF Coordinator\n            _linkToken  // LINK Token\n        )\n    {\n        keyHash = _keyHash;\n        fee = _fee; \n        admins[msg.sender] = true;\n    }\n\n    function setAdmin(address _account, bool _isAdmin) external onlyOwner {\n        admins[_account] = _isAdmin;\n    }\n    \n    /** \n     * Requests randomness \n     */\n    function getRandomNumber() public returns (bytes32 requestId) {\n        require(admins[msg.sender], \"msg.sender isn't an admin\");\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n        return requestRandomness(keyHash, fee);\n    }\n\n    function random() public view returns (uint256) {\n        require(randomSeed != 0, \"Invalid seed\");\n        return uint256(keccak256(abi.encode(randomSeed, block.timestamp)));\n    }\n\n    /**\n     * Callback function used by VRF Coordinator\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        randomSeed = randomness;\n    }\n\n    function withdrawToken(address recipient, address token) external onlyOwner {\n        IERC20(token).transfer(recipient, IERC20(token).balanceOf(address(this)));\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}