{
  "language": "Solidity",
  "sources": {
    "contracts/Rewards.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n// File: @openzeppelin/contracts/ownership/Ownable.sol\n\npragma solidity 0.8.2;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract StakedTokenWrapper {\n    uint256 public totalSupply;\n    address public feeAddress;\n    uint256 public depositFee;\n    uint256 public lockingDuration;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) public lastDeposits;\n    IERC20 public stakedToken;\n\n    event Staked(address indexed user, uint256 amount, uint256 depositFee);\n    event Withdrawn(address indexed user, uint256 amount);\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    string constant _transferErrorMessage = \"staked token transfer failed\";\n\n    function stakeFor(address forWhom, uint128 amount) public payable virtual {\n        IERC20 st = stakedToken;\n        if (st == IERC20(address(0))) {\n            //eth\n            unchecked {\n                uint256 feeAmt = (msg.value * depositFee) / 10000;\n                require(msg.value > feeAmt, \"underflow exception\");\n                uint256 depositedAmt = msg.value - feeAmt;\n                totalSupply += depositedAmt;\n                _balances[forWhom] += depositedAmt;\n                if (feeAmt > 0) {\n                    (bool success, ) = feeAddress.call{value: feeAmt}(\"\");\n                    require(success, \"eth transfer failed\");\n                }\n            }\n        } else {\n            require(msg.value == 0, \"non-zero eth\");\n            require(amount > 0, \"Cannot stake 0\");\n            require(\n                st.transferFrom(msg.sender, address(this), amount),\n                _transferErrorMessage\n            );\n            unchecked {\n                uint256 feeAmt = (amount * depositFee) / 10000;\n                require(amount > feeAmt, \"underflow exception\");\n                uint256 depositedAmt = amount - feeAmt;\n                totalSupply += depositedAmt;\n                _balances[forWhom] += depositedAmt;\n                if (feeAmt > 0) {\n                    st.transfer(feeAddress, feeAmt);\n                }\n            }\n        }\n        lastDeposits[forWhom] = block.timestamp;\n        emit Staked(forWhom, amount, depositFee);\n    }\n\n    function withdraw(uint128 amount) public virtual {\n        require(amount <= _balances[msg.sender], \"withdraw: balance is lower\");\n        require(\n            block.timestamp > (lastDeposits[msg.sender] + lockingDuration),\n            \"withdraw: unavailable until locking endtime\"\n        );\n        unchecked {\n            _balances[msg.sender] -= amount;\n            totalSupply = totalSupply - amount;\n        }\n        IERC20 st = stakedToken;\n        if (st == IERC20(address(0))) {\n            //eth\n            (bool success, ) = msg.sender.call{value: amount}(\"\");\n            require(success, \"eth transfer failure\");\n        } else {\n            require(\n                stakedToken.transfer(msg.sender, amount),\n                _transferErrorMessage\n            );\n        }\n        emit Withdrawn(msg.sender, amount);\n    }\n}\n\ncontract Rewards is StakedTokenWrapper, Ownable {\n    IERC20 public rewardToken;\n    uint256 public rewardRate;\n    uint64 public periodFinish;\n    uint64 public lastUpdateTime;\n    uint128 public rewardPerTokenStored;\n    struct UserRewards {\n        uint128 userRewardPerTokenPaid;\n        uint128 rewards;\n    }\n    mapping(address => UserRewards) public userRewards;\n\n    event RewardAdded(uint256 reward);\n    event RewardPaid(address indexed user, uint256 reward);\n    event SetLock(address indexed user, bool lock);\n    event UpdateLockingDuration(\n        uint256 oldLockingDuration,\n        uint256 newLockingDuration\n    );\n\n    constructor(\n        IERC20 _rewardToken,\n        IERC20 _stakedToken,\n        address _feeAddress,\n        uint256 _depositFee\n    ) {\n        rewardToken = _rewardToken;\n        stakedToken = _stakedToken;\n        feeAddress = _feeAddress;\n        depositFee = _depositFee;\n    }\n\n    modifier updateReward(address account) {\n        uint128 _rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        rewardPerTokenStored = _rewardPerTokenStored;\n        userRewards[account].rewards = earned(account);\n        userRewards[account].userRewardPerTokenPaid = _rewardPerTokenStored;\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint64) {\n        uint64 blockTimestamp = uint64(block.timestamp);\n        return blockTimestamp < periodFinish ? blockTimestamp : periodFinish;\n    }\n\n    function rewardPerToken() public view returns (uint128) {\n        uint256 totalStakedSupply = totalSupply;\n        if (totalStakedSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        unchecked {\n            uint256 rewardDuration = lastTimeRewardApplicable() -\n                lastUpdateTime;\n            return\n                uint128(\n                    rewardPerTokenStored +\n                        (rewardDuration * rewardRate * 1e18) /\n                        totalStakedSupply\n                );\n        }\n    }\n\n    function earned(address account) public view returns (uint128) {\n        unchecked {\n            return\n                uint128(\n                    (balanceOf(account) *\n                        (rewardPerToken() -\n                            userRewards[account].userRewardPerTokenPaid)) /\n                        1e18 +\n                        userRewards[account].rewards\n                );\n        }\n    }\n\n    function stake(uint128 amount) external payable {\n        stakeFor(msg.sender, amount);\n    }\n\n    function stakeFor(address forWhom, uint128 amount)\n        public\n        payable\n        override\n        updateReward(forWhom)\n    {\n        super.stakeFor(forWhom, amount);\n    }\n\n    function withdraw(uint128 amount) public override updateReward(msg.sender) {\n        super.withdraw(amount);\n    }\n\n    function exit() external {\n        getReward();\n        withdraw(uint128(balanceOf(msg.sender)));\n    }\n\n    function getReward() public updateReward(msg.sender) {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            userRewards[msg.sender].rewards = 0;\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"reward transfer failed\"\n            );\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function setRewardParams(uint128 reward, uint64 duration)\n        external\n        onlyOwner\n    {\n        unchecked {\n            require(reward > 0);\n            rewardPerTokenStored = rewardPerToken();\n            uint64 blockTimestamp = uint64(block.timestamp);\n            uint256 maxRewardSupply = rewardToken.balanceOf(address(this));\n            if (rewardToken == stakedToken) maxRewardSupply -= totalSupply;\n            uint256 leftover = 0;\n            if (blockTimestamp >= periodFinish) {\n                rewardRate = reward / duration;\n            } else {\n                uint256 remaining = periodFinish - blockTimestamp;\n                leftover = remaining * rewardRate;\n                rewardRate = (reward + leftover) / duration;\n            }\n            require(reward + leftover <= maxRewardSupply, \"not enough tokens\");\n            lastUpdateTime = blockTimestamp;\n            periodFinish = blockTimestamp + duration;\n            emit RewardAdded(reward);\n        }\n    }\n\n    function setLockingDuration(uint256 timestamp) external onlyOwner {\n        emit UpdateLockingDuration(lockingDuration, timestamp);\n        lockingDuration = timestamp;\n    }\n\n    function withdrawReward() external onlyOwner {\n        uint256 rewardSupply = rewardToken.balanceOf(address(this));\n        //ensure funds staked by users can't be transferred out\n        if (rewardToken == stakedToken) rewardSupply -= totalSupply;\n        require(rewardToken.transfer(msg.sender, rewardSupply));\n        rewardRate = 0;\n        periodFinish = uint64(block.timestamp);\n    }\n\n    function setFeeAddress(address _feeAddress) external onlyOwner {\n        feeAddress = _feeAddress;\n    }\n\n    function setFeePercent(uint256 _depositFee) external onlyOwner {\n        require(_depositFee <= 5000, \"deposit fee must be smaller than 50%\");\n        depositFee = _depositFee;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}