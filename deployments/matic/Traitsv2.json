{
  "address": "0xa83b2c25116e11C69d38cBF9AE5D2C6473b4123b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traitV1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "backgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mnaNFT",
      "outputs": [
        {
          "internalType": "contract IMnAv2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mnaNFT",
          "type": "address"
        }
      ],
      "name": "setMnAv2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_levels",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "_backgrounds",
          "type": "string[]"
        }
      ],
      "name": "uploadBackgrounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v1Traits",
      "outputs": [
        {
          "internalType": "contract Traits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9365ea5beb14e7034f8d08c1c08a6c0018d6ade6caf0c93fdbc4b673e9fda7c",
  "receipt": {
    "to": null,
    "from": "0xD98bfa55c0491f58c6802e69CAC9a9F72c47B1CE",
    "contractAddress": "0xa83b2c25116e11C69d38cBF9AE5D2C6473b4123b",
    "transactionIndex": 38,
    "gasUsed": "2257224",
    "logsBloom": "0x
    "blockHash": "0x6ad9ac07a816aa1a1069954fe4a5317f44b3d50626c5c18e6e71b13c7e89a3b8",
    "transactionHash": "0xa9365ea5beb14e7034f8d08c1c08a6c0018d6ade6caf0c93fdbc4b673e9fda7c",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 27287962,
        "transactionHash": "0xa9365ea5beb14e7034f8d08c1c08a6c0018d6ade6caf0c93fdbc4b673e9fda7c",
        "address": "0xa83b2c25116e11C69d38cBF9AE5D2C6473b4123b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d98bfa55c0491f58c6802e69cac9a9f72c47b1ce"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x6ad9ac07a816aa1a1069954fe4a5317f44b3d50626c5c18e6e71b13c7e89a3b8"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 27287962,
        "transactionHash": "0xa9365ea5beb14e7034f8d08c1c08a6c0018d6ade6caf0c93fdbc4b673e9fda7c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d98bfa55c0491f58c6802e69cac9a9f72c47b1ce",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001cacd1bb8149528000000000000000000000000000000000000000000000004506e846b590f1d7c00000000000000000000000000000000000000000000111cb1f08924044c60850000000000000000000000000000000000000000000000044ea3b74fa0fa885400000000000000000000000000000000000000000000111cb3bb563fbc60f5ad",
        "logIndex": 151,
        "blockHash": "0x6ad9ac07a816aa1a1069954fe4a5317f44b3d50626c5c18e6e71b13c7e89a3b8"
      }
    ],
    "blockNumber": 27287962,
    "cumulativeGasUsed": "7749532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc81a1960Df41277bA9ecE379f1B1ACaDCdC1f04f"
  ],
  "numDeployments": 2,
  "solcInputHash": "52e5c592e8500b05ed71b3c6338c55e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traitV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnaNFT\",\"outputs\":[{\"internalType\":\"contract IMnAv2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mnaNFT\",\"type\":\"address\"}],\"name\":\"setMnAv2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_levels\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"_backgrounds\",\"type\":\"string[]\"}],\"name\":\"uploadBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Traits\",\"outputs\":[{\"internalType\":\"contract Traits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to generate the metadata for\"},\"returns\":{\"_0\":\"a base64 encoded JSON dictionary of the token's metadata and SVG\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uploadBackgrounds(uint8[],string[])\":{\"params\":{\"_backgrounds\":\"the base64 encoded PNGs for each level\",\"_levels\":\"the trait levels to upload\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"generates a base64 encoded metadata response without referencing off-chain content\"},\"uploadBackgrounds(uint8[],string[])\":{\"notice\":\"administrative to upload the levels and images associated to trait\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traitsv2.sol\":\"Traitsv2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\n\\ncontract Traits is Ownable, ITraits {\\n    using Strings for uint256;\\n\\n    // struct to store each trait's data for metadata and rendering\\n    struct Trait {\\n        string name;\\n        bool isEmpty;\\n        string png;\\n    }\\n\\n    // mapping from trait type (index) to its name\\n    string[11] private _traitTypes = [\\n        \\\"M_Weapon\\\",\\n        \\\"M_Back\\\",\\n        \\\"M_Headgear\\\",\\n        \\\"M_Eyes\\\",\\n        \\\"M_Emblem\\\",\\n        \\\"M_Body\\\",\\n        \\\"A_Headgear\\\",\\n        \\\"A_Eye\\\",\\n        \\\"A_Back\\\",\\n        \\\"A_Mouth\\\",\\n        \\\"A_Body\\\"\\n    ];\\n    // storage of each traits name and base64 PNG data\\n    mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n    // mapping from rankIndex to its score\\n    string[4] private _ranks = [\\\"4\\\", \\\"3\\\", \\\"2\\\", \\\"1\\\"];\\n\\n    IMnA public mnaNFT;\\n\\n    constructor() {}\\n\\n    function setMnA(address _mnaNFT) external onlyOwner {\\n        mnaNFT = IMnA(_mnaNFT);\\n    }\\n\\n    /**\\n     * administrative to upload the names and images associated with each trait\\n     * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\n     * @param traits the names, empty flags and base64 encoded PNGs for each trait\\n     */\\n    function uploadTraits(\\n        uint8 traitType,\\n        uint8[] calldata traitIds,\\n        Trait[] calldata traits\\n    ) external onlyOwner {\\n        require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n        for (uint256 i = 0; i < traits.length; i++) {\\n            traitData[traitType][traitIds[i]] = Trait(\\n                traits[i].name,\\n                traits[i].isEmpty,\\n                traits[i].png\\n            );\\n        }\\n    }\\n\\n    /**\\n     * generates an <image> element using base64 encoded PNGs\\n     * @param trait the trait storing the PNG data\\n     * @return the <image> element\\n     */\\n    function drawTrait(Trait memory trait)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        require(!trait.isEmpty, \\\"Empty trait!!!\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<image x=\\\"32\\\" y=\\\"32\\\" width=\\\"1024\\\" height=\\\"1024\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n                    trait.png,\\n                    '\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an entire SVG by composing multiple <image> elements of PNGs\\n     * @param tokenId the ID of the token to generate an SVG for\\n     * @return a valid SVG of the Marine / Alien\\n     */\\n    function drawSVG(uint256 tokenId) internal view returns (string memory) {\\n        IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n        string memory svgString;\\n        if (s.isMarine) {\\n            svgString = string(\\n                abi.encodePacked(\\n                    traitData[5][s.M_Body].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[5][s.M_Body]),\\n                    traitData[4][s.M_Emblem].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[4][s.M_Emblem]),\\n                    traitData[3][s.M_Eyes].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[3][s.M_Eyes]),\\n                    traitData[2][s.M_Headgear].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[2][s.M_Headgear]),\\n                    traitData[1][s.M_Back].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[1][s.M_Back]),\\n                    traitData[0][s.M_Weapon].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[0][s.M_Weapon])\\n                )\\n            );\\n        } else {\\n            svgString = string(\\n                abi.encodePacked(\\n                    traitData[10][s.A_Body].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[10][s.A_Body]),\\n                    traitData[9][s.A_Mouth].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[9][s.A_Mouth]),\\n                    traitData[8][s.A_Back].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[8][s.A_Back]),\\n                    traitData[7][s.A_Eye].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[7][s.A_Eye]),\\n                    traitData[6][s.A_Headgear].isEmpty\\n                        ? \\\"\\\"\\n                        : drawTrait(traitData[6][s.A_Headgear])\\n                )\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg id=\\\"mnaNFT\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 1088 1088\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n                    svgString,\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an attribute for the attributes array in the ERC721 metadata standard\\n     * @param traitType the trait type to reference as the metadata key\\n     * @param value the token's trait associated with the key\\n     * @return a JSON dictionary for the single attribute\\n     */\\n    function attributeForTypeAndValue(\\n        string memory traitType,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\":\\\"',\\n                    traitType,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an array composed of all the individual traits and values\\n     * @param tokenId the ID of the token to compose the metadata for\\n     * @return a JSON array of all of the attributes for given token ID\\n     */\\n    function compileAttributes(uint256 tokenId)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n        string memory traits;\\n        if (s.isMarine) {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(\\n                        _traitTypes[0],\\n                        traitData[0][s.M_Weapon].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[1],\\n                        traitData[1][s.M_Back].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[2],\\n                        traitData[2][s.M_Headgear].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[3],\\n                        traitData[3][s.M_Eyes].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[4],\\n                        traitData[4][s.M_Emblem].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[5],\\n                        traitData[5][s.M_Body].name\\n                    ),\\n                    \\\",\\\"\\n                )\\n            );\\n        } else {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(\\n                        _traitTypes[6],\\n                        traitData[6][s.A_Headgear].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[7],\\n                        traitData[7][s.A_Eye].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[8],\\n                        traitData[8][s.A_Back].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[9],\\n                        traitData[9][s.A_Mouth].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[10],\\n                        traitData[10][s.A_Body].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\\"Rank Score\\\", _ranks[s.rankIndex]),\\n                    \\\",\\\"\\n                )\\n            );\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"[\\\",\\n                    traits,\\n                    '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":',\\n                    tokenId <= mnaNFT.getPaidTokens() ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\n                    '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":',\\n                    s.isMarine ? '\\\"Marine\\\"' : '\\\"Alien\\\"',\\n                    \\\"}]\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates a base64 encoded metadata response without referencing off-chain content\\n     * @param tokenId the ID of the token to generate the metadata for\\n     * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_msgSender() == address(mnaNFT), \\\"hmmmm what doing?\\\");\\n        IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n\\n        string memory metadata = string(\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                s.isMarine ? \\\"Marine #\\\" : \\\"Alien #\\\",\\n                tokenId.toString(),\\n                '\\\", \\\"description\\\": \\\"Space Game is a 100% on-chain collectible based strategy PVE game. Leveraging both L1 & L2. All metadata and pixel sprites are generated and stored completely on-chain. No API and IPFS are used.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                base64(bytes(drawSVG(tokenId))),\\n                '\\\", \\\"attributes\\\":',\\n                compileAttributes(tokenId),\\n                \\\"}\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64(bytes(metadata))\\n                )\\n            );\\n    }\\n\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function base64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc9d096faccb2ed208e8e6d655dabfc9a49e3efb2ac3109501ce810036ea68c10\",\"license\":\"MIT LICENSE\"},\"contracts/Traitsv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IMnA.sol\\\";\\nimport \\\"./interfaces/IMnAv2.sol\\\";\\nimport \\\"./Traits.sol\\\";\\n\\ncontract Traitsv2 is Ownable, ITraits {\\n  using Strings for uint256;\\n\\n  // struct to store each trait's data for metadata and rendering\\n  struct Trait {\\n    string name;\\n    bool isEmpty;\\n    string png;\\n  }\\n\\n  // mapping from trait type (index) to its name\\n  string[11] private _traitTypes = [\\n    \\\"M_Weapon\\\",\\n    \\\"M_Back\\\",\\n    \\\"M_Headgear\\\",\\n    \\\"M_Eyes\\\",\\n    \\\"M_Emblem\\\",\\n    \\\"M_Body\\\",\\n    \\\"A_Headgear\\\",\\n    \\\"A_Eye\\\",\\n    \\\"A_Back\\\",\\n    \\\"A_Mouth\\\",\\n    \\\"A_Body\\\"\\n  ];\\n  // mapping from level to background image\\n  mapping(uint256 => string) public backgrounds;\\n  // mapping from rankIndex to its score\\n  string[4] private _ranks = [\\\"4\\\", \\\"3\\\", \\\"2\\\", \\\"1\\\"];\\n\\n  IMnAv2 public mnaNFT;\\n  Traits public v1Traits;\\n\\n  constructor(address _traitV1) {\\n    v1Traits = Traits(_traitV1);\\n  }\\n\\n  function setMnAv2(address _mnaNFT) external onlyOwner {\\n    mnaNFT = IMnAv2(_mnaNFT);\\n  }\\n\\n  /**\\n   * administrative to upload the levels and images associated to trait\\n   * @param _levels the trait levels to upload\\n   * @param _backgrounds the base64 encoded PNGs for each level\\n   */\\n  function uploadBackgrounds(\\n    uint8[] calldata _levels,\\n    string[] calldata _backgrounds\\n  ) external onlyOwner {\\n    require(_levels.length == _backgrounds.length, \\\"Mismatched inputs\\\");\\n    for (uint256 i = 0; i < _levels.length; i++) {\\n      backgrounds[_levels[i]] = _backgrounds[i];\\n    }\\n  }\\n\\n  /**\\n   * generates an <image> element using base64 encoded PNGs\\n   * @param typeIndex the index of trait type\\n   * @param nodeIndex the node index among the same traits\\n   * @return the <image> element\\n   */\\n  function drawTrait(uint8 typeIndex, uint8 nodeIndex)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    (, bool isEmpty, string memory png) = v1Traits.traitData(\\n      typeIndex,\\n      nodeIndex\\n    );\\n    if (isEmpty) return \\\"\\\";\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<image x=\\\"32\\\" y=\\\"32\\\" width=\\\"1024\\\" height=\\\"1024\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n          png,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates an <image> element using base64 encoded PNGs\\n   * @param png the PNG data of background image\\n   * @return the <image> element\\n   */\\n  function drawBackground(string memory png)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"1088\\\" height=\\\"1088\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n          png,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates an entire SVG by composing multiple <image> elements of PNGs\\n   * @param tokenId the ID of the token to generate an SVG for\\n   * @return a valid SVG of the Marine / Alien\\n   */\\n  function drawSVG(uint256 tokenId) internal view returns (string memory) {\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n    uint256 tokenLevel = mnaNFT.getTokenLevel(tokenId);\\n    string memory svgString;\\n    if (s.isMarine) {\\n      svgString = string(\\n        abi.encodePacked(\\n          drawBackground(backgrounds[tokenLevel]),\\n          drawTrait(5, s.M_Body),\\n          drawTrait(4, s.M_Emblem),\\n          drawTrait(3, s.M_Eyes),\\n          drawTrait(2, s.M_Headgear),\\n          drawTrait(1, s.M_Back),\\n          drawTrait(0, s.M_Weapon)\\n        )\\n      );\\n    } else {\\n      svgString = string(\\n        abi.encodePacked(\\n          drawBackground(backgrounds[tokenLevel]),\\n          drawTrait(10, s.A_Body),\\n          drawTrait(9, s.A_Mouth),\\n          drawTrait(8, s.A_Back),\\n          drawTrait(7, s.A_Eye),\\n          drawTrait(6, s.A_Headgear)\\n        )\\n      );\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg id=\\\"mnaNFTv2\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 1088 1088\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n          svgString,\\n          \\\"</svg>\\\"\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates an attribute for the attributes array in the ERC721 metadata standard\\n   * @param typeIndex the trait type index\\n   * @param nodeIndex the node index among the same traits\\n   * @return a JSON dictionary for the single attribute\\n   */\\n  function attributeForTypeAndValue(uint8 typeIndex, uint8 nodeIndex)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    string memory traitType = _traitTypes[typeIndex];\\n    (string memory name, , ) = v1Traits.traitData(typeIndex, nodeIndex);\\n    return\\n      string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"',\\n          traitType,\\n          '\\\",\\\"value\\\":\\\"',\\n          name,\\n          '\\\"}'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates an attribute for the attributes array in the ERC721 metadata standard\\n   * @param traitType the trait type string\\n   * @param name the trait type name\\n   * @return a JSON dictionary for the single attribute\\n   */\\n  function attributeForTypeAndValue2(\\n    string memory traitType,\\n    string memory name\\n  ) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\":\\\"',\\n          traitType,\\n          '\\\",\\\"value\\\":\\\"',\\n          name,\\n          '\\\"}'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates an array composed of all the individual traits and values\\n   * @param tokenId the ID of the token to compose the metadata for\\n   * @return a JSON array of all of the attributes for given token ID\\n   */\\n  function compileAttributes(uint256 tokenId)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n    uint256 tokenLevel = mnaNFT.getTokenLevel(tokenId);\\n    string memory traits;\\n    if (s.isMarine) {\\n      traits = string(\\n        abi.encodePacked(\\n          attributeForTypeAndValue(0, s.M_Weapon),\\n          \\\",\\\",\\n          attributeForTypeAndValue(1, s.M_Back),\\n          \\\",\\\",\\n          attributeForTypeAndValue(2, s.M_Headgear),\\n          \\\",\\\",\\n          attributeForTypeAndValue(3, s.M_Eyes),\\n          \\\",\\\",\\n          attributeForTypeAndValue(4, s.M_Emblem),\\n          \\\",\\\",\\n          attributeForTypeAndValue(5, s.M_Body),\\n          \\\",\\\",\\n          attributeForTypeAndValue2(\\\"Level\\\", tokenLevel.toString()),\\n          \\\",\\\"\\n        )\\n      );\\n    } else {\\n      traits = string(\\n        abi.encodePacked(\\n          attributeForTypeAndValue(6, s.A_Headgear),\\n          \\\",\\\",\\n          attributeForTypeAndValue(7, s.A_Eye),\\n          \\\",\\\",\\n          attributeForTypeAndValue(8, s.A_Back),\\n          \\\",\\\",\\n          attributeForTypeAndValue(9, s.A_Mouth),\\n          \\\",\\\",\\n          attributeForTypeAndValue(10, s.A_Body),\\n          \\\",\\\",\\n          attributeForTypeAndValue2(\\\"Level\\\", tokenLevel.toString()),\\n          \\\",\\\",\\n          attributeForTypeAndValue2(\\\"Rank Score\\\", _ranks[s.rankIndex]),\\n          \\\",\\\"\\n        )\\n      );\\n    }\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"[\\\",\\n          traits,\\n          '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":',\\n          tokenId <= 6969 ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\n          '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":',\\n          s.isMarine ? '\\\"Marine\\\"' : '\\\"Alien\\\"',\\n          \\\"}]\\\"\\n        )\\n      );\\n  }\\n\\n  /**\\n   * generates a base64 encoded metadata response without referencing off-chain content\\n   * @param tokenId the ID of the token to generate the metadata for\\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    require(_msgSender() == address(mnaNFT), \\\"hmmmm what doing?\\\");\\n    IMnA.MarineAlien memory s = mnaNFT.getTokenTraits(tokenId);\\n\\n    string memory metadata = string(\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"',\\n        s.isMarine ? \\\"Marine #\\\" : \\\"Alien #\\\",\\n        tokenId.toString(),\\n        '\\\", \\\"description\\\": \\\"Space Game is a 100% on-chain collectible based strategy PVE game. Leveraging both L1 & L2. All metadata and pixel sprites are generated and stored completely on-chain. No API and IPFS are used.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n        base64(bytes(drawSVG(tokenId))),\\n        '\\\", \\\"attributes\\\":',\\n        compileAttributes(tokenId),\\n        \\\"}\\\"\\n      )\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          base64(bytes(metadata))\\n        )\\n      );\\n  }\\n\\n  string internal constant TABLE =\\n    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function base64(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n        // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n        // write 4 characters\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x45e07ca94f103fdac4e930ce3c01395eb506cc6a9a79a2b7a7a86aeb0814051a\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n\\n    function mint(address recipient, uint256 seed) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function getMaxTokens() external view returns (uint256);\\n\\n    function getPaidTokens() external view returns (uint256);\\n\\n    function getTokenTraits(uint256 tokenId)\\n        external\\n        view\\n        returns (MarineAlien memory);\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view returns (uint64);\\n\\n    function isMarine(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf26c94f83a4922f62da0b1a73b8ae94d0d7c36a24ab5c95265518271c1d48a5a\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnAv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./IMnA.sol\\\";\\n\\ninterface IMnAv2 is IERC721Enumerable {\\n  function minted() external returns (uint16);\\n\\n  function updateOriginAccess(uint16[] memory tokenIds) external;\\n\\n  function getTokenTraits(uint256 tokenId)\\n    external\\n    view\\n    returns (IMnA.MarineAlien memory);\\n\\n  function getTokenLevel(uint256 tokenId) external view returns (uint256);\\n\\n  function getTokenWriteBlock(uint256 tokenId) external view returns (uint64);\\n\\n  function isMarine(uint256 tokenId) external view returns (bool);\\n\\n  function upgradeLevel(uint256[] calldata tokenIds) external;\\n\\n  function resetCoolDown(uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x34af7523141d1fd46017f6b24cac414d7d9ed5d7ed0d861358df6d6e8b7463b2\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfebf7cfef26ed32ad67a63f48174978d6e9f7e6577d77359f8498ce1b9099d1f\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "0x60086101e08181526726afabb2b0b837b760c11b6102005260809081526006610220818152654d5f4261636b60d01b6102405260a052600a6102608181526926afa432b0b233b2b0b960b11b6102805260c0526102a0828152654d5f4579657360d01b6102c05260e0526102e0938452674d5f456d626c656d60c01b6103005261010093909352610320818152654d5f426f647960d01b61034052610120526103609283526920afa432b0b233b2b0b960b11b610380526101409290925260056103a090815264415f45796560d81b6103c052610160526103e082815265415f4261636b60d01b6104005261018052600761042090815266082be9adeeae8d60cb1b610440526101a0526104a060405261046091825265415f426f647960d01b610480526101c0919091526200013a90600190600b6200026e565b506040805160c081018252600160808201818152600d60fa1b60a0840152825282518084018452818152603360f81b6020828101919091528084019190915283518085018552828152601960f91b81830152838501528351808501909452908352603160f81b908301526060810191909152620001bc90600d906004620002c5565b50348015620001ca57600080fd5b506040516200251f3803806200251f833981016040819052620001ed9162000412565b620001f8336200021e565b601280546001600160a01b0319166001600160a01b03929092169190911790556200047f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82600b8101928215620002b3579160200282015b82811115620002b35782518051620002a29184916020909101906200030a565b509160200191906001019062000282565b50620002c192915062000395565b5090565b8260048101928215620002b3579160200282015b82811115620002b35782518051620002f99184916020909101906200030a565b5091602001919060010190620002d9565b828054620003189062000442565b90600052602060002090601f0160209004810192826200033c576000855562000387565b82601f106200035757805160ff191683800117855562000387565b8280016001018555821562000387579182015b82811115620003875782518255916020019190600101906200036a565b50620002c1929150620003b6565b80821115620002c1576000620003ac8282620003cd565b5060010162000395565b5b80821115620002c15760008155600101620003b7565b508054620003db9062000442565b6000825580601f10620003ef57506200040f565b601f0160209004906000526020600020908101906200040f9190620003b6565b50565b60006020828403121562000424578081fd5b81516001600160a01b03811681146200043b578182fd5b9392505050565b6002810460018216806200045757607f821691505b602082108114156200047957634e487b7160e01b600052602260045260246000fd5b50919050565b612090806200048f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101145780638da5cb5b1461011c578063a335b5011461012d578063c87b56dd14610140578063f2fde38b1461015357610093565b806304bde4dd146100985780632023e404146100c157806331f15f57146100d6578063357bad8c146100e9575b600080fd5b6100ab6100a63660046115b5565b610166565b6040516100b89190611def565b60405180910390f35b6100d46100cf3660046113ac565b610200565b005b6100d46100e43660046113da565b610255565b6011546100fc906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b6100d4610370565b6000546001600160a01b03166100fc565b6012546100fc906001600160a01b031681565b6100ab61014e3660046115b5565b6103a6565b6100d46101613660046113ac565b61054b565b600c602052600090815260409020805461017f90611f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546101ab90611f5f565b80156101f85780601f106101cd576101008083540402835291602001916101f8565b820191906000526020600020905b8154815290600101906020018083116101db57829003601f168201915b505050505081565b6000546001600160a01b031633146102335760405162461bcd60e51b815260040161022a90611e22565b60405180910390fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027f5760405162461bcd60e51b815260040161022a90611e22565b8281146102c25760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b604482015260640161022a565b60005b83811015610369578282828181106102ed57634e487b7160e01b600052603260045260246000fd5b90506020028101906102ff9190611e57565b600c600088888681811061032357634e487b7160e01b600052603260045260246000fd5b905060200201602081019061033891906115e5565b60ff168152602001908152602001600020919061035692919061124d565b508061036181611f9a565b9150506102c5565b5050505050565b6000546001600160a01b0316331461039a5760405162461bcd60e51b815260040161022a90611e22565b6103a460006105e6565b565b6011546060906001600160a01b0316336001600160a01b0316146104005760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b604482015260640161022a565b6011546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101a06040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906114b4565b9050600081600001516104b05760405180604001604052806007815260200166416c69656e202360c81b8152506104d2565b604051806040016040528060088152602001674d6172696e65202360c01b8152505b6104db85610636565b6104ec6104e787610759565b610a51565b6104f587610bc8565b6040516020016105089493929190611a35565b604051602081830303815290604052905061052281610a51565b6040516020016105329190611cd0565b604051602081830303815290604052925050505b919050565b6000546001600160a01b031633146105755760405162461bcd60e51b815260040161022a90611e22565b6001600160a01b0381166105da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b6105e3816105e6565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161065b57506040805180820190915260018152600360fc1b6020820152610546565b8160005b8115610685578061066f81611f9a565b915061067e9050600a83611ee5565b915061065f565b60008167ffffffffffffffff8111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106d8576020820181803683370190505b5090505b8415610751576106ed600183611f18565b91506106fa600a86611fb5565b610705906030611ecd565b60f81b81838151811061072857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061074a600a86611ee5565b94506106dc565b949350505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc91906114b4565b601154604051633404591760e21b8152600481018690529192506000916001600160a01b039091169063d011645c9060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e91906115cd565b90506060826000015115610993576000828152600c60205260409020805461090d919061088a90611f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546108b690611f5f565b80156109035780601f106108d857610100808354040283529160200191610903565b820191906000526020600020905b8154815290600101906020018083116108e657829003601f168201915b5050505050610fbf565b61091c60058560c00151610fe8565b61092b60048660a00151610fe8565b61093a60038760800151610fe8565b61094960028860600151610fe8565b61095860018960400151610fe8565b61096760008a60200151610fe8565b60405160200161097d979695949392919061169c565b6040516020818303038152906040529050610a27565b6000828152600c6020526040902080546109b1919061088a90611f5f565b6109c1600a856101600151610fe8565b6109d16009866101400151610fe8565b6109e16008876101200151610fe8565b6109f16007886101000151610fe8565b610a0060068960e00151610fe8565b604051602001610a159695949392919061161d565b60405160208183030381529060405290505b80604051602001610a38919061187e565b6040516020818303038152906040529350505050919050565b6060815160001415610a725750604080516020810190915260008152610546565b600060405180606001604052806040815260200161201b6040913990506000600384516002610aa19190611ecd565b610aab9190611ee5565b610ab6906004611ef9565b90506000610ac5826020611ecd565b67ffffffffffffffff811115610aeb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610b15576020820181803683370190505b509050818152600183018586518101602084015b81831015610b835760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610b29565b600389510660018114610b9d5760028114610bae57610bba565b613d3d60f01b600119830152610bba565b603d60f81b6000198301525b509398975050505050505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906114b4565b601154604051633404591760e21b8152600481018690529192506000916001600160a01b039091169063d011645c9060240160206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd91906115cd565b90506060826000015115610d9057610cea600084602001516110c7565b610cf9600185604001516110c7565b610d08600286606001516110c7565b610d17600387608001516110c7565b610d2660048860a001516110c7565b610d3560058960c001516110c7565b610d646040518060400160405280600581526020016413195d995b60da1b815250610d5f8a610636565b611221565b604051602001610d7a979695949392919061172e565b6040516020818303038152906040529050610f0f565b610d9f60068460e001516110c7565b610daf60078561010001516110c7565b610dbf60088661012001516110c7565b610dcf60098761014001516110c7565b610ddf600a8861016001516110c7565b610e096040518060400160405280600581526020016413195d995b60da1b815250610d5f89610636565b610ee76040518060400160405280600a81526020016952616e6b2053636f726560b01b815250600d8b610180015160ff1660048110610e5857634e487b7160e01b600052603260045260246000fd5b018054610e6490611f5f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9090611f5f565b8015610edd5780601f10610eb257610100808354040283529160200191610edd565b820191906000526020600020905b815481529060010190602001808311610ec057829003601f168201915b5050505050611221565b604051602001610efd979695949392919061172e565b60405160208183030381529060405290505b80611b39861115610f3f57604051806040016040528060078152602001661123b2b710189160c91b815250610f60565b604051806040016040528060078152602001661123b2b710181160c91b8152505b8451610f8b57604051806040016040528060078152602001661120b634b2b71160c91b815250610fad565b604051806040016040528060088152602001671126b0b934b7329160c11b8152505b604051602001610a3893929190611976565b606081604051602001610fd29190611bf8565b6040516020818303038152906040529050919050565b601254604051639bf2ee3560e01b815260ff80851660048301528316602482015260609160009182916001600160a01b031690639bf2ee359060440160006040518083038186803b15801561103c57600080fd5b505afa158015611050573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110789190810190611443565b9250925050811561109c5760405180602001604052806000815250925050506110c1565b806040516020016110ad9190611d15565b604051602081830303815290604052925050505b92915050565b6060600060018460ff16600b81106110ef57634e487b7160e01b600052603260045260246000fd5b0180546110fb90611f5f565b80601f016020809104026020016040519081016040528092919081815260200182805461112790611f5f565b80156111745780601f1061114957610100808354040283529160200191611174565b820191906000526020600020905b81548152906001019060200180831161115757829003601f168201915b5050601254604051639bf2ee3560e01b815260ff808b166004830152891660248201529495506000946001600160a01b039091169350639bf2ee359250604401905060006040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120a9190810190611443565b5050905081816040516020016110ad92919061180d565b6060828260405160200161123692919061180d565b604051602081830303815290604052905092915050565b82805461125990611f5f565b90600052602060002090601f01602090048101928261127b57600085556112c1565b82601f106112945782800160ff198235161785556112c1565b828001600101855582156112c1579182015b828111156112c15782358255916020019190600101906112a6565b506112cd9291506112d1565b5090565b5b808211156112cd57600081556001016112d2565b60008083601f8401126112f7578081fd5b50813567ffffffffffffffff81111561130e578182fd5b602083019150836020808302850101111561132857600080fd5b9250929050565b8051801515811461054657600080fd5b600082601f83011261134f578081fd5b815167ffffffffffffffff81111561136957611369611ff5565b61137c601f8201601f1916602001611e9c565b818152846020838601011115611390578283fd5b610751826020830160208701611f2f565b80516105468161200b565b6000602082840312156113bd578081fd5b81356001600160a01b03811681146113d3578182fd5b9392505050565b600080600080604085870312156113ef578283fd5b843567ffffffffffffffff80821115611406578485fd5b611412888389016112e6565b9096509450602087013591508082111561142a578384fd5b50611437878288016112e6565b95989497509550505050565b600080600060608486031215611457578283fd5b835167ffffffffffffffff8082111561146e578485fd5b61147a8783880161133f565b94506114886020870161132f565b9350604086015191508082111561149d578283fd5b506114aa8682870161133f565b9150509250925092565b60006101a08083850312156114c7578182fd5b6114d081611e9c565b90506114db8361132f565b81526114e9602084016113a1565b60208201526114fa604084016113a1565b604082015261150b606084016113a1565b606082015261151c608084016113a1565b608082015261152d60a084016113a1565b60a082015261153e60c084016113a1565b60c082015261154f60e084016113a1565b60e08201526101006115628185016113a1565b908201526101206115748482016113a1565b908201526101406115868482016113a1565b908201526101606115988482016113a1565b908201526101806115aa8482016113a1565b908201529392505050565b6000602082840312156115c6578081fd5b5035919050565b6000602082840312156115de578081fd5b5051919050565b6000602082840312156115f6578081fd5b81356113d38161200b565b60008151611613818560208601611f2f565b9290920192915050565b6000875160206116308285838d01611f2f565b8851918401916116438184848d01611f2f565b88519201916116558184848c01611f2f565b87519201916116678184848b01611f2f565b86519201916116798184848a01611f2f565b855192019161168b8184848901611f2f565b919091019998505050505050505050565b6000885160206116af8285838e01611f2f565b8951918401916116c28184848e01611f2f565b89519201916116d48184848d01611f2f565b88519201916116e68184848c01611f2f565b87519201916116f88184848b01611f2f565b865192019161170a8184848a01611f2f565b855192019161171c8184848901611f2f565b919091019a9950505050505050505050565b6000885160206117418285838e01611f2f565b8184019150600b60fa1b8083528a516117608160018601858f01611f2f565b60019301928301819052895161177c8160028601858e01611f2f565b6002930192830181905288516117988160038601858d01611f2f565b6003930192830181905287516117b48160048601858c01611f2f565b600493019283015285516117ce8160058501848a01611f2f565b6117fd6117f06117ea600584870101600b60fa1b815260010190565b88611601565b600b60fa1b815260010190565b9c9b505050505050505050505050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061183881600f850160208801611f2f565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161186381601a840160208801611f2f565b61227d60f01b601a9290910191820152601c01949350505050565b60007f3c7376672069643d226d6e614e46547632222077696474683d2231303025222082527f6865696768743d2231303025222076657273696f6e3d22312e3122207669657760208301527f426f783d22302030203130383820313038382220786d6c6e733d22687474703a60408301527f2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c6960608301527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b608083015261111f60f11b60a083015282516119598160a2850160208701611f2f565b651e17b9bb339f60d11b60a293909101928301525060a801919050565b6000605b60f81b82528451611992816001850160208901611f2f565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516119db816024840160208901611f2f565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a00602492909101918201528351611a19816043840160208801611f2f565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b81528451600090611a5b81600a850160208a01611f2f565b855190830190611a7281600a840160208a01611f2f565b7f222c20226465736372697074696f6e223a202253706163652047616d65206973600a92909101918201527f20612031303025206f6e2d636861696e20636f6c6c65637469626c6520626173602a8201527f6564207374726174656779205056452067616d652e204c657665726167696e67604a8201527f20626f7468204c312026204c322e20416c6c206d6574616461746120616e6420606a8201527f706978656c2073707269746573206172652067656e65726174656420616e6420608a8201527f73746f72656420636f6d706c6574656c79206f6e2d636861696e2e204e6f204160aa8201527f504920616e6420495046532061726520757365642e222c2022696d616765223a60ca8201527f2022646174613a696d6167652f7376672b786d6c3b6261736536342c0000000060ea820152611bed611be0611bda611bbe610106850189611601565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b86611601565b607d60f81b815260010190565b979650505050505050565b60007f3c696d61676520783d22302220793d2230222077696474683d2231303838222082527f6865696768743d22313038382220696d6167652d72656e646572696e673d227060208301527f6978656c6174656422207072657365727665417370656374526174696f3d227860408301527f4d6964594d69642220786c696e6b3a687265663d22646174613a696d6167652f60608301526a1c1b99ced8985cd94d8d0b60aa1b60808301528251611cb681608b850160208701611f2f565b6211179f60e91b608b939091019283015250608e01919050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251611d0881601d850160208701611f2f565b91909101601d0192915050565b60007f3c696d61676520783d2233322220793d223332222077696474683d223130323482527f22206865696768743d22313032342220696d6167652d72656e646572696e673d60208301527f22706978656c6174656422207072657365727665417370656374526174696f3d60408301527f22784d6964594d69642220786c696e6b3a687265663d22646174613a696d616760608301526c194bdc1b99ced8985cd94d8d0b609a1b60808301528251611dd581608d850160208701611f2f565b6211179f60e91b608d939091019283015250609001919050565b6000602082528251806020840152611e0e816040850160208701611f2f565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112611e6d578283fd5b83018035915067ffffffffffffffff821115611e87578283fd5b60200191503681900382131561132857600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ec557611ec5611ff5565b604052919050565b60008219821115611ee057611ee0611fc9565b500190565b600082611ef457611ef4611fdf565b500490565b6000816000190483118215151615611f1357611f13611fc9565b500290565b600082821015611f2a57611f2a611fc9565b500390565b60005b83811015611f4a578181015183820152602001611f32565b83811115611f59576000848401525b50505050565b600281046001821680611f7357607f821691505b60208210811415611f9457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fae57611fae611fc9565b5060010190565b600082611fc457611fc4611fdf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60ff811681146105e357600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208c4c4b38fdff63d631629f7e45332f142e9fe33879d10143339bd50df9038bec64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101145780638da5cb5b1461011c578063a335b5011461012d578063c87b56dd14610140578063f2fde38b1461015357610093565b806304bde4dd146100985780632023e404146100c157806331f15f57146100d6578063357bad8c146100e9575b600080fd5b6100ab6100a63660046115b5565b610166565b6040516100b89190611def565b60405180910390f35b6100d46100cf3660046113ac565b610200565b005b6100d46100e43660046113da565b610255565b6011546100fc906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b6100d4610370565b6000546001600160a01b03166100fc565b6012546100fc906001600160a01b031681565b6100ab61014e3660046115b5565b6103a6565b6100d46101613660046113ac565b61054b565b600c602052600090815260409020805461017f90611f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546101ab90611f5f565b80156101f85780601f106101cd576101008083540402835291602001916101f8565b820191906000526020600020905b8154815290600101906020018083116101db57829003601f168201915b505050505081565b6000546001600160a01b031633146102335760405162461bcd60e51b815260040161022a90611e22565b60405180910390fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027f5760405162461bcd60e51b815260040161022a90611e22565b8281146102c25760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b604482015260640161022a565b60005b83811015610369578282828181106102ed57634e487b7160e01b600052603260045260246000fd5b90506020028101906102ff9190611e57565b600c600088888681811061032357634e487b7160e01b600052603260045260246000fd5b905060200201602081019061033891906115e5565b60ff168152602001908152602001600020919061035692919061124d565b508061036181611f9a565b9150506102c5565b5050505050565b6000546001600160a01b0316331461039a5760405162461bcd60e51b815260040161022a90611e22565b6103a460006105e6565b565b6011546060906001600160a01b0316336001600160a01b0316146104005760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b604482015260640161022a565b6011546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101a06040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906114b4565b9050600081600001516104b05760405180604001604052806007815260200166416c69656e202360c81b8152506104d2565b604051806040016040528060088152602001674d6172696e65202360c01b8152505b6104db85610636565b6104ec6104e787610759565b610a51565b6104f587610bc8565b6040516020016105089493929190611a35565b604051602081830303815290604052905061052281610a51565b6040516020016105329190611cd0565b604051602081830303815290604052925050505b919050565b6000546001600160a01b031633146105755760405162461bcd60e51b815260040161022a90611e22565b6001600160a01b0381166105da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b6105e3816105e6565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161065b57506040805180820190915260018152600360fc1b6020820152610546565b8160005b8115610685578061066f81611f9a565b915061067e9050600a83611ee5565b915061065f565b60008167ffffffffffffffff8111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106d8576020820181803683370190505b5090505b8415610751576106ed600183611f18565b91506106fa600a86611fb5565b610705906030611ecd565b60f81b81838151811061072857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061074a600a86611ee5565b94506106dc565b949350505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc91906114b4565b601154604051633404591760e21b8152600481018690529192506000916001600160a01b039091169063d011645c9060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e91906115cd565b90506060826000015115610993576000828152600c60205260409020805461090d919061088a90611f5f565b80601f01602080910402602001604051908101604052809291908181526020018280546108b690611f5f565b80156109035780601f106108d857610100808354040283529160200191610903565b820191906000526020600020905b8154815290600101906020018083116108e657829003601f168201915b5050505050610fbf565b61091c60058560c00151610fe8565b61092b60048660a00151610fe8565b61093a60038760800151610fe8565b61094960028860600151610fe8565b61095860018960400151610fe8565b61096760008a60200151610fe8565b60405160200161097d979695949392919061169c565b6040516020818303038152906040529050610a27565b6000828152600c6020526040902080546109b1919061088a90611f5f565b6109c1600a856101600151610fe8565b6109d16009866101400151610fe8565b6109e16008876101200151610fe8565b6109f16007886101000151610fe8565b610a0060068960e00151610fe8565b604051602001610a159695949392919061161d565b60405160208183030381529060405290505b80604051602001610a38919061187e565b6040516020818303038152906040529350505050919050565b6060815160001415610a725750604080516020810190915260008152610546565b600060405180606001604052806040815260200161201b6040913990506000600384516002610aa19190611ecd565b610aab9190611ee5565b610ab6906004611ef9565b90506000610ac5826020611ecd565b67ffffffffffffffff811115610aeb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610b15576020820181803683370190505b509050818152600183018586518101602084015b81831015610b835760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610b29565b600389510660018114610b9d5760028114610bae57610bba565b613d3d60f01b600119830152610bba565b603d60f81b6000198301525b509398975050505050505050565b6011546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101a06040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906114b4565b601154604051633404591760e21b8152600481018690529192506000916001600160a01b039091169063d011645c9060240160206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd91906115cd565b90506060826000015115610d9057610cea600084602001516110c7565b610cf9600185604001516110c7565b610d08600286606001516110c7565b610d17600387608001516110c7565b610d2660048860a001516110c7565b610d3560058960c001516110c7565b610d646040518060400160405280600581526020016413195d995b60da1b815250610d5f8a610636565b611221565b604051602001610d7a979695949392919061172e565b6040516020818303038152906040529050610f0f565b610d9f60068460e001516110c7565b610daf60078561010001516110c7565b610dbf60088661012001516110c7565b610dcf60098761014001516110c7565b610ddf600a8861016001516110c7565b610e096040518060400160405280600581526020016413195d995b60da1b815250610d5f89610636565b610ee76040518060400160405280600a81526020016952616e6b2053636f726560b01b815250600d8b610180015160ff1660048110610e5857634e487b7160e01b600052603260045260246000fd5b018054610e6490611f5f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9090611f5f565b8015610edd5780601f10610eb257610100808354040283529160200191610edd565b820191906000526020600020905b815481529060010190602001808311610ec057829003601f168201915b5050505050611221565b604051602001610efd979695949392919061172e565b60405160208183030381529060405290505b80611b39861115610f3f57604051806040016040528060078152602001661123b2b710189160c91b815250610f60565b604051806040016040528060078152602001661123b2b710181160c91b8152505b8451610f8b57604051806040016040528060078152602001661120b634b2b71160c91b815250610fad565b604051806040016040528060088152602001671126b0b934b7329160c11b8152505b604051602001610a3893929190611976565b606081604051602001610fd29190611bf8565b6040516020818303038152906040529050919050565b601254604051639bf2ee3560e01b815260ff80851660048301528316602482015260609160009182916001600160a01b031690639bf2ee359060440160006040518083038186803b15801561103c57600080fd5b505afa158015611050573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110789190810190611443565b9250925050811561109c5760405180602001604052806000815250925050506110c1565b806040516020016110ad9190611d15565b604051602081830303815290604052925050505b92915050565b6060600060018460ff16600b81106110ef57634e487b7160e01b600052603260045260246000fd5b0180546110fb90611f5f565b80601f016020809104026020016040519081016040528092919081815260200182805461112790611f5f565b80156111745780601f1061114957610100808354040283529160200191611174565b820191906000526020600020905b81548152906001019060200180831161115757829003601f168201915b5050601254604051639bf2ee3560e01b815260ff808b166004830152891660248201529495506000946001600160a01b039091169350639bf2ee359250604401905060006040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120a9190810190611443565b5050905081816040516020016110ad92919061180d565b6060828260405160200161123692919061180d565b604051602081830303815290604052905092915050565b82805461125990611f5f565b90600052602060002090601f01602090048101928261127b57600085556112c1565b82601f106112945782800160ff198235161785556112c1565b828001600101855582156112c1579182015b828111156112c15782358255916020019190600101906112a6565b506112cd9291506112d1565b5090565b5b808211156112cd57600081556001016112d2565b60008083601f8401126112f7578081fd5b50813567ffffffffffffffff81111561130e578182fd5b602083019150836020808302850101111561132857600080fd5b9250929050565b8051801515811461054657600080fd5b600082601f83011261134f578081fd5b815167ffffffffffffffff81111561136957611369611ff5565b61137c601f8201601f1916602001611e9c565b818152846020838601011115611390578283fd5b610751826020830160208701611f2f565b80516105468161200b565b6000602082840312156113bd578081fd5b81356001600160a01b03811681146113d3578182fd5b9392505050565b600080600080604085870312156113ef578283fd5b843567ffffffffffffffff80821115611406578485fd5b611412888389016112e6565b9096509450602087013591508082111561142a578384fd5b50611437878288016112e6565b95989497509550505050565b600080600060608486031215611457578283fd5b835167ffffffffffffffff8082111561146e578485fd5b61147a8783880161133f565b94506114886020870161132f565b9350604086015191508082111561149d578283fd5b506114aa8682870161133f565b9150509250925092565b60006101a08083850312156114c7578182fd5b6114d081611e9c565b90506114db8361132f565b81526114e9602084016113a1565b60208201526114fa604084016113a1565b604082015261150b606084016113a1565b606082015261151c608084016113a1565b608082015261152d60a084016113a1565b60a082015261153e60c084016113a1565b60c082015261154f60e084016113a1565b60e08201526101006115628185016113a1565b908201526101206115748482016113a1565b908201526101406115868482016113a1565b908201526101606115988482016113a1565b908201526101806115aa8482016113a1565b908201529392505050565b6000602082840312156115c6578081fd5b5035919050565b6000602082840312156115de578081fd5b5051919050565b6000602082840312156115f6578081fd5b81356113d38161200b565b60008151611613818560208601611f2f565b9290920192915050565b6000875160206116308285838d01611f2f565b8851918401916116438184848d01611f2f565b88519201916116558184848c01611f2f565b87519201916116678184848b01611f2f565b86519201916116798184848a01611f2f565b855192019161168b8184848901611f2f565b919091019998505050505050505050565b6000885160206116af8285838e01611f2f565b8951918401916116c28184848e01611f2f565b89519201916116d48184848d01611f2f565b88519201916116e68184848c01611f2f565b87519201916116f88184848b01611f2f565b865192019161170a8184848a01611f2f565b855192019161171c8184848901611f2f565b919091019a9950505050505050505050565b6000885160206117418285838e01611f2f565b8184019150600b60fa1b8083528a516117608160018601858f01611f2f565b60019301928301819052895161177c8160028601858e01611f2f565b6002930192830181905288516117988160038601858d01611f2f565b6003930192830181905287516117b48160048601858c01611f2f565b600493019283015285516117ce8160058501848a01611f2f565b6117fd6117f06117ea600584870101600b60fa1b815260010190565b88611601565b600b60fa1b815260010190565b9c9b505050505050505050505050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061183881600f850160208801611f2f565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161186381601a840160208801611f2f565b61227d60f01b601a9290910191820152601c01949350505050565b60007f3c7376672069643d226d6e614e46547632222077696474683d2231303025222082527f6865696768743d2231303025222076657273696f6e3d22312e3122207669657760208301527f426f783d22302030203130383820313038382220786d6c6e733d22687474703a60408301527f2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c6960608301527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b608083015261111f60f11b60a083015282516119598160a2850160208701611f2f565b651e17b9bb339f60d11b60a293909101928301525060a801919050565b6000605b60f81b82528451611992816001850160208901611f2f565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516119db816024840160208901611f2f565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a00602492909101918201528351611a19816043840160208801611f2f565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b81528451600090611a5b81600a850160208a01611f2f565b855190830190611a7281600a840160208a01611f2f565b7f222c20226465736372697074696f6e223a202253706163652047616d65206973600a92909101918201527f20612031303025206f6e2d636861696e20636f6c6c65637469626c6520626173602a8201527f6564207374726174656779205056452067616d652e204c657665726167696e67604a8201527f20626f7468204c312026204c322e20416c6c206d6574616461746120616e6420606a8201527f706978656c2073707269746573206172652067656e65726174656420616e6420608a8201527f73746f72656420636f6d706c6574656c79206f6e2d636861696e2e204e6f204160aa8201527f504920616e6420495046532061726520757365642e222c2022696d616765223a60ca8201527f2022646174613a696d6167652f7376672b786d6c3b6261736536342c0000000060ea820152611bed611be0611bda611bbe610106850189611601565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b86611601565b607d60f81b815260010190565b979650505050505050565b60007f3c696d61676520783d22302220793d2230222077696474683d2231303838222082527f6865696768743d22313038382220696d6167652d72656e646572696e673d227060208301527f6978656c6174656422207072657365727665417370656374526174696f3d227860408301527f4d6964594d69642220786c696e6b3a687265663d22646174613a696d6167652f60608301526a1c1b99ced8985cd94d8d0b60aa1b60808301528251611cb681608b850160208701611f2f565b6211179f60e91b608b939091019283015250608e01919050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251611d0881601d850160208701611f2f565b91909101601d0192915050565b60007f3c696d61676520783d2233322220793d223332222077696474683d223130323482527f22206865696768743d22313032342220696d6167652d72656e646572696e673d60208301527f22706978656c6174656422207072657365727665417370656374526174696f3d60408301527f22784d6964594d69642220786c696e6b3a687265663d22646174613a696d616760608301526c194bdc1b99ced8985cd94d8d0b609a1b60808301528251611dd581608d850160208701611f2f565b6211179f60e91b608d939091019283015250609001919050565b6000602082528251806020840152611e0e816040850160208701611f2f565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e19843603018112611e6d578283fd5b83018035915067ffffffffffffffff821115611e87578283fd5b60200191503681900382131561132857600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ec557611ec5611ff5565b604052919050565b60008219821115611ee057611ee0611fc9565b500190565b600082611ef457611ef4611fdf565b500490565b6000816000190483118215151615611f1357611f13611fc9565b500290565b600082821015611f2a57611f2a611fc9565b500390565b60005b83811015611f4a578181015183820152602001611f32565b83811115611f59576000848401525b50505050565b600281046001821680611f7357607f821691505b60208210811415611f9457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fae57611fae611fc9565b5060010190565b600082611fc457611fc4611fdf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60ff811681146105e357600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208c4c4b38fdff63d631629f7e45332f142e9fe33879d10143339bd50df9038bec64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the ID of the token to generate the metadata for"
        },
        "returns": {
          "_0": "a base64 encoded JSON dictionary of the token's metadata and SVG"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uploadBackgrounds(uint8[],string[])": {
        "params": {
          "_backgrounds": "the base64 encoded PNGs for each level",
          "_levels": "the trait levels to upload"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenURI(uint256)": {
        "notice": "generates a base64 encoded metadata response without referencing off-chain content"
      },
      "uploadBackgrounds(uint8[],string[])": {
        "notice": "administrative to upload the levels and images associated to trait"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1512,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16776,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)11_storage"
      },
      {
        "astId": 16780,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "backgrounds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 16789,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "_ranks",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 16792,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "mnaNFT",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IMnAv2)17865"
      },
      {
        "astId": 16795,
        "contract": "contracts/Traitsv2.sol:Traitsv2",
        "label": "v1Traits",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(Traits)16738"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)11_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_contract(IMnAv2)17865": {
        "encoding": "inplace",
        "label": "contract IMnAv2",
        "numberOfBytes": "20"
      },
      "t_contract(Traits)16738": {
        "encoding": "inplace",
        "label": "contract Traits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}